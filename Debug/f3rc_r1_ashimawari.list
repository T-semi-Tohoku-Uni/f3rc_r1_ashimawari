
f3rc_r1_ashimawari.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081f0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000390  080083d0  080083d0  000093d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008760  08008760  0000a114  2**0
                  CONTENTS
  4 .ARM          00000008  08008760  08008760  00009760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008768  08008768  0000a114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008768  08008768  00009768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800876c  0800876c  0000976c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000114  20000000  08008770  0000a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e4  20000114  08008884  0000a114  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f8  08008884  0000a4f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a114  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015ac3  00000000  00000000  0000a144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027ab  00000000  00000000  0001fc07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d8  00000000  00000000  000223b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000eb0  00000000  00000000  00023690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027c78  00000000  00000000  00024540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001516f  00000000  00000000  0004c1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001033e7  00000000  00000000  00061327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016470e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d70  00000000  00000000  00164754  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0016a4c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000114 	.word	0x20000114
 80001fc:	00000000 	.word	0x00000000
 8000200:	080083b8 	.word	0x080083b8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000118 	.word	0x20000118
 800021c:	080083b8 	.word	0x080083b8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_uldivmod>:
 8000c5c:	b953      	cbnz	r3, 8000c74 <__aeabi_uldivmod+0x18>
 8000c5e:	b94a      	cbnz	r2, 8000c74 <__aeabi_uldivmod+0x18>
 8000c60:	2900      	cmp	r1, #0
 8000c62:	bf08      	it	eq
 8000c64:	2800      	cmpeq	r0, #0
 8000c66:	bf1c      	itt	ne
 8000c68:	f04f 31ff 	movne.w	r1, #4294967295
 8000c6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c70:	f000 b96a 	b.w	8000f48 <__aeabi_idiv0>
 8000c74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c7c:	f000 f806 	bl	8000c8c <__udivmoddi4>
 8000c80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c88:	b004      	add	sp, #16
 8000c8a:	4770      	bx	lr

08000c8c <__udivmoddi4>:
 8000c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c90:	9d08      	ldr	r5, [sp, #32]
 8000c92:	460c      	mov	r4, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14e      	bne.n	8000d36 <__udivmoddi4+0xaa>
 8000c98:	4694      	mov	ip, r2
 8000c9a:	458c      	cmp	ip, r1
 8000c9c:	4686      	mov	lr, r0
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	d962      	bls.n	8000d6a <__udivmoddi4+0xde>
 8000ca4:	b14a      	cbz	r2, 8000cba <__udivmoddi4+0x2e>
 8000ca6:	f1c2 0320 	rsb	r3, r2, #32
 8000caa:	4091      	lsls	r1, r2
 8000cac:	fa20 f303 	lsr.w	r3, r0, r3
 8000cb0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb4:	4319      	orrs	r1, r3
 8000cb6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbe:	fa1f f68c 	uxth.w	r6, ip
 8000cc2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cca:	fb07 1114 	mls	r1, r7, r4, r1
 8000cce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cd2:	fb04 f106 	mul.w	r1, r4, r6
 8000cd6:	4299      	cmp	r1, r3
 8000cd8:	d90a      	bls.n	8000cf0 <__udivmoddi4+0x64>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ce2:	f080 8112 	bcs.w	8000f0a <__udivmoddi4+0x27e>
 8000ce6:	4299      	cmp	r1, r3
 8000ce8:	f240 810f 	bls.w	8000f0a <__udivmoddi4+0x27e>
 8000cec:	3c02      	subs	r4, #2
 8000cee:	4463      	add	r3, ip
 8000cf0:	1a59      	subs	r1, r3, r1
 8000cf2:	fa1f f38e 	uxth.w	r3, lr
 8000cf6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cfa:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d02:	fb00 f606 	mul.w	r6, r0, r6
 8000d06:	429e      	cmp	r6, r3
 8000d08:	d90a      	bls.n	8000d20 <__udivmoddi4+0x94>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d12:	f080 80fc 	bcs.w	8000f0e <__udivmoddi4+0x282>
 8000d16:	429e      	cmp	r6, r3
 8000d18:	f240 80f9 	bls.w	8000f0e <__udivmoddi4+0x282>
 8000d1c:	4463      	add	r3, ip
 8000d1e:	3802      	subs	r0, #2
 8000d20:	1b9b      	subs	r3, r3, r6
 8000d22:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d26:	2100      	movs	r1, #0
 8000d28:	b11d      	cbz	r5, 8000d32 <__udivmoddi4+0xa6>
 8000d2a:	40d3      	lsrs	r3, r2
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	e9c5 3200 	strd	r3, r2, [r5]
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	428b      	cmp	r3, r1
 8000d38:	d905      	bls.n	8000d46 <__udivmoddi4+0xba>
 8000d3a:	b10d      	cbz	r5, 8000d40 <__udivmoddi4+0xb4>
 8000d3c:	e9c5 0100 	strd	r0, r1, [r5]
 8000d40:	2100      	movs	r1, #0
 8000d42:	4608      	mov	r0, r1
 8000d44:	e7f5      	b.n	8000d32 <__udivmoddi4+0xa6>
 8000d46:	fab3 f183 	clz	r1, r3
 8000d4a:	2900      	cmp	r1, #0
 8000d4c:	d146      	bne.n	8000ddc <__udivmoddi4+0x150>
 8000d4e:	42a3      	cmp	r3, r4
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0xcc>
 8000d52:	4290      	cmp	r0, r2
 8000d54:	f0c0 80f0 	bcc.w	8000f38 <__udivmoddi4+0x2ac>
 8000d58:	1a86      	subs	r6, r0, r2
 8000d5a:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	2d00      	cmp	r5, #0
 8000d62:	d0e6      	beq.n	8000d32 <__udivmoddi4+0xa6>
 8000d64:	e9c5 6300 	strd	r6, r3, [r5]
 8000d68:	e7e3      	b.n	8000d32 <__udivmoddi4+0xa6>
 8000d6a:	2a00      	cmp	r2, #0
 8000d6c:	f040 8090 	bne.w	8000e90 <__udivmoddi4+0x204>
 8000d70:	eba1 040c 	sub.w	r4, r1, ip
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	fa1f f78c 	uxth.w	r7, ip
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d86:	fb08 4416 	mls	r4, r8, r6, r4
 8000d8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8e:	fb07 f006 	mul.w	r0, r7, r6
 8000d92:	4298      	cmp	r0, r3
 8000d94:	d908      	bls.n	8000da8 <__udivmoddi4+0x11c>
 8000d96:	eb1c 0303 	adds.w	r3, ip, r3
 8000d9a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9e:	d202      	bcs.n	8000da6 <__udivmoddi4+0x11a>
 8000da0:	4298      	cmp	r0, r3
 8000da2:	f200 80cd 	bhi.w	8000f40 <__udivmoddi4+0x2b4>
 8000da6:	4626      	mov	r6, r4
 8000da8:	1a1c      	subs	r4, r3, r0
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb4 f0f8 	udiv	r0, r4, r8
 8000db2:	fb08 4410 	mls	r4, r8, r0, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb00 f707 	mul.w	r7, r0, r7
 8000dbe:	429f      	cmp	r7, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x148>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x146>
 8000dcc:	429f      	cmp	r7, r3
 8000dce:	f200 80b0 	bhi.w	8000f32 <__udivmoddi4+0x2a6>
 8000dd2:	4620      	mov	r0, r4
 8000dd4:	1bdb      	subs	r3, r3, r7
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0x9c>
 8000ddc:	f1c1 0620 	rsb	r6, r1, #32
 8000de0:	408b      	lsls	r3, r1
 8000de2:	fa22 f706 	lsr.w	r7, r2, r6
 8000de6:	431f      	orrs	r7, r3
 8000de8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dec:	fa04 f301 	lsl.w	r3, r4, r1
 8000df0:	ea43 030c 	orr.w	r3, r3, ip
 8000df4:	40f4      	lsrs	r4, r6
 8000df6:	fa00 f801 	lsl.w	r8, r0, r1
 8000dfa:	0c38      	lsrs	r0, r7, #16
 8000dfc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e00:	fbb4 fef0 	udiv	lr, r4, r0
 8000e04:	fa1f fc87 	uxth.w	ip, r7
 8000e08:	fb00 441e 	mls	r4, r0, lr, r4
 8000e0c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e10:	fb0e f90c 	mul.w	r9, lr, ip
 8000e14:	45a1      	cmp	r9, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	d90a      	bls.n	8000e32 <__udivmoddi4+0x1a6>
 8000e1c:	193c      	adds	r4, r7, r4
 8000e1e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e22:	f080 8084 	bcs.w	8000f2e <__udivmoddi4+0x2a2>
 8000e26:	45a1      	cmp	r9, r4
 8000e28:	f240 8081 	bls.w	8000f2e <__udivmoddi4+0x2a2>
 8000e2c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e30:	443c      	add	r4, r7
 8000e32:	eba4 0409 	sub.w	r4, r4, r9
 8000e36:	fa1f f983 	uxth.w	r9, r3
 8000e3a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3e:	fb00 4413 	mls	r4, r0, r3, r4
 8000e42:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e46:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e4a:	45a4      	cmp	ip, r4
 8000e4c:	d907      	bls.n	8000e5e <__udivmoddi4+0x1d2>
 8000e4e:	193c      	adds	r4, r7, r4
 8000e50:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e54:	d267      	bcs.n	8000f26 <__udivmoddi4+0x29a>
 8000e56:	45a4      	cmp	ip, r4
 8000e58:	d965      	bls.n	8000f26 <__udivmoddi4+0x29a>
 8000e5a:	3b02      	subs	r3, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e62:	fba0 9302 	umull	r9, r3, r0, r2
 8000e66:	eba4 040c 	sub.w	r4, r4, ip
 8000e6a:	429c      	cmp	r4, r3
 8000e6c:	46ce      	mov	lr, r9
 8000e6e:	469c      	mov	ip, r3
 8000e70:	d351      	bcc.n	8000f16 <__udivmoddi4+0x28a>
 8000e72:	d04e      	beq.n	8000f12 <__udivmoddi4+0x286>
 8000e74:	b155      	cbz	r5, 8000e8c <__udivmoddi4+0x200>
 8000e76:	ebb8 030e 	subs.w	r3, r8, lr
 8000e7a:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7e:	fa04 f606 	lsl.w	r6, r4, r6
 8000e82:	40cb      	lsrs	r3, r1
 8000e84:	431e      	orrs	r6, r3
 8000e86:	40cc      	lsrs	r4, r1
 8000e88:	e9c5 6400 	strd	r6, r4, [r5]
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	e750      	b.n	8000d32 <__udivmoddi4+0xa6>
 8000e90:	f1c2 0320 	rsb	r3, r2, #32
 8000e94:	fa20 f103 	lsr.w	r1, r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa24 f303 	lsr.w	r3, r4, r3
 8000ea0:	4094      	lsls	r4, r2
 8000ea2:	430c      	orrs	r4, r1
 8000ea4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000eac:	fa1f f78c 	uxth.w	r7, ip
 8000eb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb4:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb8:	0c23      	lsrs	r3, r4, #16
 8000eba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ebe:	fb00 f107 	mul.w	r1, r0, r7
 8000ec2:	4299      	cmp	r1, r3
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x24c>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 36ff 	add.w	r6, r0, #4294967295
 8000ece:	d22c      	bcs.n	8000f2a <__udivmoddi4+0x29e>
 8000ed0:	4299      	cmp	r1, r3
 8000ed2:	d92a      	bls.n	8000f2a <__udivmoddi4+0x29e>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1a5b      	subs	r3, r3, r1
 8000eda:	b2a4      	uxth	r4, r4
 8000edc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ee0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee8:	fb01 f307 	mul.w	r3, r1, r7
 8000eec:	42a3      	cmp	r3, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x276>
 8000ef0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef8:	d213      	bcs.n	8000f22 <__udivmoddi4+0x296>
 8000efa:	42a3      	cmp	r3, r4
 8000efc:	d911      	bls.n	8000f22 <__udivmoddi4+0x296>
 8000efe:	3902      	subs	r1, #2
 8000f00:	4464      	add	r4, ip
 8000f02:	1ae4      	subs	r4, r4, r3
 8000f04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f08:	e739      	b.n	8000d7e <__udivmoddi4+0xf2>
 8000f0a:	4604      	mov	r4, r0
 8000f0c:	e6f0      	b.n	8000cf0 <__udivmoddi4+0x64>
 8000f0e:	4608      	mov	r0, r1
 8000f10:	e706      	b.n	8000d20 <__udivmoddi4+0x94>
 8000f12:	45c8      	cmp	r8, r9
 8000f14:	d2ae      	bcs.n	8000e74 <__udivmoddi4+0x1e8>
 8000f16:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f1a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1e:	3801      	subs	r0, #1
 8000f20:	e7a8      	b.n	8000e74 <__udivmoddi4+0x1e8>
 8000f22:	4631      	mov	r1, r6
 8000f24:	e7ed      	b.n	8000f02 <__udivmoddi4+0x276>
 8000f26:	4603      	mov	r3, r0
 8000f28:	e799      	b.n	8000e5e <__udivmoddi4+0x1d2>
 8000f2a:	4630      	mov	r0, r6
 8000f2c:	e7d4      	b.n	8000ed8 <__udivmoddi4+0x24c>
 8000f2e:	46d6      	mov	lr, sl
 8000f30:	e77f      	b.n	8000e32 <__udivmoddi4+0x1a6>
 8000f32:	4463      	add	r3, ip
 8000f34:	3802      	subs	r0, #2
 8000f36:	e74d      	b.n	8000dd4 <__udivmoddi4+0x148>
 8000f38:	4606      	mov	r6, r0
 8000f3a:	4623      	mov	r3, r4
 8000f3c:	4608      	mov	r0, r1
 8000f3e:	e70f      	b.n	8000d60 <__udivmoddi4+0xd4>
 8000f40:	3e02      	subs	r6, #2
 8000f42:	4463      	add	r3, ip
 8000f44:	e730      	b.n	8000da8 <__udivmoddi4+0x11c>
 8000f46:	bf00      	nop

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	0000      	movs	r0, r0
	...

08000f50 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000f50:	b5b0      	push	{r4, r5, r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
	if(htim == &htim6){
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4abf      	ldr	r2, [pc, #764]	@ (8001258 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	f040 8201 	bne.w	8001364 <HAL_TIM_PeriodElapsedCallback+0x414>

		for (int i=0; i<=3; i++){
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]
 8000f66:	e1ec      	b.n	8001342 <HAL_TIM_PeriodElapsedCallback+0x3f2>
			robomas[i].hensa = robomas[i].trgVel - robomas[i].actVel;
 8000f68:	49bc      	ldr	r1, [pc, #752]	@ (800125c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000f6a:	697a      	ldr	r2, [r7, #20]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	4413      	add	r3, r2
 8000f72:	00db      	lsls	r3, r3, #3
 8000f74:	440b      	add	r3, r1
 8000f76:	3304      	adds	r3, #4
 8000f78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	49b7      	ldr	r1, [pc, #732]	@ (800125c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000f80:	697a      	ldr	r2, [r7, #20]
 8000f82:	4613      	mov	r3, r2
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	4413      	add	r3, r2
 8000f88:	00db      	lsls	r3, r3, #3
 8000f8a:	440b      	add	r3, r1
 8000f8c:	3306      	adds	r3, #6
 8000f8e:	881b      	ldrh	r3, [r3, #0]
 8000f90:	b21b      	sxth	r3, r3
 8000f92:	1ac3      	subs	r3, r0, r3
 8000f94:	ee07 3a90 	vmov	s15, r3
 8000f98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f9c:	49af      	ldr	r1, [pc, #700]	@ (800125c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000f9e:	697a      	ldr	r2, [r7, #20]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	4413      	add	r3, r2
 8000fa6:	00db      	lsls	r3, r3, #3
 8000fa8:	440b      	add	r3, r1
 8000faa:	331c      	adds	r3, #28
 8000fac:	edc3 7a00 	vstr	s15, [r3]
			if (robomas[i].hensa >= 1000) robomas[i].hensa = 1000;
 8000fb0:	49aa      	ldr	r1, [pc, #680]	@ (800125c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000fb2:	697a      	ldr	r2, [r7, #20]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	4413      	add	r3, r2
 8000fba:	00db      	lsls	r3, r3, #3
 8000fbc:	440b      	add	r3, r1
 8000fbe:	331c      	adds	r3, #28
 8000fc0:	edd3 7a00 	vldr	s15, [r3]
 8000fc4:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 8001260 <HAL_TIM_PeriodElapsedCallback+0x310>
 8000fc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fd0:	db0a      	blt.n	8000fe8 <HAL_TIM_PeriodElapsedCallback+0x98>
 8000fd2:	49a2      	ldr	r1, [pc, #648]	@ (800125c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000fd4:	697a      	ldr	r2, [r7, #20]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	4413      	add	r3, r2
 8000fdc:	00db      	lsls	r3, r3, #3
 8000fde:	440b      	add	r3, r1
 8000fe0:	331c      	adds	r3, #28
 8000fe2:	4aa0      	ldr	r2, [pc, #640]	@ (8001264 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	e01a      	b.n	800101e <HAL_TIM_PeriodElapsedCallback+0xce>
			else if (robomas[i].hensa <= -1000) robomas[i].hensa = -1000;
 8000fe8:	499c      	ldr	r1, [pc, #624]	@ (800125c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000fea:	697a      	ldr	r2, [r7, #20]
 8000fec:	4613      	mov	r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	4413      	add	r3, r2
 8000ff2:	00db      	lsls	r3, r3, #3
 8000ff4:	440b      	add	r3, r1
 8000ff6:	331c      	adds	r3, #28
 8000ff8:	edd3 7a00 	vldr	s15, [r3]
 8000ffc:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8001268 <HAL_TIM_PeriodElapsedCallback+0x318>
 8001000:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001008:	d809      	bhi.n	800101e <HAL_TIM_PeriodElapsedCallback+0xce>
 800100a:	4994      	ldr	r1, [pc, #592]	@ (800125c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800100c:	697a      	ldr	r2, [r7, #20]
 800100e:	4613      	mov	r3, r2
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	4413      	add	r3, r2
 8001014:	00db      	lsls	r3, r3, #3
 8001016:	440b      	add	r3, r1
 8001018:	331c      	adds	r3, #28
 800101a:	4a94      	ldr	r2, [pc, #592]	@ (800126c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 800101c:	601a      	str	r2, [r3, #0]
			float d = (robomas[i].actVel - robomas[i].p_actVel) / 0.001;
 800101e:	498f      	ldr	r1, [pc, #572]	@ (800125c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8001020:	697a      	ldr	r2, [r7, #20]
 8001022:	4613      	mov	r3, r2
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	4413      	add	r3, r2
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	440b      	add	r3, r1
 800102c:	3306      	adds	r3, #6
 800102e:	881b      	ldrh	r3, [r3, #0]
 8001030:	b21b      	sxth	r3, r3
 8001032:	4618      	mov	r0, r3
 8001034:	4989      	ldr	r1, [pc, #548]	@ (800125c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8001036:	697a      	ldr	r2, [r7, #20]
 8001038:	4613      	mov	r3, r2
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	4413      	add	r3, r2
 800103e:	00db      	lsls	r3, r3, #3
 8001040:	440b      	add	r3, r1
 8001042:	3308      	adds	r3, #8
 8001044:	881b      	ldrh	r3, [r3, #0]
 8001046:	b21b      	sxth	r3, r3
 8001048:	1ac3      	subs	r3, r0, r3
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff fa8a 	bl	8000564 <__aeabi_i2d>
 8001050:	a37d      	add	r3, pc, #500	@ (adr r3, 8001248 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001056:	f7ff fc19 	bl	800088c <__aeabi_ddiv>
 800105a:	4602      	mov	r2, r0
 800105c:	460b      	mov	r3, r1
 800105e:	4610      	mov	r0, r2
 8001060:	4619      	mov	r1, r3
 8001062:	f7ff fdab 	bl	8000bbc <__aeabi_d2f>
 8001066:	4603      	mov	r3, r0
 8001068:	613b      	str	r3, [r7, #16]
			robomas[i].ind += robomas[i].hensa*0.1;
 800106a:	497c      	ldr	r1, [pc, #496]	@ (800125c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800106c:	697a      	ldr	r2, [r7, #20]
 800106e:	4613      	mov	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4413      	add	r3, r2
 8001074:	00db      	lsls	r3, r3, #3
 8001076:	440b      	add	r3, r1
 8001078:	3320      	adds	r3, #32
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fa83 	bl	8000588 <__aeabi_f2d>
 8001082:	4604      	mov	r4, r0
 8001084:	460d      	mov	r5, r1
 8001086:	4975      	ldr	r1, [pc, #468]	@ (800125c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8001088:	697a      	ldr	r2, [r7, #20]
 800108a:	4613      	mov	r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	4413      	add	r3, r2
 8001090:	00db      	lsls	r3, r3, #3
 8001092:	440b      	add	r3, r1
 8001094:	331c      	adds	r3, #28
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff fa75 	bl	8000588 <__aeabi_f2d>
 800109e:	a36c      	add	r3, pc, #432	@ (adr r3, 8001250 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80010a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a4:	f7ff fac8 	bl	8000638 <__aeabi_dmul>
 80010a8:	4602      	mov	r2, r0
 80010aa:	460b      	mov	r3, r1
 80010ac:	4620      	mov	r0, r4
 80010ae:	4629      	mov	r1, r5
 80010b0:	f7ff f90c 	bl	80002cc <__adddf3>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	4610      	mov	r0, r2
 80010ba:	4619      	mov	r1, r3
 80010bc:	f7ff fd7e 	bl	8000bbc <__aeabi_d2f>
 80010c0:	4601      	mov	r1, r0
 80010c2:	4866      	ldr	r0, [pc, #408]	@ (800125c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80010c4:	697a      	ldr	r2, [r7, #20]
 80010c6:	4613      	mov	r3, r2
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	4413      	add	r3, r2
 80010cc:	00db      	lsls	r3, r3, #3
 80010ce:	4403      	add	r3, r0
 80010d0:	3320      	adds	r3, #32
 80010d2:	6019      	str	r1, [r3, #0]
			if (d >= 30000) d = 30000;
 80010d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80010d8:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8001270 <HAL_TIM_PeriodElapsedCallback+0x320>
 80010dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e4:	db02      	blt.n	80010ec <HAL_TIM_PeriodElapsedCallback+0x19c>
 80010e6:	4b63      	ldr	r3, [pc, #396]	@ (8001274 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80010e8:	613b      	str	r3, [r7, #16]
 80010ea:	e00a      	b.n	8001102 <HAL_TIM_PeriodElapsedCallback+0x1b2>
			else if (d <= -30000) d = -30000;
 80010ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80010f0:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 8001278 <HAL_TIM_PeriodElapsedCallback+0x328>
 80010f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010fc:	d801      	bhi.n	8001102 <HAL_TIM_PeriodElapsedCallback+0x1b2>
 80010fe:	4b5f      	ldr	r3, [pc, #380]	@ (800127c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8001100:	613b      	str	r3, [r7, #16]
			if (robomas[i].ind >= 10000) robomas[i].ind = 10000;
 8001102:	4956      	ldr	r1, [pc, #344]	@ (800125c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8001104:	697a      	ldr	r2, [r7, #20]
 8001106:	4613      	mov	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	00db      	lsls	r3, r3, #3
 800110e:	440b      	add	r3, r1
 8001110:	3320      	adds	r3, #32
 8001112:	edd3 7a00 	vldr	s15, [r3]
 8001116:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8001280 <HAL_TIM_PeriodElapsedCallback+0x330>
 800111a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800111e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001122:	db0a      	blt.n	800113a <HAL_TIM_PeriodElapsedCallback+0x1ea>
 8001124:	494d      	ldr	r1, [pc, #308]	@ (800125c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8001126:	697a      	ldr	r2, [r7, #20]
 8001128:	4613      	mov	r3, r2
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	4413      	add	r3, r2
 800112e:	00db      	lsls	r3, r3, #3
 8001130:	440b      	add	r3, r1
 8001132:	3320      	adds	r3, #32
 8001134:	4a53      	ldr	r2, [pc, #332]	@ (8001284 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	e01a      	b.n	8001170 <HAL_TIM_PeriodElapsedCallback+0x220>
			else if (robomas[i].ind <= -10000) robomas[i].ind = -10000;
 800113a:	4948      	ldr	r1, [pc, #288]	@ (800125c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800113c:	697a      	ldr	r2, [r7, #20]
 800113e:	4613      	mov	r3, r2
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	4413      	add	r3, r2
 8001144:	00db      	lsls	r3, r3, #3
 8001146:	440b      	add	r3, r1
 8001148:	3320      	adds	r3, #32
 800114a:	edd3 7a00 	vldr	s15, [r3]
 800114e:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8001288 <HAL_TIM_PeriodElapsedCallback+0x338>
 8001152:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800115a:	d809      	bhi.n	8001170 <HAL_TIM_PeriodElapsedCallback+0x220>
 800115c:	493f      	ldr	r1, [pc, #252]	@ (800125c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800115e:	697a      	ldr	r2, [r7, #20]
 8001160:	4613      	mov	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	4413      	add	r3, r2
 8001166:	00db      	lsls	r3, r3, #3
 8001168:	440b      	add	r3, r1
 800116a:	3320      	adds	r3, #32
 800116c:	4a47      	ldr	r2, [pc, #284]	@ (800128c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800116e:	601a      	str	r2, [r3, #0]


			float t = k_p*robomas[i].hensa;
 8001170:	493a      	ldr	r1, [pc, #232]	@ (800125c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8001172:	697a      	ldr	r2, [r7, #20]
 8001174:	4613      	mov	r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	4413      	add	r3, r2
 800117a:	00db      	lsls	r3, r3, #3
 800117c:	440b      	add	r3, r1
 800117e:	331c      	adds	r3, #28
 8001180:	ed93 7a00 	vldr	s14, [r3]
 8001184:	4b42      	ldr	r3, [pc, #264]	@ (8001290 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001186:	edd3 7a00 	vldr	s15, [r3]
 800118a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800118e:	edc7 7a03 	vstr	s15, [r7, #12]
			if (t>=10000) t = 10000;
 8001192:	edd7 7a03 	vldr	s15, [r7, #12]
 8001196:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8001280 <HAL_TIM_PeriodElapsedCallback+0x330>
 800119a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800119e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a2:	db02      	blt.n	80011aa <HAL_TIM_PeriodElapsedCallback+0x25a>
 80011a4:	4b37      	ldr	r3, [pc, #220]	@ (8001284 <HAL_TIM_PeriodElapsedCallback+0x334>)
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	e00a      	b.n	80011c0 <HAL_TIM_PeriodElapsedCallback+0x270>
			else if (t<=-10000) t = -10000;
 80011aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80011ae:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8001288 <HAL_TIM_PeriodElapsedCallback+0x338>
 80011b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ba:	d801      	bhi.n	80011c0 <HAL_TIM_PeriodElapsedCallback+0x270>
 80011bc:	4b33      	ldr	r3, [pc, #204]	@ (800128c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80011be:	60fb      	str	r3, [r7, #12]
			robomas[i].cu = (int16_t)(t+k_i*robomas[i].ind+k_d*d);
 80011c0:	4926      	ldr	r1, [pc, #152]	@ (800125c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80011c2:	697a      	ldr	r2, [r7, #20]
 80011c4:	4613      	mov	r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	4413      	add	r3, r2
 80011ca:	00db      	lsls	r3, r3, #3
 80011cc:	440b      	add	r3, r1
 80011ce:	3320      	adds	r3, #32
 80011d0:	ed93 7a00 	vldr	s14, [r3]
 80011d4:	4b2f      	ldr	r3, [pc, #188]	@ (8001294 <HAL_TIM_PeriodElapsedCallback+0x344>)
 80011d6:	edd3 7a00 	vldr	s15, [r3]
 80011da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011de:	edd7 7a03 	vldr	s15, [r7, #12]
 80011e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011e6:	4b2c      	ldr	r3, [pc, #176]	@ (8001298 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80011e8:	edd3 6a00 	vldr	s13, [r3]
 80011ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80011f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011fc:	ee17 3a90 	vmov	r3, s15
 8001200:	b218      	sxth	r0, r3
 8001202:	4916      	ldr	r1, [pc, #88]	@ (800125c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8001204:	697a      	ldr	r2, [r7, #20]
 8001206:	4613      	mov	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	4413      	add	r3, r2
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	440b      	add	r3, r1
 8001210:	330a      	adds	r3, #10
 8001212:	4602      	mov	r2, r0
 8001214:	801a      	strh	r2, [r3, #0]
			if (robomas[i].cu <= -10000) robomas[i].cu = -10000;
 8001216:	4911      	ldr	r1, [pc, #68]	@ (800125c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8001218:	697a      	ldr	r2, [r7, #20]
 800121a:	4613      	mov	r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	4413      	add	r3, r2
 8001220:	00db      	lsls	r3, r3, #3
 8001222:	440b      	add	r3, r1
 8001224:	330a      	adds	r3, #10
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	b21b      	sxth	r3, r3
 800122a:	4a1c      	ldr	r2, [pc, #112]	@ (800129c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800122c:	4293      	cmp	r3, r2
 800122e:	da37      	bge.n	80012a0 <HAL_TIM_PeriodElapsedCallback+0x350>
 8001230:	490a      	ldr	r1, [pc, #40]	@ (800125c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8001232:	697a      	ldr	r2, [r7, #20]
 8001234:	4613      	mov	r3, r2
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	4413      	add	r3, r2
 800123a:	00db      	lsls	r3, r3, #3
 800123c:	440b      	add	r3, r1
 800123e:	330a      	adds	r3, #10
 8001240:	f64d 02f0 	movw	r2, #55536	@ 0xd8f0
 8001244:	801a      	strh	r2, [r3, #0]
 8001246:	e044      	b.n	80012d2 <HAL_TIM_PeriodElapsedCallback+0x382>
 8001248:	d2f1a9fc 	.word	0xd2f1a9fc
 800124c:	3f50624d 	.word	0x3f50624d
 8001250:	9999999a 	.word	0x9999999a
 8001254:	3fb99999 	.word	0x3fb99999
 8001258:	200001f8 	.word	0x200001f8
 800125c:	20000000 	.word	0x20000000
 8001260:	447a0000 	.word	0x447a0000
 8001264:	447a0000 	.word	0x447a0000
 8001268:	c47a0000 	.word	0xc47a0000
 800126c:	c47a0000 	.word	0xc47a0000
 8001270:	46ea6000 	.word	0x46ea6000
 8001274:	46ea6000 	.word	0x46ea6000
 8001278:	c6ea6000 	.word	0xc6ea6000
 800127c:	c6ea6000 	.word	0xc6ea6000
 8001280:	461c4000 	.word	0x461c4000
 8001284:	461c4000 	.word	0x461c4000
 8001288:	c61c4000 	.word	0xc61c4000
 800128c:	c61c4000 	.word	0xc61c4000
 8001290:	200000a0 	.word	0x200000a0
 8001294:	200000a4 	.word	0x200000a4
 8001298:	200000a8 	.word	0x200000a8
 800129c:	ffffd8f1 	.word	0xffffd8f1
			else if (robomas[i].cu >= 10000) robomas[i].cu = 10000;
 80012a0:	4932      	ldr	r1, [pc, #200]	@ (800136c <HAL_TIM_PeriodElapsedCallback+0x41c>)
 80012a2:	697a      	ldr	r2, [r7, #20]
 80012a4:	4613      	mov	r3, r2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	4413      	add	r3, r2
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	440b      	add	r3, r1
 80012ae:	330a      	adds	r3, #10
 80012b0:	881b      	ldrh	r3, [r3, #0]
 80012b2:	b21b      	sxth	r3, r3
 80012b4:	f242 720f 	movw	r2, #9999	@ 0x270f
 80012b8:	4293      	cmp	r3, r2
 80012ba:	dd0a      	ble.n	80012d2 <HAL_TIM_PeriodElapsedCallback+0x382>
 80012bc:	492b      	ldr	r1, [pc, #172]	@ (800136c <HAL_TIM_PeriodElapsedCallback+0x41c>)
 80012be:	697a      	ldr	r2, [r7, #20]
 80012c0:	4613      	mov	r3, r2
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	4413      	add	r3, r2
 80012c6:	00db      	lsls	r3, r3, #3
 80012c8:	440b      	add	r3, r1
 80012ca:	330a      	adds	r3, #10
 80012cc:	f242 7210 	movw	r2, #10000	@ 0x2710
 80012d0:	801a      	strh	r2, [r3, #0]


			TxData_motor[i*2] = (robomas[i].cu) >> 8;
 80012d2:	4926      	ldr	r1, [pc, #152]	@ (800136c <HAL_TIM_PeriodElapsedCallback+0x41c>)
 80012d4:	697a      	ldr	r2, [r7, #20]
 80012d6:	4613      	mov	r3, r2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	4413      	add	r3, r2
 80012dc:	00db      	lsls	r3, r3, #3
 80012de:	440b      	add	r3, r1
 80012e0:	330a      	adds	r3, #10
 80012e2:	881b      	ldrh	r3, [r3, #0]
 80012e4:	b21b      	sxth	r3, r3
 80012e6:	121b      	asrs	r3, r3, #8
 80012e8:	b21a      	sxth	r2, r3
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	b2d1      	uxtb	r1, r2
 80012f0:	4a1f      	ldr	r2, [pc, #124]	@ (8001370 <HAL_TIM_PeriodElapsedCallback+0x420>)
 80012f2:	54d1      	strb	r1, [r2, r3]
			TxData_motor[i*2+1] = (uint8_t)((robomas[i].cu) & 0xff);
 80012f4:	491d      	ldr	r1, [pc, #116]	@ (800136c <HAL_TIM_PeriodElapsedCallback+0x41c>)
 80012f6:	697a      	ldr	r2, [r7, #20]
 80012f8:	4613      	mov	r3, r2
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	4413      	add	r3, r2
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	440b      	add	r3, r1
 8001302:	330a      	adds	r3, #10
 8001304:	881b      	ldrh	r3, [r3, #0]
 8001306:	b21a      	sxth	r2, r3
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	3301      	adds	r3, #1
 800130e:	b2d1      	uxtb	r1, r2
 8001310:	4a17      	ldr	r2, [pc, #92]	@ (8001370 <HAL_TIM_PeriodElapsedCallback+0x420>)
 8001312:	54d1      	strb	r1, [r2, r3]
			robomas[i].p_actVel = robomas[i].actVel;
 8001314:	4915      	ldr	r1, [pc, #84]	@ (800136c <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8001316:	697a      	ldr	r2, [r7, #20]
 8001318:	4613      	mov	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4413      	add	r3, r2
 800131e:	00db      	lsls	r3, r3, #3
 8001320:	440b      	add	r3, r1
 8001322:	3306      	adds	r3, #6
 8001324:	881b      	ldrh	r3, [r3, #0]
 8001326:	b218      	sxth	r0, r3
 8001328:	4910      	ldr	r1, [pc, #64]	@ (800136c <HAL_TIM_PeriodElapsedCallback+0x41c>)
 800132a:	697a      	ldr	r2, [r7, #20]
 800132c:	4613      	mov	r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	4413      	add	r3, r2
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	440b      	add	r3, r1
 8001336:	3308      	adds	r3, #8
 8001338:	4602      	mov	r2, r0
 800133a:	801a      	strh	r2, [r3, #0]
		for (int i=0; i<=3; i++){
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	3301      	adds	r3, #1
 8001340:	617b      	str	r3, [r7, #20]
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	2b03      	cmp	r3, #3
 8001346:	f77f ae0f 	ble.w	8000f68 <HAL_TIM_PeriodElapsedCallback+0x18>
		}
		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan3, &TxHeader_motor, TxData_motor) != HAL_OK){
 800134a:	4a09      	ldr	r2, [pc, #36]	@ (8001370 <HAL_TIM_PeriodElapsedCallback+0x420>)
 800134c:	4909      	ldr	r1, [pc, #36]	@ (8001374 <HAL_TIM_PeriodElapsedCallback+0x424>)
 800134e:	480a      	ldr	r0, [pc, #40]	@ (8001378 <HAL_TIM_PeriodElapsedCallback+0x428>)
 8001350:	f001 fe1d 	bl	8002f8e <HAL_FDCAN_AddMessageToTxFifoQ>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d004      	beq.n	8001364 <HAL_TIM_PeriodElapsedCallback+0x414>
			printf("addmassage is error\r\n");
 800135a:	4808      	ldr	r0, [pc, #32]	@ (800137c <HAL_TIM_PeriodElapsedCallback+0x42c>)
 800135c:	f005 f87e 	bl	800645c <puts>
			Error_Handler();
 8001360:	f000 ffbc 	bl	80022dc <Error_Handler>
		}
	}
}
 8001364:	bf00      	nop
 8001366:	3718      	adds	r7, #24
 8001368:	46bd      	mov	sp, r7
 800136a:	bdb0      	pop	{r4, r5, r7, pc}
 800136c:	20000000 	.word	0x20000000
 8001370:	20000378 	.word	0x20000378
 8001374:	20000324 	.word	0x20000324
 8001378:	20000194 	.word	0x20000194
 800137c:	080083d0 	.word	0x080083d0

08001380 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
 8001380:	b590      	push	{r4, r7, lr}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
	if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	2b00      	cmp	r3, #0
 8001392:	d05e      	beq.n	8001452 <HAL_FDCAN_RxFifo0Callback+0xd2>

	        /* Retrieve Rx messages from RX FIFO0 */
		if (HAL_FDCAN_GetRxMessage(&hfdcan3, FDCAN_RX_FIFO0, &RxHeader_motor, RxData_motor) != HAL_OK) {
 8001394:	4b31      	ldr	r3, [pc, #196]	@ (800145c <HAL_FDCAN_RxFifo0Callback+0xdc>)
 8001396:	4a32      	ldr	r2, [pc, #200]	@ (8001460 <HAL_FDCAN_RxFifo0Callback+0xe0>)
 8001398:	2140      	movs	r1, #64	@ 0x40
 800139a:	4832      	ldr	r0, [pc, #200]	@ (8001464 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 800139c:	f001 fe3c 	bl	8003018 <HAL_FDCAN_GetRxMessage>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d004      	beq.n	80013b0 <HAL_FDCAN_RxFifo0Callback+0x30>
			printf("fdcan_getrxmessage_motor is error\r\n");
 80013a6:	4830      	ldr	r0, [pc, #192]	@ (8001468 <HAL_FDCAN_RxFifo0Callback+0xe8>)
 80013a8:	f005 f858 	bl	800645c <puts>
			Error_Handler();
 80013ac:	f000 ff96 	bl	80022dc <Error_Handler>
		}
		for (int i=0; i<=3;i++){
 80013b0:	2300      	movs	r3, #0
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	e04a      	b.n	800144c <HAL_FDCAN_RxFifo0Callback+0xcc>
			if (RxHeader_motor.Identifier == (robomas[i].CANID)) {
 80013b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001460 <HAL_FDCAN_RxFifo0Callback+0xe0>)
 80013b8:	6819      	ldr	r1, [r3, #0]
 80013ba:	482c      	ldr	r0, [pc, #176]	@ (800146c <HAL_FDCAN_RxFifo0Callback+0xec>)
 80013bc:	68fa      	ldr	r2, [r7, #12]
 80013be:	4613      	mov	r3, r2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	4413      	add	r3, r2
 80013c4:	00db      	lsls	r3, r3, #3
 80013c6:	4403      	add	r3, r0
 80013c8:	881b      	ldrh	r3, [r3, #0]
 80013ca:	4299      	cmp	r1, r3
 80013cc:	d13b      	bne.n	8001446 <HAL_FDCAN_RxFifo0Callback+0xc6>
				robomas[i].angle = (int16_t)((RxData_motor[0] << 8) | RxData_motor[1]);
 80013ce:	4b23      	ldr	r3, [pc, #140]	@ (800145c <HAL_FDCAN_RxFifo0Callback+0xdc>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	021b      	lsls	r3, r3, #8
 80013d4:	b21a      	sxth	r2, r3
 80013d6:	4b21      	ldr	r3, [pc, #132]	@ (800145c <HAL_FDCAN_RxFifo0Callback+0xdc>)
 80013d8:	785b      	ldrb	r3, [r3, #1]
 80013da:	b21b      	sxth	r3, r3
 80013dc:	4313      	orrs	r3, r2
 80013de:	b21b      	sxth	r3, r3
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff f8bf 	bl	8000564 <__aeabi_i2d>
 80013e6:	4c21      	ldr	r4, [pc, #132]	@ (800146c <HAL_FDCAN_RxFifo0Callback+0xec>)
 80013e8:	68fa      	ldr	r2, [r7, #12]
 80013ea:	4613      	mov	r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	4413      	add	r3, r2
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	4423      	add	r3, r4
 80013f4:	3310      	adds	r3, #16
 80013f6:	e9c3 0100 	strd	r0, r1, [r3]
				robomas[i].actVel = (int16_t)((RxData_motor[2] << 8) | RxData_motor[3]);
 80013fa:	4b18      	ldr	r3, [pc, #96]	@ (800145c <HAL_FDCAN_RxFifo0Callback+0xdc>)
 80013fc:	789b      	ldrb	r3, [r3, #2]
 80013fe:	021b      	lsls	r3, r3, #8
 8001400:	b21a      	sxth	r2, r3
 8001402:	4b16      	ldr	r3, [pc, #88]	@ (800145c <HAL_FDCAN_RxFifo0Callback+0xdc>)
 8001404:	78db      	ldrb	r3, [r3, #3]
 8001406:	b21b      	sxth	r3, r3
 8001408:	4313      	orrs	r3, r2
 800140a:	b218      	sxth	r0, r3
 800140c:	4917      	ldr	r1, [pc, #92]	@ (800146c <HAL_FDCAN_RxFifo0Callback+0xec>)
 800140e:	68fa      	ldr	r2, [r7, #12]
 8001410:	4613      	mov	r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	4413      	add	r3, r2
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	440b      	add	r3, r1
 800141a:	3306      	adds	r3, #6
 800141c:	4602      	mov	r2, r0
 800141e:	801a      	strh	r2, [r3, #0]
				robomas[i].actCurrent = (int16_t)((RxData_motor[4] << 8) | RxData_motor[5]);
 8001420:	4b0e      	ldr	r3, [pc, #56]	@ (800145c <HAL_FDCAN_RxFifo0Callback+0xdc>)
 8001422:	791b      	ldrb	r3, [r3, #4]
 8001424:	021b      	lsls	r3, r3, #8
 8001426:	b21a      	sxth	r2, r3
 8001428:	4b0c      	ldr	r3, [pc, #48]	@ (800145c <HAL_FDCAN_RxFifo0Callback+0xdc>)
 800142a:	795b      	ldrb	r3, [r3, #5]
 800142c:	b21b      	sxth	r3, r3
 800142e:	4313      	orrs	r3, r2
 8001430:	b218      	sxth	r0, r3
 8001432:	490e      	ldr	r1, [pc, #56]	@ (800146c <HAL_FDCAN_RxFifo0Callback+0xec>)
 8001434:	68fa      	ldr	r2, [r7, #12]
 8001436:	4613      	mov	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	4413      	add	r3, r2
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	440b      	add	r3, r1
 8001440:	3318      	adds	r3, #24
 8001442:	4602      	mov	r2, r0
 8001444:	801a      	strh	r2, [r3, #0]
		for (int i=0; i<=3;i++){
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	3301      	adds	r3, #1
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2b03      	cmp	r3, #3
 8001450:	ddb1      	ble.n	80013b6 <HAL_FDCAN_RxFifo0Callback+0x36>
			}
		}

	}

}
 8001452:	bf00      	nop
 8001454:	3714      	adds	r7, #20
 8001456:	46bd      	mov	sp, r7
 8001458:	bd90      	pop	{r4, r7, pc}
 800145a:	bf00      	nop
 800145c:	20000380 	.word	0x20000380
 8001460:	20000348 	.word	0x20000348
 8001464:	20000194 	.word	0x20000194
 8001468:	080083e8 	.word	0x080083e8
 800146c:	20000000 	.word	0x20000000

08001470 <HAL_FDCAN_RxFifo1Callback>:

void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs){
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
	if ((RxFifo1ITs & FDCAN_IT_RX_FIFO1_NEW_MESSAGE) != RESET) {
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	f003 0308 	and.w	r3, r3, #8
 8001480:	2b00      	cmp	r3, #0
 8001482:	d04a      	beq.n	800151a <HAL_FDCAN_RxFifo1Callback+0xaa>

	        /* Retrieve Rx messages from RX FIFO0 */

		if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO1, &RxHeader, RxData) != HAL_OK) {
 8001484:	4b27      	ldr	r3, [pc, #156]	@ (8001524 <HAL_FDCAN_RxFifo1Callback+0xb4>)
 8001486:	4a28      	ldr	r2, [pc, #160]	@ (8001528 <HAL_FDCAN_RxFifo1Callback+0xb8>)
 8001488:	2141      	movs	r1, #65	@ 0x41
 800148a:	4828      	ldr	r0, [pc, #160]	@ (800152c <HAL_FDCAN_RxFifo1Callback+0xbc>)
 800148c:	f001 fdc4 	bl	8003018 <HAL_FDCAN_GetRxMessage>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d004      	beq.n	80014a0 <HAL_FDCAN_RxFifo1Callback+0x30>
			printf("fdcan_getrxmessage is error\r\n");
 8001496:	4826      	ldr	r0, [pc, #152]	@ (8001530 <HAL_FDCAN_RxFifo1Callback+0xc0>)
 8001498:	f004 ffe0 	bl	800645c <puts>
			Error_Handler();
 800149c:	f000 ff1e 	bl	80022dc <Error_Handler>
		}

		if (RxHeader.Identifier == 0x300) {
 80014a0:	4b21      	ldr	r3, [pc, #132]	@ (8001528 <HAL_FDCAN_RxFifo1Callback+0xb8>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80014a8:	d127      	bne.n	80014fa <HAL_FDCAN_RxFifo1Callback+0x8a>
			vel_x = (int8_t)RxData[0];
 80014aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001524 <HAL_FDCAN_RxFifo1Callback+0xb4>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	b25b      	sxtb	r3, r3
 80014b0:	461a      	mov	r2, r3
 80014b2:	4b20      	ldr	r3, [pc, #128]	@ (8001534 <HAL_FDCAN_RxFifo1Callback+0xc4>)
 80014b4:	801a      	strh	r2, [r3, #0]
			vel_y = (int8_t)RxData[1];
 80014b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001524 <HAL_FDCAN_RxFifo1Callback+0xb4>)
 80014b8:	785b      	ldrb	r3, [r3, #1]
 80014ba:	b25b      	sxtb	r3, r3
 80014bc:	461a      	mov	r2, r3
 80014be:	4b1e      	ldr	r3, [pc, #120]	@ (8001538 <HAL_FDCAN_RxFifo1Callback+0xc8>)
 80014c0:	801a      	strh	r2, [r3, #0]
			omega_c = (uint8_t)RxData[5] - (uint8_t)RxData[4];
 80014c2:	4b18      	ldr	r3, [pc, #96]	@ (8001524 <HAL_FDCAN_RxFifo1Callback+0xb4>)
 80014c4:	795b      	ldrb	r3, [r3, #5]
 80014c6:	461a      	mov	r2, r3
 80014c8:	4b16      	ldr	r3, [pc, #88]	@ (8001524 <HAL_FDCAN_RxFifo1Callback+0xb4>)
 80014ca:	791b      	ldrb	r3, [r3, #4]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	b21a      	sxth	r2, r3
 80014d2:	4b1a      	ldr	r3, [pc, #104]	@ (800153c <HAL_FDCAN_RxFifo1Callback+0xcc>)
 80014d4:	801a      	strh	r2, [r3, #0]
			if ((RxData[7] & 0x2) == 0x2){
 80014d6:	4b13      	ldr	r3, [pc, #76]	@ (8001524 <HAL_FDCAN_RxFifo1Callback+0xb4>)
 80014d8:	79db      	ldrb	r3, [r3, #7]
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d002      	beq.n	80014e8 <HAL_FDCAN_RxFifo1Callback+0x78>
				is_R1 = true;
 80014e2:	4b17      	ldr	r3, [pc, #92]	@ (8001540 <HAL_FDCAN_RxFifo1Callback+0xd0>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	701a      	strb	r2, [r3, #0]
			}
			if ((RxData[7] & 0x1) == 0x1){
 80014e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001524 <HAL_FDCAN_RxFifo1Callback+0xb4>)
 80014ea:	79db      	ldrb	r3, [r3, #7]
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d002      	beq.n	80014fa <HAL_FDCAN_RxFifo1Callback+0x8a>
				is_L1 = true;
 80014f4:	4b13      	ldr	r3, [pc, #76]	@ (8001544 <HAL_FDCAN_RxFifo1Callback+0xd4>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	701a      	strb	r2, [r3, #0]
			}
		}
		if (RxHeader.Identifier == 0x301) {
 80014fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001528 <HAL_FDCAN_RxFifo1Callback+0xb8>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f240 3201 	movw	r2, #769	@ 0x301
 8001502:	4293      	cmp	r3, r2
 8001504:	d109      	bne.n	800151a <HAL_FDCAN_RxFifo1Callback+0xaa>
			if ((int8_t)RxData[1] == 1) {
 8001506:	4b07      	ldr	r3, [pc, #28]	@ (8001524 <HAL_FDCAN_RxFifo1Callback+0xb4>)
 8001508:	785b      	ldrb	r3, [r3, #1]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d105      	bne.n	800151a <HAL_FDCAN_RxFifo1Callback+0xaa>
				vel_x = 0;
 800150e:	4b09      	ldr	r3, [pc, #36]	@ (8001534 <HAL_FDCAN_RxFifo1Callback+0xc4>)
 8001510:	2200      	movs	r2, #0
 8001512:	801a      	strh	r2, [r3, #0]
				vel_y = 0;
 8001514:	4b08      	ldr	r3, [pc, #32]	@ (8001538 <HAL_FDCAN_RxFifo1Callback+0xc8>)
 8001516:	2200      	movs	r2, #0
 8001518:	801a      	strh	r2, [r3, #0]
			}
		}

	}
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000370 	.word	0x20000370
 8001528:	200002fc 	.word	0x200002fc
 800152c:	20000130 	.word	0x20000130
 8001530:	0800840c 	.word	0x0800840c
 8001534:	20000388 	.word	0x20000388
 8001538:	2000038a 	.word	0x2000038a
 800153c:	2000038c 	.word	0x2000038c
 8001540:	2000039c 	.word	0x2000039c
 8001544:	2000039d 	.word	0x2000039d

08001548 <FDCAN_RxTxSettings>:

void FDCAN_RxTxSettings(void){
 8001548:	b580      	push	{r7, lr}
 800154a:	b088      	sub	sp, #32
 800154c:	af02      	add	r7, sp, #8
	FDCAN_FilterTypeDef FDCAN_Filter_settings;
	FDCAN_Filter_settings.IdType = FDCAN_STANDARD_ID;
 800154e:	2300      	movs	r3, #0
 8001550:	603b      	str	r3, [r7, #0]
	FDCAN_Filter_settings.FilterIndex = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	607b      	str	r3, [r7, #4]
	FDCAN_Filter_settings.FilterType = FDCAN_FILTER_RANGE;
 8001556:	2300      	movs	r3, #0
 8001558:	60bb      	str	r3, [r7, #8]
	FDCAN_Filter_settings.FilterConfig = FDCAN_FILTER_TO_RXFIFO1;
 800155a:	2302      	movs	r3, #2
 800155c:	60fb      	str	r3, [r7, #12]
	FDCAN_Filter_settings.FilterID1 = 0x200;
 800155e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001562:	613b      	str	r3, [r7, #16]
	FDCAN_Filter_settings.FilterID2 = 0x310;
 8001564:	f44f 7344 	mov.w	r3, #784	@ 0x310
 8001568:	617b      	str	r3, [r7, #20]

	TxHeader.Identifier = 0x000;
 800156a:	4b2b      	ldr	r3, [pc, #172]	@ (8001618 <FDCAN_RxTxSettings+0xd0>)
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8001570:	4b29      	ldr	r3, [pc, #164]	@ (8001618 <FDCAN_RxTxSettings+0xd0>)
 8001572:	2200      	movs	r2, #0
 8001574:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001576:	4b28      	ldr	r3, [pc, #160]	@ (8001618 <FDCAN_RxTxSettings+0xd0>)
 8001578:	2200      	movs	r2, #0
 800157a:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 800157c:	4b26      	ldr	r3, [pc, #152]	@ (8001618 <FDCAN_RxTxSettings+0xd0>)
 800157e:	2208      	movs	r2, #8
 8001580:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001582:	4b25      	ldr	r3, [pc, #148]	@ (8001618 <FDCAN_RxTxSettings+0xd0>)
 8001584:	2200      	movs	r2, #0
 8001586:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8001588:	4b23      	ldr	r3, [pc, #140]	@ (8001618 <FDCAN_RxTxSettings+0xd0>)
 800158a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800158e:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_FD_CAN;
 8001590:	4b21      	ldr	r3, [pc, #132]	@ (8001618 <FDCAN_RxTxSettings+0xd0>)
 8001592:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001596:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001598:	4b1f      	ldr	r3, [pc, #124]	@ (8001618 <FDCAN_RxTxSettings+0xd0>)
 800159a:	2200      	movs	r2, #0
 800159c:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker = 0;
 800159e:	4b1e      	ldr	r3, [pc, #120]	@ (8001618 <FDCAN_RxTxSettings+0xd0>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	621a      	str	r2, [r3, #32]


	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &FDCAN_Filter_settings) != HAL_OK){
 80015a4:	463b      	mov	r3, r7
 80015a6:	4619      	mov	r1, r3
 80015a8:	481c      	ldr	r0, [pc, #112]	@ (800161c <FDCAN_RxTxSettings+0xd4>)
 80015aa:	f001 fc3d 	bl	8002e28 <HAL_FDCAN_ConfigFilter>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d004      	beq.n	80015be <FDCAN_RxTxSettings+0x76>
		printf("fdcan_configfilter is error\r\n");
 80015b4:	481a      	ldr	r0, [pc, #104]	@ (8001620 <FDCAN_RxTxSettings+0xd8>)
 80015b6:	f004 ff51 	bl	800645c <puts>
		Error_Handler();
 80015ba:	f000 fe8f 	bl	80022dc <Error_Handler>
	}

	if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_FILTER_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK){
 80015be:	2300      	movs	r3, #0
 80015c0:	9300      	str	r3, [sp, #0]
 80015c2:	2300      	movs	r3, #0
 80015c4:	2203      	movs	r2, #3
 80015c6:	2102      	movs	r1, #2
 80015c8:	4814      	ldr	r0, [pc, #80]	@ (800161c <FDCAN_RxTxSettings+0xd4>)
 80015ca:	f001 fc87 	bl	8002edc <HAL_FDCAN_ConfigGlobalFilter>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d004      	beq.n	80015de <FDCAN_RxTxSettings+0x96>
		printf("fdcan_configglobalfilter is error\r\n");
 80015d4:	4813      	ldr	r0, [pc, #76]	@ (8001624 <FDCAN_RxTxSettings+0xdc>)
 80015d6:	f004 ff41 	bl	800645c <puts>
		Error_Handler();
 80015da:	f000 fe7f 	bl	80022dc <Error_Handler>
	}

	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 80015de:	480f      	ldr	r0, [pc, #60]	@ (800161c <FDCAN_RxTxSettings+0xd4>)
 80015e0:	f001 fcad 	bl	8002f3e <HAL_FDCAN_Start>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d004      	beq.n	80015f4 <FDCAN_RxTxSettings+0xac>
		printf("fdcan_start is error\r\n");
 80015ea:	480f      	ldr	r0, [pc, #60]	@ (8001628 <FDCAN_RxTxSettings+0xe0>)
 80015ec:	f004 ff36 	bl	800645c <puts>
		Error_Handler();
 80015f0:	f000 fe74 	bl	80022dc <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0) != HAL_OK){
 80015f4:	2200      	movs	r2, #0
 80015f6:	2108      	movs	r1, #8
 80015f8:	4808      	ldr	r0, [pc, #32]	@ (800161c <FDCAN_RxTxSettings+0xd4>)
 80015fa:	f001 fe15 	bl	8003228 <HAL_FDCAN_ActivateNotification>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d004      	beq.n	800160e <FDCAN_RxTxSettings+0xc6>
		printf("fdcan_activatenotification is error\r\n");
 8001604:	4809      	ldr	r0, [pc, #36]	@ (800162c <FDCAN_RxTxSettings+0xe4>)
 8001606:	f004 ff29 	bl	800645c <puts>
		Error_Handler();
 800160a:	f000 fe67 	bl	80022dc <Error_Handler>
	}
}
 800160e:	bf00      	nop
 8001610:	3718      	adds	r7, #24
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	200002d8 	.word	0x200002d8
 800161c:	20000130 	.word	0x20000130
 8001620:	0800842c 	.word	0x0800842c
 8001624:	0800844c 	.word	0x0800844c
 8001628:	08008470 	.word	0x08008470
 800162c:	08008488 	.word	0x08008488

08001630 <FDCAN_motor_RxTxSettings>:

void FDCAN_motor_RxTxSettings(void) {
 8001630:	b580      	push	{r7, lr}
 8001632:	b088      	sub	sp, #32
 8001634:	af02      	add	r7, sp, #8
	FDCAN_FilterTypeDef FDCAN_Filter_settings_motor;
	FDCAN_Filter_settings_motor.IdType = FDCAN_STANDARD_ID;
 8001636:	2300      	movs	r3, #0
 8001638:	603b      	str	r3, [r7, #0]
	FDCAN_Filter_settings_motor.FilterIndex = 0;
 800163a:	2300      	movs	r3, #0
 800163c:	607b      	str	r3, [r7, #4]
	FDCAN_Filter_settings_motor.FilterType = FDCAN_FILTER_RANGE;
 800163e:	2300      	movs	r3, #0
 8001640:	60bb      	str	r3, [r7, #8]
	FDCAN_Filter_settings_motor.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001642:	2301      	movs	r3, #1
 8001644:	60fb      	str	r3, [r7, #12]
	FDCAN_Filter_settings_motor.FilterID1 = 0x200;
 8001646:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800164a:	613b      	str	r3, [r7, #16]
	FDCAN_Filter_settings_motor.FilterID2 = 0x210;
 800164c:	f44f 7304 	mov.w	r3, #528	@ 0x210
 8001650:	617b      	str	r3, [r7, #20]

	TxHeader_motor.Identifier = 0x200;
 8001652:	4b2a      	ldr	r3, [pc, #168]	@ (80016fc <FDCAN_motor_RxTxSettings+0xcc>)
 8001654:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001658:	601a      	str	r2, [r3, #0]
	TxHeader_motor.IdType = FDCAN_STANDARD_ID;
 800165a:	4b28      	ldr	r3, [pc, #160]	@ (80016fc <FDCAN_motor_RxTxSettings+0xcc>)
 800165c:	2200      	movs	r2, #0
 800165e:	605a      	str	r2, [r3, #4]
	TxHeader_motor.TxFrameType = FDCAN_DATA_FRAME;
 8001660:	4b26      	ldr	r3, [pc, #152]	@ (80016fc <FDCAN_motor_RxTxSettings+0xcc>)
 8001662:	2200      	movs	r2, #0
 8001664:	609a      	str	r2, [r3, #8]
	TxHeader_motor.DataLength = FDCAN_DLC_BYTES_8;
 8001666:	4b25      	ldr	r3, [pc, #148]	@ (80016fc <FDCAN_motor_RxTxSettings+0xcc>)
 8001668:	2208      	movs	r2, #8
 800166a:	60da      	str	r2, [r3, #12]
	TxHeader_motor.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800166c:	4b23      	ldr	r3, [pc, #140]	@ (80016fc <FDCAN_motor_RxTxSettings+0xcc>)
 800166e:	2200      	movs	r2, #0
 8001670:	611a      	str	r2, [r3, #16]
	TxHeader_motor.BitRateSwitch = FDCAN_BRS_OFF;
 8001672:	4b22      	ldr	r3, [pc, #136]	@ (80016fc <FDCAN_motor_RxTxSettings+0xcc>)
 8001674:	2200      	movs	r2, #0
 8001676:	615a      	str	r2, [r3, #20]
	TxHeader_motor.FDFormat = FDCAN_CLASSIC_CAN;
 8001678:	4b20      	ldr	r3, [pc, #128]	@ (80016fc <FDCAN_motor_RxTxSettings+0xcc>)
 800167a:	2200      	movs	r2, #0
 800167c:	619a      	str	r2, [r3, #24]
	TxHeader_motor.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800167e:	4b1f      	ldr	r3, [pc, #124]	@ (80016fc <FDCAN_motor_RxTxSettings+0xcc>)
 8001680:	2200      	movs	r2, #0
 8001682:	61da      	str	r2, [r3, #28]
	TxHeader_motor.MessageMarker = 0;
 8001684:	4b1d      	ldr	r3, [pc, #116]	@ (80016fc <FDCAN_motor_RxTxSettings+0xcc>)
 8001686:	2200      	movs	r2, #0
 8001688:	621a      	str	r2, [r3, #32]

	if (HAL_FDCAN_ConfigFilter(&hfdcan3, &FDCAN_Filter_settings_motor) != HAL_OK){
 800168a:	463b      	mov	r3, r7
 800168c:	4619      	mov	r1, r3
 800168e:	481c      	ldr	r0, [pc, #112]	@ (8001700 <FDCAN_motor_RxTxSettings+0xd0>)
 8001690:	f001 fbca 	bl	8002e28 <HAL_FDCAN_ConfigFilter>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d004      	beq.n	80016a4 <FDCAN_motor_RxTxSettings+0x74>
		printf("fdcan_configfilter is error\r\n");
 800169a:	481a      	ldr	r0, [pc, #104]	@ (8001704 <FDCAN_motor_RxTxSettings+0xd4>)
 800169c:	f004 fede 	bl	800645c <puts>
		Error_Handler();
 80016a0:	f000 fe1c 	bl	80022dc <Error_Handler>
	}

	if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan3, FDCAN_REJECT, FDCAN_FILTER_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE)){
 80016a4:	2300      	movs	r3, #0
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	2300      	movs	r3, #0
 80016aa:	2203      	movs	r2, #3
 80016ac:	2102      	movs	r1, #2
 80016ae:	4814      	ldr	r0, [pc, #80]	@ (8001700 <FDCAN_motor_RxTxSettings+0xd0>)
 80016b0:	f001 fc14 	bl	8002edc <HAL_FDCAN_ConfigGlobalFilter>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d004      	beq.n	80016c4 <FDCAN_motor_RxTxSettings+0x94>
		printf("fdcan_configglobalfilter is error\r\n");
 80016ba:	4813      	ldr	r0, [pc, #76]	@ (8001708 <FDCAN_motor_RxTxSettings+0xd8>)
 80016bc:	f004 fece 	bl	800645c <puts>
		Error_Handler();
 80016c0:	f000 fe0c 	bl	80022dc <Error_Handler>
	}

	if (HAL_FDCAN_Start(&hfdcan3) != HAL_OK) {
 80016c4:	480e      	ldr	r0, [pc, #56]	@ (8001700 <FDCAN_motor_RxTxSettings+0xd0>)
 80016c6:	f001 fc3a 	bl	8002f3e <HAL_FDCAN_Start>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d004      	beq.n	80016da <FDCAN_motor_RxTxSettings+0xaa>
		printf("fdcan_start is error\r\n");
 80016d0:	480e      	ldr	r0, [pc, #56]	@ (800170c <FDCAN_motor_RxTxSettings+0xdc>)
 80016d2:	f004 fec3 	bl	800645c <puts>
		Error_Handler();
 80016d6:	f000 fe01 	bl	80022dc <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan3, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK){
 80016da:	2200      	movs	r2, #0
 80016dc:	2101      	movs	r1, #1
 80016de:	4808      	ldr	r0, [pc, #32]	@ (8001700 <FDCAN_motor_RxTxSettings+0xd0>)
 80016e0:	f001 fda2 	bl	8003228 <HAL_FDCAN_ActivateNotification>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d004      	beq.n	80016f4 <FDCAN_motor_RxTxSettings+0xc4>
		printf("fdcan_activatenotification is error\r\n");
 80016ea:	4809      	ldr	r0, [pc, #36]	@ (8001710 <FDCAN_motor_RxTxSettings+0xe0>)
 80016ec:	f004 feb6 	bl	800645c <puts>
		Error_Handler();
 80016f0:	f000 fdf4 	bl	80022dc <Error_Handler>
	}
}
 80016f4:	bf00      	nop
 80016f6:	3718      	adds	r7, #24
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20000324 	.word	0x20000324
 8001700:	20000194 	.word	0x20000194
 8001704:	0800842c 	.word	0x0800842c
 8001708:	0800844c 	.word	0x0800844c
 800170c:	08008470 	.word	0x08008470
 8001710:	08008488 	.word	0x08008488

08001714 <omni_calc>:

void omni_calc(float theta,float vx,float vy,float omega,float *w0,float *w1,float *w2,float *w3){
 8001714:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001718:	ed2d 8b02 	vpush	{d8}
 800171c:	b09c      	sub	sp, #112	@ 0x70
 800171e:	af00      	add	r7, sp, #0
 8001720:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 8001724:	edc7 0a08 	vstr	s1, [r7, #32]
 8001728:	ed87 1a07 	vstr	s2, [r7, #28]
 800172c:	edc7 1a06 	vstr	s3, [r7, #24]
 8001730:	6178      	str	r0, [r7, #20]
 8001732:	6139      	str	r1, [r7, #16]
 8001734:	60fa      	str	r2, [r7, #12]
 8001736:	60bb      	str	r3, [r7, #8]

	float v[3] = {vx, vy, omega};
 8001738:	6a3b      	ldr	r3, [r7, #32]
 800173a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	667b      	str	r3, [r7, #100]	@ 0x64
	float sint = sin(theta);
 8001744:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001746:	f7fe ff1f 	bl	8000588 <__aeabi_f2d>
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	ec43 2b10 	vmov	d0, r2, r3
 8001752:	f005 fe01 	bl	8007358 <sin>
 8001756:	ec53 2b10 	vmov	r2, r3, d0
 800175a:	4610      	mov	r0, r2
 800175c:	4619      	mov	r1, r3
 800175e:	f7ff fa2d 	bl	8000bbc <__aeabi_d2f>
 8001762:	4603      	mov	r3, r0
 8001764:	66fb      	str	r3, [r7, #108]	@ 0x6c
	float cost = cos(theta);
 8001766:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001768:	f7fe ff0e 	bl	8000588 <__aeabi_f2d>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	ec43 2b10 	vmov	d0, r2, r3
 8001774:	f005 fd9c 	bl	80072b0 <cos>
 8001778:	ec53 2b10 	vmov	r2, r3, d0
 800177c:	4610      	mov	r0, r2
 800177e:	4619      	mov	r1, r3
 8001780:	f7ff fa1c 	bl	8000bbc <__aeabi_d2f>
 8001784:	4603      	mov	r3, r0
 8001786:	66bb      	str	r3, [r7, #104]	@ 0x68

	float arr[4][3] =
	{{-cos(a0)*sint-sin(a0)*cost, cos(a0)*cost-sin(a0)*sint, R},
 8001788:	4bdd      	ldr	r3, [pc, #884]	@ (8001b00 <omni_calc+0x3ec>)
 800178a:	4618      	mov	r0, r3
 800178c:	f7fe fefc 	bl	8000588 <__aeabi_f2d>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	ec43 2b10 	vmov	d0, r2, r3
 8001798:	f005 fd8a 	bl	80072b0 <cos>
 800179c:	ec53 2b10 	vmov	r2, r3, d0
 80017a0:	4614      	mov	r4, r2
 80017a2:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80017a6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80017a8:	f7fe feee 	bl	8000588 <__aeabi_f2d>
 80017ac:	4602      	mov	r2, r0
 80017ae:	460b      	mov	r3, r1
 80017b0:	4620      	mov	r0, r4
 80017b2:	4629      	mov	r1, r5
 80017b4:	f7fe ff40 	bl	8000638 <__aeabi_dmul>
 80017b8:	4602      	mov	r2, r0
 80017ba:	460b      	mov	r3, r1
 80017bc:	4614      	mov	r4, r2
 80017be:	461d      	mov	r5, r3
 80017c0:	4bcf      	ldr	r3, [pc, #828]	@ (8001b00 <omni_calc+0x3ec>)
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7fe fee0 	bl	8000588 <__aeabi_f2d>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	ec43 2b10 	vmov	d0, r2, r3
 80017d0:	f005 fdc2 	bl	8007358 <sin>
 80017d4:	eeb0 8a40 	vmov.f32	s16, s0
 80017d8:	eef0 8a60 	vmov.f32	s17, s1
 80017dc:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80017de:	f7fe fed3 	bl	8000588 <__aeabi_f2d>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	ec51 0b18 	vmov	r0, r1, d8
 80017ea:	f7fe ff25 	bl	8000638 <__aeabi_dmul>
 80017ee:	4602      	mov	r2, r0
 80017f0:	460b      	mov	r3, r1
 80017f2:	4620      	mov	r0, r4
 80017f4:	4629      	mov	r1, r5
 80017f6:	f7fe fd67 	bl	80002c8 <__aeabi_dsub>
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	4610      	mov	r0, r2
 8001800:	4619      	mov	r1, r3
 8001802:	f7ff f9db 	bl	8000bbc <__aeabi_d2f>
 8001806:	4603      	mov	r3, r0
	float arr[4][3] =
 8001808:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{{-cos(a0)*sint-sin(a0)*cost, cos(a0)*cost-sin(a0)*sint, R},
 800180a:	4bbd      	ldr	r3, [pc, #756]	@ (8001b00 <omni_calc+0x3ec>)
 800180c:	4618      	mov	r0, r3
 800180e:	f7fe febb 	bl	8000588 <__aeabi_f2d>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	ec43 2b10 	vmov	d0, r2, r3
 800181a:	f005 fd49 	bl	80072b0 <cos>
 800181e:	ec55 4b10 	vmov	r4, r5, d0
 8001822:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8001824:	f7fe feb0 	bl	8000588 <__aeabi_f2d>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	4620      	mov	r0, r4
 800182e:	4629      	mov	r1, r5
 8001830:	f7fe ff02 	bl	8000638 <__aeabi_dmul>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	4614      	mov	r4, r2
 800183a:	461d      	mov	r5, r3
 800183c:	4bb0      	ldr	r3, [pc, #704]	@ (8001b00 <omni_calc+0x3ec>)
 800183e:	4618      	mov	r0, r3
 8001840:	f7fe fea2 	bl	8000588 <__aeabi_f2d>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	ec43 2b10 	vmov	d0, r2, r3
 800184c:	f005 fd84 	bl	8007358 <sin>
 8001850:	eeb0 8a40 	vmov.f32	s16, s0
 8001854:	eef0 8a60 	vmov.f32	s17, s1
 8001858:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800185a:	f7fe fe95 	bl	8000588 <__aeabi_f2d>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	ec51 0b18 	vmov	r0, r1, d8
 8001866:	f7fe fee7 	bl	8000638 <__aeabi_dmul>
 800186a:	4602      	mov	r2, r0
 800186c:	460b      	mov	r3, r1
 800186e:	4620      	mov	r0, r4
 8001870:	4629      	mov	r1, r5
 8001872:	f7fe fd29 	bl	80002c8 <__aeabi_dsub>
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	4610      	mov	r0, r2
 800187c:	4619      	mov	r1, r3
 800187e:	f7ff f99d 	bl	8000bbc <__aeabi_d2f>
 8001882:	4603      	mov	r3, r0
	float arr[4][3] =
 8001884:	633b      	str	r3, [r7, #48]	@ 0x30
 8001886:	4b9f      	ldr	r3, [pc, #636]	@ (8001b04 <omni_calc+0x3f0>)
 8001888:	637b      	str	r3, [r7, #52]	@ 0x34
	{-cos(a1)*sint-sin(a1)*cost, cos(a1)*cost-sin(a1)*sint, R},
 800188a:	4b9f      	ldr	r3, [pc, #636]	@ (8001b08 <omni_calc+0x3f4>)
 800188c:	4618      	mov	r0, r3
 800188e:	f7fe fe7b 	bl	8000588 <__aeabi_f2d>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	ec43 2b10 	vmov	d0, r2, r3
 800189a:	f005 fd09 	bl	80072b0 <cos>
 800189e:	ec53 2b10 	vmov	r2, r3, d0
 80018a2:	603a      	str	r2, [r7, #0]
 80018a4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80018a8:	607b      	str	r3, [r7, #4]
 80018aa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80018ac:	f7fe fe6c 	bl	8000588 <__aeabi_f2d>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018b8:	f7fe febe 	bl	8000638 <__aeabi_dmul>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4614      	mov	r4, r2
 80018c2:	461d      	mov	r5, r3
 80018c4:	4b90      	ldr	r3, [pc, #576]	@ (8001b08 <omni_calc+0x3f4>)
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7fe fe5e 	bl	8000588 <__aeabi_f2d>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	ec43 2b10 	vmov	d0, r2, r3
 80018d4:	f005 fd40 	bl	8007358 <sin>
 80018d8:	eeb0 8a40 	vmov.f32	s16, s0
 80018dc:	eef0 8a60 	vmov.f32	s17, s1
 80018e0:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80018e2:	f7fe fe51 	bl	8000588 <__aeabi_f2d>
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	ec51 0b18 	vmov	r0, r1, d8
 80018ee:	f7fe fea3 	bl	8000638 <__aeabi_dmul>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	4620      	mov	r0, r4
 80018f8:	4629      	mov	r1, r5
 80018fa:	f7fe fce5 	bl	80002c8 <__aeabi_dsub>
 80018fe:	4602      	mov	r2, r0
 8001900:	460b      	mov	r3, r1
 8001902:	4610      	mov	r0, r2
 8001904:	4619      	mov	r1, r3
 8001906:	f7ff f959 	bl	8000bbc <__aeabi_d2f>
 800190a:	4603      	mov	r3, r0
	float arr[4][3] =
 800190c:	63bb      	str	r3, [r7, #56]	@ 0x38
	{-cos(a1)*sint-sin(a1)*cost, cos(a1)*cost-sin(a1)*sint, R},
 800190e:	4b7e      	ldr	r3, [pc, #504]	@ (8001b08 <omni_calc+0x3f4>)
 8001910:	4618      	mov	r0, r3
 8001912:	f7fe fe39 	bl	8000588 <__aeabi_f2d>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	ec43 2b10 	vmov	d0, r2, r3
 800191e:	f005 fcc7 	bl	80072b0 <cos>
 8001922:	ec55 4b10 	vmov	r4, r5, d0
 8001926:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8001928:	f7fe fe2e 	bl	8000588 <__aeabi_f2d>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	4620      	mov	r0, r4
 8001932:	4629      	mov	r1, r5
 8001934:	f7fe fe80 	bl	8000638 <__aeabi_dmul>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	4614      	mov	r4, r2
 800193e:	461d      	mov	r5, r3
 8001940:	4b71      	ldr	r3, [pc, #452]	@ (8001b08 <omni_calc+0x3f4>)
 8001942:	4618      	mov	r0, r3
 8001944:	f7fe fe20 	bl	8000588 <__aeabi_f2d>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	ec43 2b10 	vmov	d0, r2, r3
 8001950:	f005 fd02 	bl	8007358 <sin>
 8001954:	eeb0 8a40 	vmov.f32	s16, s0
 8001958:	eef0 8a60 	vmov.f32	s17, s1
 800195c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800195e:	f7fe fe13 	bl	8000588 <__aeabi_f2d>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	ec51 0b18 	vmov	r0, r1, d8
 800196a:	f7fe fe65 	bl	8000638 <__aeabi_dmul>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	4620      	mov	r0, r4
 8001974:	4629      	mov	r1, r5
 8001976:	f7fe fca7 	bl	80002c8 <__aeabi_dsub>
 800197a:	4602      	mov	r2, r0
 800197c:	460b      	mov	r3, r1
 800197e:	4610      	mov	r0, r2
 8001980:	4619      	mov	r1, r3
 8001982:	f7ff f91b 	bl	8000bbc <__aeabi_d2f>
 8001986:	4603      	mov	r3, r0
	float arr[4][3] =
 8001988:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800198a:	4b5e      	ldr	r3, [pc, #376]	@ (8001b04 <omni_calc+0x3f0>)
 800198c:	643b      	str	r3, [r7, #64]	@ 0x40
	{-cos(a2)*sint-sin(a2)*cost, cos(a2)*cost-sin(a2)*sint, R},
 800198e:	4b5f      	ldr	r3, [pc, #380]	@ (8001b0c <omni_calc+0x3f8>)
 8001990:	4618      	mov	r0, r3
 8001992:	f7fe fdf9 	bl	8000588 <__aeabi_f2d>
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	ec43 2b10 	vmov	d0, r2, r3
 800199e:	f005 fc87 	bl	80072b0 <cos>
 80019a2:	ec53 2b10 	vmov	r2, r3, d0
 80019a6:	4692      	mov	sl, r2
 80019a8:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 80019ac:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80019ae:	f7fe fdeb 	bl	8000588 <__aeabi_f2d>
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	4650      	mov	r0, sl
 80019b8:	4659      	mov	r1, fp
 80019ba:	f7fe fe3d 	bl	8000638 <__aeabi_dmul>
 80019be:	4602      	mov	r2, r0
 80019c0:	460b      	mov	r3, r1
 80019c2:	4614      	mov	r4, r2
 80019c4:	461d      	mov	r5, r3
 80019c6:	4b51      	ldr	r3, [pc, #324]	@ (8001b0c <omni_calc+0x3f8>)
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7fe fddd 	bl	8000588 <__aeabi_f2d>
 80019ce:	4602      	mov	r2, r0
 80019d0:	460b      	mov	r3, r1
 80019d2:	ec43 2b10 	vmov	d0, r2, r3
 80019d6:	f005 fcbf 	bl	8007358 <sin>
 80019da:	ec5b ab10 	vmov	sl, fp, d0
 80019de:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80019e0:	f7fe fdd2 	bl	8000588 <__aeabi_f2d>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	4650      	mov	r0, sl
 80019ea:	4659      	mov	r1, fp
 80019ec:	f7fe fe24 	bl	8000638 <__aeabi_dmul>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	4620      	mov	r0, r4
 80019f6:	4629      	mov	r1, r5
 80019f8:	f7fe fc66 	bl	80002c8 <__aeabi_dsub>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	4610      	mov	r0, r2
 8001a02:	4619      	mov	r1, r3
 8001a04:	f7ff f8da 	bl	8000bbc <__aeabi_d2f>
 8001a08:	4603      	mov	r3, r0
	float arr[4][3] =
 8001a0a:	647b      	str	r3, [r7, #68]	@ 0x44
	{-cos(a2)*sint-sin(a2)*cost, cos(a2)*cost-sin(a2)*sint, R},
 8001a0c:	4b3f      	ldr	r3, [pc, #252]	@ (8001b0c <omni_calc+0x3f8>)
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7fe fdba 	bl	8000588 <__aeabi_f2d>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	ec43 2b10 	vmov	d0, r2, r3
 8001a1c:	f005 fc48 	bl	80072b0 <cos>
 8001a20:	ec55 4b10 	vmov	r4, r5, d0
 8001a24:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8001a26:	f7fe fdaf 	bl	8000588 <__aeabi_f2d>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	4620      	mov	r0, r4
 8001a30:	4629      	mov	r1, r5
 8001a32:	f7fe fe01 	bl	8000638 <__aeabi_dmul>
 8001a36:	4602      	mov	r2, r0
 8001a38:	460b      	mov	r3, r1
 8001a3a:	4614      	mov	r4, r2
 8001a3c:	461d      	mov	r5, r3
 8001a3e:	4b33      	ldr	r3, [pc, #204]	@ (8001b0c <omni_calc+0x3f8>)
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7fe fda1 	bl	8000588 <__aeabi_f2d>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	ec43 2b10 	vmov	d0, r2, r3
 8001a4e:	f005 fc83 	bl	8007358 <sin>
 8001a52:	ec5b ab10 	vmov	sl, fp, d0
 8001a56:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001a58:	f7fe fd96 	bl	8000588 <__aeabi_f2d>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4650      	mov	r0, sl
 8001a62:	4659      	mov	r1, fp
 8001a64:	f7fe fde8 	bl	8000638 <__aeabi_dmul>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	4620      	mov	r0, r4
 8001a6e:	4629      	mov	r1, r5
 8001a70:	f7fe fc2a 	bl	80002c8 <__aeabi_dsub>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	4610      	mov	r0, r2
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	f7ff f89e 	bl	8000bbc <__aeabi_d2f>
 8001a80:	4603      	mov	r3, r0
	float arr[4][3] =
 8001a82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001a84:	4b1f      	ldr	r3, [pc, #124]	@ (8001b04 <omni_calc+0x3f0>)
 8001a86:	64fb      	str	r3, [r7, #76]	@ 0x4c
	{-cos(a3)*sint-sin(a3)*cost, cos(a3)*cost-sin(a3)*sint, R}};
 8001a88:	4b21      	ldr	r3, [pc, #132]	@ (8001b10 <omni_calc+0x3fc>)
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7fe fd7c 	bl	8000588 <__aeabi_f2d>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	ec43 2b10 	vmov	d0, r2, r3
 8001a98:	f005 fc0a 	bl	80072b0 <cos>
 8001a9c:	ec53 2b10 	vmov	r2, r3, d0
 8001aa0:	4690      	mov	r8, r2
 8001aa2:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 8001aa6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001aa8:	f7fe fd6e 	bl	8000588 <__aeabi_f2d>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4640      	mov	r0, r8
 8001ab2:	4649      	mov	r1, r9
 8001ab4:	f7fe fdc0 	bl	8000638 <__aeabi_dmul>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	4614      	mov	r4, r2
 8001abe:	461d      	mov	r5, r3
 8001ac0:	4b13      	ldr	r3, [pc, #76]	@ (8001b10 <omni_calc+0x3fc>)
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7fe fd60 	bl	8000588 <__aeabi_f2d>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	ec43 2b10 	vmov	d0, r2, r3
 8001ad0:	f005 fc42 	bl	8007358 <sin>
 8001ad4:	ec59 8b10 	vmov	r8, r9, d0
 8001ad8:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8001ada:	f7fe fd55 	bl	8000588 <__aeabi_f2d>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	4640      	mov	r0, r8
 8001ae4:	4649      	mov	r1, r9
 8001ae6:	f7fe fda7 	bl	8000638 <__aeabi_dmul>
 8001aea:	4602      	mov	r2, r0
 8001aec:	460b      	mov	r3, r1
 8001aee:	4620      	mov	r0, r4
 8001af0:	4629      	mov	r1, r5
 8001af2:	f7fe fbe9 	bl	80002c8 <__aeabi_dsub>
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	4610      	mov	r0, r2
 8001afc:	4619      	mov	r1, r3
 8001afe:	e009      	b.n	8001b14 <omni_calc+0x400>
 8001b00:	3f490e56 	.word	0x3f490e56
 8001b04:	3e4ccccd 	.word	0x3e4ccccd
 8001b08:	4016cac1 	.word	0x4016cac1
 8001b0c:	407b51ec 	.word	0x407b51ec
 8001b10:	40afec8b 	.word	0x40afec8b
 8001b14:	f7ff f852 	bl	8000bbc <__aeabi_d2f>
 8001b18:	4603      	mov	r3, r0
	float arr[4][3] =
 8001b1a:	653b      	str	r3, [r7, #80]	@ 0x50
	{-cos(a3)*sint-sin(a3)*cost, cos(a3)*cost-sin(a3)*sint, R}};
 8001b1c:	4b5c      	ldr	r3, [pc, #368]	@ (8001c90 <omni_calc+0x57c>)
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7fe fd32 	bl	8000588 <__aeabi_f2d>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	ec43 2b10 	vmov	d0, r2, r3
 8001b2c:	f005 fbc0 	bl	80072b0 <cos>
 8001b30:	ec55 4b10 	vmov	r4, r5, d0
 8001b34:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8001b36:	f7fe fd27 	bl	8000588 <__aeabi_f2d>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	4620      	mov	r0, r4
 8001b40:	4629      	mov	r1, r5
 8001b42:	f7fe fd79 	bl	8000638 <__aeabi_dmul>
 8001b46:	4602      	mov	r2, r0
 8001b48:	460b      	mov	r3, r1
 8001b4a:	4614      	mov	r4, r2
 8001b4c:	461d      	mov	r5, r3
 8001b4e:	4b50      	ldr	r3, [pc, #320]	@ (8001c90 <omni_calc+0x57c>)
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7fe fd19 	bl	8000588 <__aeabi_f2d>
 8001b56:	4602      	mov	r2, r0
 8001b58:	460b      	mov	r3, r1
 8001b5a:	ec43 2b10 	vmov	d0, r2, r3
 8001b5e:	f005 fbfb 	bl	8007358 <sin>
 8001b62:	ec59 8b10 	vmov	r8, r9, d0
 8001b66:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001b68:	f7fe fd0e 	bl	8000588 <__aeabi_f2d>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	4640      	mov	r0, r8
 8001b72:	4649      	mov	r1, r9
 8001b74:	f7fe fd60 	bl	8000638 <__aeabi_dmul>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	4620      	mov	r0, r4
 8001b7e:	4629      	mov	r1, r5
 8001b80:	f7fe fba2 	bl	80002c8 <__aeabi_dsub>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	4610      	mov	r0, r2
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	f7ff f816 	bl	8000bbc <__aeabi_d2f>
 8001b90:	4603      	mov	r3, r0
	float arr[4][3] =
 8001b92:	657b      	str	r3, [r7, #84]	@ 0x54
 8001b94:	4b3f      	ldr	r3, [pc, #252]	@ (8001c94 <omni_calc+0x580>)
 8001b96:	65bb      	str	r3, [r7, #88]	@ 0x58

	*w0 = (arr[0][0] * v[0] + arr[0][1] * v[1] + arr[0][2] * v[2]) / r;
 8001b98:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001b9c:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001ba0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ba4:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8001ba8:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001bac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bb0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bb4:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 8001bb8:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001bbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bc4:	eddf 6a34 	vldr	s13, [pc, #208]	@ 8001c98 <omni_calc+0x584>
 8001bc8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	edc3 7a00 	vstr	s15, [r3]
	*w1 = (arr[1][0] * v[0] + arr[1][1] * v[1] + arr[1][2] * v[2]) / r;
 8001bd2:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001bd6:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001bda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bde:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8001be2:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001be6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bee:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8001bf2:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001bf6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bfa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bfe:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8001c98 <omni_calc+0x584>
 8001c02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	edc3 7a00 	vstr	s15, [r3]
	*w2 = (arr[2][0] * v[0] + arr[2][1] * v[1] + arr[2][2] * v[2]) / r;
 8001c0c:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8001c10:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001c14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c18:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8001c1c:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001c20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c28:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8001c2c:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001c30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c38:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8001c98 <omni_calc+0x584>
 8001c3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	edc3 7a00 	vstr	s15, [r3]
	*w3 = (arr[3][0] * v[0] + arr[3][1] * v[1] + arr[3][2] * v[2]) / r;
 8001c46:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001c4a:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001c4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c52:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8001c56:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001c5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c62:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 8001c66:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001c6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c72:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8001c98 <omni_calc+0x584>
 8001c76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	edc3 7a00 	vstr	s15, [r3]
}
 8001c80:	bf00      	nop
 8001c82:	3770      	adds	r7, #112	@ 0x70
 8001c84:	46bd      	mov	sp, r7
 8001c86:	ecbd 8b02 	vpop	{d8}
 8001c8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c8e:	bf00      	nop
 8001c90:	40afec8b 	.word	0x40afec8b
 8001c94:	3e4ccccd 	.word	0x3e4ccccd
 8001c98:	3cf5c28f 	.word	0x3cf5c28f

08001c9c <_write>:

int _write(int file, char *ptr, int len)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	230a      	movs	r3, #10
 8001cae:	68b9      	ldr	r1, [r7, #8]
 8001cb0:	4803      	ldr	r0, [pc, #12]	@ (8001cc0 <_write+0x24>)
 8001cb2:	f003 fbfd 	bl	80054b0 <HAL_UART_Transmit>
    return len;
 8001cb6:	687b      	ldr	r3, [r7, #4]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3710      	adds	r7, #16
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	20000244 	.word	0x20000244
 8001cc4:	00000000 	.word	0x00000000

08001cc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 8001cce:	4ba0      	ldr	r3, [pc, #640]	@ (8001f50 <main+0x288>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f004 fbc8 	bl	800646c <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cdc:	f000 fda7 	bl	800282e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ce0:	f000 f960 	bl	8001fa4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ce4:	f000 fabc 	bl	8002260 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8001ce8:	f000 f9a8 	bl	800203c <MX_FDCAN1_Init>
  MX_FDCAN3_Init();
 8001cec:	f000 f9ee 	bl	80020cc <MX_FDCAN3_Init>
  MX_USART2_UART_Init();
 8001cf0:	f000 fa6a 	bl	80021c8 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8001cf4:	f000 fa32 	bl	800215c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  printf("start\r\n");
 8001cf8:	4896      	ldr	r0, [pc, #600]	@ (8001f54 <main+0x28c>)
 8001cfa:	f004 fbaf 	bl	800645c <puts>

  FDCAN_motor_RxTxSettings();
 8001cfe:	f7ff fc97 	bl	8001630 <FDCAN_motor_RxTxSettings>
  printf("can_motor_start\r\n");
 8001d02:	4895      	ldr	r0, [pc, #596]	@ (8001f58 <main+0x290>)
 8001d04:	f004 fbaa 	bl	800645c <puts>
  FDCAN_RxTxSettings();
 8001d08:	f7ff fc1e 	bl	8001548 <FDCAN_RxTxSettings>
  printf("can_main_start\r\n");
 8001d0c:	4893      	ldr	r0, [pc, #588]	@ (8001f5c <main+0x294>)
 8001d0e:	f004 fba5 	bl	800645c <puts>
  vx = 0;
 8001d12:	4b93      	ldr	r3, [pc, #588]	@ (8001f60 <main+0x298>)
 8001d14:	f04f 0200 	mov.w	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]
  vy = 0;
 8001d1a:	4b92      	ldr	r3, [pc, #584]	@ (8001f64 <main+0x29c>)
 8001d1c:	f04f 0200 	mov.w	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
  omega = 0;
 8001d22:	4b91      	ldr	r3, [pc, #580]	@ (8001f68 <main+0x2a0>)
 8001d24:	f04f 0200 	mov.w	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim6);
 8001d2a:	4890      	ldr	r0, [pc, #576]	@ (8001f6c <main+0x2a4>)
 8001d2c:	f002 fff0 	bl	8004d10 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (vel_x < 10 && vel_x > -10){
 8001d30:	4b8f      	ldr	r3, [pc, #572]	@ (8001f70 <main+0x2a8>)
 8001d32:	881b      	ldrh	r3, [r3, #0]
 8001d34:	b21b      	sxth	r3, r3
 8001d36:	2b09      	cmp	r3, #9
 8001d38:	dc08      	bgt.n	8001d4c <main+0x84>
 8001d3a:	4b8d      	ldr	r3, [pc, #564]	@ (8001f70 <main+0x2a8>)
 8001d3c:	881b      	ldrh	r3, [r3, #0]
 8001d3e:	b21b      	sxth	r3, r3
 8001d40:	f113 0f09 	cmn.w	r3, #9
 8001d44:	db02      	blt.n	8001d4c <main+0x84>
		  vel_x = 0;
 8001d46:	4b8a      	ldr	r3, [pc, #552]	@ (8001f70 <main+0x2a8>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	801a      	strh	r2, [r3, #0]
	  }
	  if (vel_y < 10 && vel_y > -10){
 8001d4c:	4b89      	ldr	r3, [pc, #548]	@ (8001f74 <main+0x2ac>)
 8001d4e:	881b      	ldrh	r3, [r3, #0]
 8001d50:	b21b      	sxth	r3, r3
 8001d52:	2b09      	cmp	r3, #9
 8001d54:	dc08      	bgt.n	8001d68 <main+0xa0>
 8001d56:	4b87      	ldr	r3, [pc, #540]	@ (8001f74 <main+0x2ac>)
 8001d58:	881b      	ldrh	r3, [r3, #0]
 8001d5a:	b21b      	sxth	r3, r3
 8001d5c:	f113 0f09 	cmn.w	r3, #9
 8001d60:	db02      	blt.n	8001d68 <main+0xa0>
		  vel_y = 0;
 8001d62:	4b84      	ldr	r3, [pc, #528]	@ (8001f74 <main+0x2ac>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	801a      	strh	r2, [r3, #0]
	  }
	  vx = vel_x*0.01;
 8001d68:	4b81      	ldr	r3, [pc, #516]	@ (8001f70 <main+0x2a8>)
 8001d6a:	881b      	ldrh	r3, [r3, #0]
 8001d6c:	b21b      	sxth	r3, r3
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7fe fbf8 	bl	8000564 <__aeabi_i2d>
 8001d74:	a372      	add	r3, pc, #456	@ (adr r3, 8001f40 <main+0x278>)
 8001d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7a:	f7fe fc5d 	bl	8000638 <__aeabi_dmul>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	460b      	mov	r3, r1
 8001d82:	4610      	mov	r0, r2
 8001d84:	4619      	mov	r1, r3
 8001d86:	f7fe ff19 	bl	8000bbc <__aeabi_d2f>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	4a74      	ldr	r2, [pc, #464]	@ (8001f60 <main+0x298>)
 8001d8e:	6013      	str	r3, [r2, #0]
	  vy = vel_y*0.01;
 8001d90:	4b78      	ldr	r3, [pc, #480]	@ (8001f74 <main+0x2ac>)
 8001d92:	881b      	ldrh	r3, [r3, #0]
 8001d94:	b21b      	sxth	r3, r3
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7fe fbe4 	bl	8000564 <__aeabi_i2d>
 8001d9c:	a368      	add	r3, pc, #416	@ (adr r3, 8001f40 <main+0x278>)
 8001d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da2:	f7fe fc49 	bl	8000638 <__aeabi_dmul>
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
 8001daa:	4610      	mov	r0, r2
 8001dac:	4619      	mov	r1, r3
 8001dae:	f7fe ff05 	bl	8000bbc <__aeabi_d2f>
 8001db2:	4603      	mov	r3, r0
 8001db4:	4a6b      	ldr	r2, [pc, #428]	@ (8001f64 <main+0x29c>)
 8001db6:	6013      	str	r3, [r2, #0]
	  omega = omega_c/100;
 8001db8:	4b6f      	ldr	r3, [pc, #444]	@ (8001f78 <main+0x2b0>)
 8001dba:	881b      	ldrh	r3, [r3, #0]
 8001dbc:	b21b      	sxth	r3, r3
 8001dbe:	4a6f      	ldr	r2, [pc, #444]	@ (8001f7c <main+0x2b4>)
 8001dc0:	fb82 1203 	smull	r1, r2, r2, r3
 8001dc4:	1152      	asrs	r2, r2, #5
 8001dc6:	17db      	asrs	r3, r3, #31
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	b21b      	sxth	r3, r3
 8001dcc:	ee07 3a90 	vmov	s15, r3
 8001dd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dd4:	4b64      	ldr	r3, [pc, #400]	@ (8001f68 <main+0x2a0>)
 8001dd6:	edc3 7a00 	vstr	s15, [r3]
	  omni_calc(0 ,vx, vy, omega, &robomas[R_F-1].w, &robomas[L_F-1].w, &robomas[L_B-1].w, &robomas[R_B-1].w);
 8001dda:	4b61      	ldr	r3, [pc, #388]	@ (8001f60 <main+0x298>)
 8001ddc:	edd3 7a00 	vldr	s15, [r3]
 8001de0:	4b60      	ldr	r3, [pc, #384]	@ (8001f64 <main+0x29c>)
 8001de2:	ed93 7a00 	vldr	s14, [r3]
 8001de6:	4b60      	ldr	r3, [pc, #384]	@ (8001f68 <main+0x2a0>)
 8001de8:	edd3 6a00 	vldr	s13, [r3]
 8001dec:	4b64      	ldr	r3, [pc, #400]	@ (8001f80 <main+0x2b8>)
 8001dee:	4a65      	ldr	r2, [pc, #404]	@ (8001f84 <main+0x2bc>)
 8001df0:	4965      	ldr	r1, [pc, #404]	@ (8001f88 <main+0x2c0>)
 8001df2:	4866      	ldr	r0, [pc, #408]	@ (8001f8c <main+0x2c4>)
 8001df4:	eef0 1a66 	vmov.f32	s3, s13
 8001df8:	eeb0 1a47 	vmov.f32	s2, s14
 8001dfc:	eef0 0a67 	vmov.f32	s1, s15
 8001e00:	ed9f 0a63 	vldr	s0, [pc, #396]	@ 8001f90 <main+0x2c8>
 8001e04:	f7ff fc86 	bl	8001714 <omni_calc>
	  robomas[R_F-1].trgVel = (int)(-1*robomas[R_F-1].w*36*60/(2*PI));
 8001e08:	4b62      	ldr	r3, [pc, #392]	@ (8001f94 <main+0x2cc>)
 8001e0a:	edd3 7a27 	vldr	s15, [r3, #156]	@ 0x9c
 8001e0e:	eef1 7a67 	vneg.f32	s15, s15
 8001e12:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 8001f98 <main+0x2d0>
 8001e16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e1a:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 8001f9c <main+0x2d4>
 8001e1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e22:	ee17 0a90 	vmov	r0, s15
 8001e26:	f7fe fbaf 	bl	8000588 <__aeabi_f2d>
 8001e2a:	a347      	add	r3, pc, #284	@ (adr r3, 8001f48 <main+0x280>)
 8001e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e30:	f7fe fd2c 	bl	800088c <__aeabi_ddiv>
 8001e34:	4602      	mov	r2, r0
 8001e36:	460b      	mov	r3, r1
 8001e38:	4610      	mov	r0, r2
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	f7fe fe96 	bl	8000b6c <__aeabi_d2iz>
 8001e40:	4603      	mov	r3, r0
 8001e42:	b21a      	sxth	r2, r3
 8001e44:	4b53      	ldr	r3, [pc, #332]	@ (8001f94 <main+0x2cc>)
 8001e46:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
	  robomas[R_B-1].trgVel = (int)(-1*robomas[R_B-1].w*36*60/(2*PI));
 8001e4a:	4b52      	ldr	r3, [pc, #328]	@ (8001f94 <main+0x2cc>)
 8001e4c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001e50:	eef1 7a67 	vneg.f32	s15, s15
 8001e54:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8001f98 <main+0x2d0>
 8001e58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e5c:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8001f9c <main+0x2d4>
 8001e60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e64:	ee17 0a90 	vmov	r0, s15
 8001e68:	f7fe fb8e 	bl	8000588 <__aeabi_f2d>
 8001e6c:	a336      	add	r3, pc, #216	@ (adr r3, 8001f48 <main+0x280>)
 8001e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e72:	f7fe fd0b 	bl	800088c <__aeabi_ddiv>
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	4610      	mov	r0, r2
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f7fe fe75 	bl	8000b6c <__aeabi_d2iz>
 8001e82:	4603      	mov	r3, r0
 8001e84:	b21a      	sxth	r2, r3
 8001e86:	4b43      	ldr	r3, [pc, #268]	@ (8001f94 <main+0x2cc>)
 8001e88:	809a      	strh	r2, [r3, #4]
	  robomas[L_F-1].trgVel =  (int)(-1*robomas[L_F-1].w*36*60/(2*PI));
 8001e8a:	4b42      	ldr	r3, [pc, #264]	@ (8001f94 <main+0x2cc>)
 8001e8c:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 8001e90:	eef1 7a67 	vneg.f32	s15, s15
 8001e94:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8001f98 <main+0x2d0>
 8001e98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e9c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8001f9c <main+0x2d4>
 8001ea0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ea4:	ee17 0a90 	vmov	r0, s15
 8001ea8:	f7fe fb6e 	bl	8000588 <__aeabi_f2d>
 8001eac:	a326      	add	r3, pc, #152	@ (adr r3, 8001f48 <main+0x280>)
 8001eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb2:	f7fe fceb 	bl	800088c <__aeabi_ddiv>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	460b      	mov	r3, r1
 8001eba:	4610      	mov	r0, r2
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	f7fe fe55 	bl	8000b6c <__aeabi_d2iz>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	b21a      	sxth	r2, r3
 8001ec6:	4b33      	ldr	r3, [pc, #204]	@ (8001f94 <main+0x2cc>)
 8001ec8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
	  robomas[L_B-1].trgVel = (int)(-1*robomas[L_B-1].w*36*60/(2*PI));
 8001ecc:	4b31      	ldr	r3, [pc, #196]	@ (8001f94 <main+0x2cc>)
 8001ece:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001ed2:	eef1 7a67 	vneg.f32	s15, s15
 8001ed6:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001f98 <main+0x2d0>
 8001eda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ede:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001f9c <main+0x2d4>
 8001ee2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ee6:	ee17 0a90 	vmov	r0, s15
 8001eea:	f7fe fb4d 	bl	8000588 <__aeabi_f2d>
 8001eee:	a316      	add	r3, pc, #88	@ (adr r3, 8001f48 <main+0x280>)
 8001ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef4:	f7fe fcca 	bl	800088c <__aeabi_ddiv>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	460b      	mov	r3, r1
 8001efc:	4610      	mov	r0, r2
 8001efe:	4619      	mov	r1, r3
 8001f00:	f7fe fe34 	bl	8000b6c <__aeabi_d2iz>
 8001f04:	4603      	mov	r3, r0
 8001f06:	b21a      	sxth	r2, r3
 8001f08:	4b22      	ldr	r3, [pc, #136]	@ (8001f94 <main+0x2cc>)
 8001f0a:	859a      	strh	r2, [r3, #44]	@ 0x2c

	  printf("act:%d,(%d,%d), omega:%d\r\n", robomas[0].actVel, vel_x, vel_y, omega_c);
 8001f0c:	4b21      	ldr	r3, [pc, #132]	@ (8001f94 <main+0x2cc>)
 8001f0e:	88db      	ldrh	r3, [r3, #6]
 8001f10:	b21b      	sxth	r3, r3
 8001f12:	4619      	mov	r1, r3
 8001f14:	4b16      	ldr	r3, [pc, #88]	@ (8001f70 <main+0x2a8>)
 8001f16:	881b      	ldrh	r3, [r3, #0]
 8001f18:	b21b      	sxth	r3, r3
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	4b15      	ldr	r3, [pc, #84]	@ (8001f74 <main+0x2ac>)
 8001f1e:	881b      	ldrh	r3, [r3, #0]
 8001f20:	b21b      	sxth	r3, r3
 8001f22:	4618      	mov	r0, r3
 8001f24:	4b14      	ldr	r3, [pc, #80]	@ (8001f78 <main+0x2b0>)
 8001f26:	881b      	ldrh	r3, [r3, #0]
 8001f28:	b21b      	sxth	r3, r3
 8001f2a:	9300      	str	r3, [sp, #0]
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	481c      	ldr	r0, [pc, #112]	@ (8001fa0 <main+0x2d8>)
 8001f30:	f004 fa2c 	bl	800638c <iprintf>
	  HAL_Delay(1);
 8001f34:	2001      	movs	r0, #1
 8001f36:	f000 fceb 	bl	8002910 <HAL_Delay>
	  if (vel_x < 10 && vel_x > -10){
 8001f3a:	e6f9      	b.n	8001d30 <main+0x68>
 8001f3c:	f3af 8000 	nop.w
 8001f40:	47ae147b 	.word	0x47ae147b
 8001f44:	3f847ae1 	.word	0x3f847ae1
 8001f48:	c083126f 	.word	0xc083126f
 8001f4c:	401921ca 	.word	0x401921ca
 8001f50:	200000c4 	.word	0x200000c4
 8001f54:	080084b0 	.word	0x080084b0
 8001f58:	080084b8 	.word	0x080084b8
 8001f5c:	080084cc 	.word	0x080084cc
 8001f60:	20000390 	.word	0x20000390
 8001f64:	20000394 	.word	0x20000394
 8001f68:	20000398 	.word	0x20000398
 8001f6c:	200001f8 	.word	0x200001f8
 8001f70:	20000388 	.word	0x20000388
 8001f74:	2000038a 	.word	0x2000038a
 8001f78:	2000038c 	.word	0x2000038c
 8001f7c:	51eb851f 	.word	0x51eb851f
 8001f80:	20000024 	.word	0x20000024
 8001f84:	2000004c 	.word	0x2000004c
 8001f88:	20000074 	.word	0x20000074
 8001f8c:	2000009c 	.word	0x2000009c
 8001f90:	00000000 	.word	0x00000000
 8001f94:	20000000 	.word	0x20000000
 8001f98:	42100000 	.word	0x42100000
 8001f9c:	42700000 	.word	0x42700000
 8001fa0:	080084dc 	.word	0x080084dc

08001fa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b094      	sub	sp, #80	@ 0x50
 8001fa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001faa:	f107 0318 	add.w	r3, r7, #24
 8001fae:	2238      	movs	r2, #56	@ 0x38
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f004 fbee 	bl	8006794 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fb8:	1d3b      	adds	r3, r7, #4
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	605a      	str	r2, [r3, #4]
 8001fc0:	609a      	str	r2, [r3, #8]
 8001fc2:	60da      	str	r2, [r3, #12]
 8001fc4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fc6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001fca:	f001 fe19 	bl	8003c00 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fd2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fd6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fd8:	2340      	movs	r3, #64	@ 0x40
 8001fda:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fdc:	2302      	movs	r3, #2
 8001fde:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001fe8:	230a      	movs	r3, #10
 8001fea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001fec:	2302      	movs	r3, #2
 8001fee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ff8:	f107 0318 	add.w	r3, r7, #24
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f001 feb3 	bl	8003d68 <HAL_RCC_OscConfig>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8002008:	f000 f968 	bl	80022dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800200c:	230f      	movs	r3, #15
 800200e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002010:	2303      	movs	r3, #3
 8002012:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002014:	2300      	movs	r3, #0
 8002016:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002018:	2300      	movs	r3, #0
 800201a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800201c:	2300      	movs	r3, #0
 800201e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002020:	1d3b      	adds	r3, r7, #4
 8002022:	2102      	movs	r1, #2
 8002024:	4618      	mov	r0, r3
 8002026:	f002 f9b1 	bl	800438c <HAL_RCC_ClockConfig>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002030:	f000 f954 	bl	80022dc <Error_Handler>
  }
}
 8002034:	bf00      	nop
 8002036:	3750      	adds	r7, #80	@ 0x50
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8002040:	4b20      	ldr	r3, [pc, #128]	@ (80020c4 <MX_FDCAN1_Init+0x88>)
 8002042:	4a21      	ldr	r2, [pc, #132]	@ (80020c8 <MX_FDCAN1_Init+0x8c>)
 8002044:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8002046:	4b1f      	ldr	r3, [pc, #124]	@ (80020c4 <MX_FDCAN1_Init+0x88>)
 8002048:	2200      	movs	r2, #0
 800204a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 800204c:	4b1d      	ldr	r3, [pc, #116]	@ (80020c4 <MX_FDCAN1_Init+0x88>)
 800204e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002052:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8002054:	4b1b      	ldr	r3, [pc, #108]	@ (80020c4 <MX_FDCAN1_Init+0x88>)
 8002056:	2200      	movs	r2, #0
 8002058:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800205a:	4b1a      	ldr	r3, [pc, #104]	@ (80020c4 <MX_FDCAN1_Init+0x88>)
 800205c:	2200      	movs	r2, #0
 800205e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8002060:	4b18      	ldr	r3, [pc, #96]	@ (80020c4 <MX_FDCAN1_Init+0x88>)
 8002062:	2200      	movs	r2, #0
 8002064:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8002066:	4b17      	ldr	r3, [pc, #92]	@ (80020c4 <MX_FDCAN1_Init+0x88>)
 8002068:	2200      	movs	r2, #0
 800206a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 4;
 800206c:	4b15      	ldr	r3, [pc, #84]	@ (80020c4 <MX_FDCAN1_Init+0x88>)
 800206e:	2204      	movs	r2, #4
 8002070:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8002072:	4b14      	ldr	r3, [pc, #80]	@ (80020c4 <MX_FDCAN1_Init+0x88>)
 8002074:	2201      	movs	r2, #1
 8002076:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 15;
 8002078:	4b12      	ldr	r3, [pc, #72]	@ (80020c4 <MX_FDCAN1_Init+0x88>)
 800207a:	220f      	movs	r2, #15
 800207c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 4;
 800207e:	4b11      	ldr	r3, [pc, #68]	@ (80020c4 <MX_FDCAN1_Init+0x88>)
 8002080:	2204      	movs	r2, #4
 8002082:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 2;
 8002084:	4b0f      	ldr	r3, [pc, #60]	@ (80020c4 <MX_FDCAN1_Init+0x88>)
 8002086:	2202      	movs	r2, #2
 8002088:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800208a:	4b0e      	ldr	r3, [pc, #56]	@ (80020c4 <MX_FDCAN1_Init+0x88>)
 800208c:	2201      	movs	r2, #1
 800208e:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 15;
 8002090:	4b0c      	ldr	r3, [pc, #48]	@ (80020c4 <MX_FDCAN1_Init+0x88>)
 8002092:	220f      	movs	r2, #15
 8002094:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8002096:	4b0b      	ldr	r3, [pc, #44]	@ (80020c4 <MX_FDCAN1_Init+0x88>)
 8002098:	2204      	movs	r2, #4
 800209a:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 800209c:	4b09      	ldr	r3, [pc, #36]	@ (80020c4 <MX_FDCAN1_Init+0x88>)
 800209e:	2201      	movs	r2, #1
 80020a0:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80020a2:	4b08      	ldr	r3, [pc, #32]	@ (80020c4 <MX_FDCAN1_Init+0x88>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80020a8:	4b06      	ldr	r3, [pc, #24]	@ (80020c4 <MX_FDCAN1_Init+0x88>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80020ae:	4805      	ldr	r0, [pc, #20]	@ (80020c4 <MX_FDCAN1_Init+0x88>)
 80020b0:	f000 fd60 	bl	8002b74 <HAL_FDCAN_Init>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 80020ba:	f000 f90f 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20000130 	.word	0x20000130
 80020c8:	40006400 	.word	0x40006400

080020cc <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 80020d0:	4b20      	ldr	r3, [pc, #128]	@ (8002154 <MX_FDCAN3_Init+0x88>)
 80020d2:	4a21      	ldr	r2, [pc, #132]	@ (8002158 <MX_FDCAN3_Init+0x8c>)
 80020d4:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80020d6:	4b1f      	ldr	r3, [pc, #124]	@ (8002154 <MX_FDCAN3_Init+0x88>)
 80020d8:	2200      	movs	r2, #0
 80020da:	605a      	str	r2, [r3, #4]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 80020dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002154 <MX_FDCAN3_Init+0x88>)
 80020de:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80020e2:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 80020e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002154 <MX_FDCAN3_Init+0x88>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 80020ea:	4b1a      	ldr	r3, [pc, #104]	@ (8002154 <MX_FDCAN3_Init+0x88>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 80020f0:	4b18      	ldr	r3, [pc, #96]	@ (8002154 <MX_FDCAN3_Init+0x88>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 80020f6:	4b17      	ldr	r3, [pc, #92]	@ (8002154 <MX_FDCAN3_Init+0x88>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 4;
 80020fc:	4b15      	ldr	r3, [pc, #84]	@ (8002154 <MX_FDCAN3_Init+0x88>)
 80020fe:	2204      	movs	r2, #4
 8002100:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8002102:	4b14      	ldr	r3, [pc, #80]	@ (8002154 <MX_FDCAN3_Init+0x88>)
 8002104:	2201      	movs	r2, #1
 8002106:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 15;
 8002108:	4b12      	ldr	r3, [pc, #72]	@ (8002154 <MX_FDCAN3_Init+0x88>)
 800210a:	220f      	movs	r2, #15
 800210c:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 4;
 800210e:	4b11      	ldr	r3, [pc, #68]	@ (8002154 <MX_FDCAN3_Init+0x88>)
 8002110:	2204      	movs	r2, #4
 8002112:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 2;
 8002114:	4b0f      	ldr	r3, [pc, #60]	@ (8002154 <MX_FDCAN3_Init+0x88>)
 8002116:	2202      	movs	r2, #2
 8002118:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 800211a:	4b0e      	ldr	r3, [pc, #56]	@ (8002154 <MX_FDCAN3_Init+0x88>)
 800211c:	2201      	movs	r2, #1
 800211e:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan3.Init.DataTimeSeg1 = 15;
 8002120:	4b0c      	ldr	r3, [pc, #48]	@ (8002154 <MX_FDCAN3_Init+0x88>)
 8002122:	220f      	movs	r2, #15
 8002124:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan3.Init.DataTimeSeg2 = 4;
 8002126:	4b0b      	ldr	r3, [pc, #44]	@ (8002154 <MX_FDCAN3_Init+0x88>)
 8002128:	2204      	movs	r2, #4
 800212a:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan3.Init.StdFiltersNbr = 1;
 800212c:	4b09      	ldr	r3, [pc, #36]	@ (8002154 <MX_FDCAN3_Init+0x88>)
 800212e:	2201      	movs	r2, #1
 8002130:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan3.Init.ExtFiltersNbr = 0;
 8002132:	4b08      	ldr	r3, [pc, #32]	@ (8002154 <MX_FDCAN3_Init+0x88>)
 8002134:	2200      	movs	r2, #0
 8002136:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002138:	4b06      	ldr	r3, [pc, #24]	@ (8002154 <MX_FDCAN3_Init+0x88>)
 800213a:	2200      	movs	r2, #0
 800213c:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 800213e:	4805      	ldr	r0, [pc, #20]	@ (8002154 <MX_FDCAN3_Init+0x88>)
 8002140:	f000 fd18 	bl	8002b74 <HAL_FDCAN_Init>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <MX_FDCAN3_Init+0x82>
  {
    Error_Handler();
 800214a:	f000 f8c7 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	20000194 	.word	0x20000194
 8002158:	40006c00 	.word	0x40006c00

0800215c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002162:	1d3b      	adds	r3, r7, #4
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800216c:	4b14      	ldr	r3, [pc, #80]	@ (80021c0 <MX_TIM6_Init+0x64>)
 800216e:	4a15      	ldr	r2, [pc, #84]	@ (80021c4 <MX_TIM6_Init+0x68>)
 8002170:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9;
 8002172:	4b13      	ldr	r3, [pc, #76]	@ (80021c0 <MX_TIM6_Init+0x64>)
 8002174:	2209      	movs	r2, #9
 8002176:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002178:	4b11      	ldr	r3, [pc, #68]	@ (80021c0 <MX_TIM6_Init+0x64>)
 800217a:	2200      	movs	r2, #0
 800217c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800217e:	4b10      	ldr	r3, [pc, #64]	@ (80021c0 <MX_TIM6_Init+0x64>)
 8002180:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002184:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002186:	4b0e      	ldr	r3, [pc, #56]	@ (80021c0 <MX_TIM6_Init+0x64>)
 8002188:	2200      	movs	r2, #0
 800218a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800218c:	480c      	ldr	r0, [pc, #48]	@ (80021c0 <MX_TIM6_Init+0x64>)
 800218e:	f002 fd67 	bl	8004c60 <HAL_TIM_Base_Init>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002198:	f000 f8a0 	bl	80022dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800219c:	2300      	movs	r3, #0
 800219e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021a0:	2300      	movs	r3, #0
 80021a2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80021a4:	1d3b      	adds	r3, r7, #4
 80021a6:	4619      	mov	r1, r3
 80021a8:	4805      	ldr	r0, [pc, #20]	@ (80021c0 <MX_TIM6_Init+0x64>)
 80021aa:	f003 f855 	bl	8005258 <HAL_TIMEx_MasterConfigSynchronization>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80021b4:	f000 f892 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80021b8:	bf00      	nop
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	200001f8 	.word	0x200001f8
 80021c4:	40001000 	.word	0x40001000

080021c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021cc:	4b22      	ldr	r3, [pc, #136]	@ (8002258 <MX_USART2_UART_Init+0x90>)
 80021ce:	4a23      	ldr	r2, [pc, #140]	@ (800225c <MX_USART2_UART_Init+0x94>)
 80021d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021d2:	4b21      	ldr	r3, [pc, #132]	@ (8002258 <MX_USART2_UART_Init+0x90>)
 80021d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80021d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021da:	4b1f      	ldr	r3, [pc, #124]	@ (8002258 <MX_USART2_UART_Init+0x90>)
 80021dc:	2200      	movs	r2, #0
 80021de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002258 <MX_USART2_UART_Init+0x90>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002258 <MX_USART2_UART_Init+0x90>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002258 <MX_USART2_UART_Init+0x90>)
 80021ee:	220c      	movs	r2, #12
 80021f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021f2:	4b19      	ldr	r3, [pc, #100]	@ (8002258 <MX_USART2_UART_Init+0x90>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021f8:	4b17      	ldr	r3, [pc, #92]	@ (8002258 <MX_USART2_UART_Init+0x90>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021fe:	4b16      	ldr	r3, [pc, #88]	@ (8002258 <MX_USART2_UART_Init+0x90>)
 8002200:	2200      	movs	r2, #0
 8002202:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002204:	4b14      	ldr	r3, [pc, #80]	@ (8002258 <MX_USART2_UART_Init+0x90>)
 8002206:	2200      	movs	r2, #0
 8002208:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800220a:	4b13      	ldr	r3, [pc, #76]	@ (8002258 <MX_USART2_UART_Init+0x90>)
 800220c:	2200      	movs	r2, #0
 800220e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002210:	4811      	ldr	r0, [pc, #68]	@ (8002258 <MX_USART2_UART_Init+0x90>)
 8002212:	f003 f8fd 	bl	8005410 <HAL_UART_Init>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800221c:	f000 f85e 	bl	80022dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002220:	2100      	movs	r1, #0
 8002222:	480d      	ldr	r0, [pc, #52]	@ (8002258 <MX_USART2_UART_Init+0x90>)
 8002224:	f003 ff26 	bl	8006074 <HAL_UARTEx_SetTxFifoThreshold>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800222e:	f000 f855 	bl	80022dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002232:	2100      	movs	r1, #0
 8002234:	4808      	ldr	r0, [pc, #32]	@ (8002258 <MX_USART2_UART_Init+0x90>)
 8002236:	f003 ff5b 	bl	80060f0 <HAL_UARTEx_SetRxFifoThreshold>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002240:	f000 f84c 	bl	80022dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002244:	4804      	ldr	r0, [pc, #16]	@ (8002258 <MX_USART2_UART_Init+0x90>)
 8002246:	f003 fedc 	bl	8006002 <HAL_UARTEx_DisableFifoMode>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002250:	f000 f844 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002254:	bf00      	nop
 8002256:	bd80      	pop	{r7, pc}
 8002258:	20000244 	.word	0x20000244
 800225c:	40004400 	.word	0x40004400

08002260 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b088      	sub	sp, #32
 8002264:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002266:	f107 030c 	add.w	r3, r7, #12
 800226a:	2200      	movs	r2, #0
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	605a      	str	r2, [r3, #4]
 8002270:	609a      	str	r2, [r3, #8]
 8002272:	60da      	str	r2, [r3, #12]
 8002274:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002276:	4b17      	ldr	r3, [pc, #92]	@ (80022d4 <MX_GPIO_Init+0x74>)
 8002278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800227a:	4a16      	ldr	r2, [pc, #88]	@ (80022d4 <MX_GPIO_Init+0x74>)
 800227c:	f043 0301 	orr.w	r3, r3, #1
 8002280:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002282:	4b14      	ldr	r3, [pc, #80]	@ (80022d4 <MX_GPIO_Init+0x74>)
 8002284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	60bb      	str	r3, [r7, #8]
 800228c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800228e:	4b11      	ldr	r3, [pc, #68]	@ (80022d4 <MX_GPIO_Init+0x74>)
 8002290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002292:	4a10      	ldr	r2, [pc, #64]	@ (80022d4 <MX_GPIO_Init+0x74>)
 8002294:	f043 0308 	orr.w	r3, r3, #8
 8002298:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800229a:	4b0e      	ldr	r3, [pc, #56]	@ (80022d4 <MX_GPIO_Init+0x74>)
 800229c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800229e:	f003 0308 	and.w	r3, r3, #8
 80022a2:	607b      	str	r3, [r7, #4]
 80022a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boad_LED_GPIO_Port, Boad_LED_Pin, GPIO_PIN_RESET);
 80022a6:	2200      	movs	r2, #0
 80022a8:	2104      	movs	r1, #4
 80022aa:	480b      	ldr	r0, [pc, #44]	@ (80022d8 <MX_GPIO_Init+0x78>)
 80022ac:	f001 fc90 	bl	8003bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Boad_LED_Pin */
  GPIO_InitStruct.Pin = Boad_LED_Pin;
 80022b0:	2304      	movs	r3, #4
 80022b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022b4:	2301      	movs	r3, #1
 80022b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b8:	2300      	movs	r3, #0
 80022ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022bc:	2300      	movs	r3, #0
 80022be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Boad_LED_GPIO_Port, &GPIO_InitStruct);
 80022c0:	f107 030c 	add.w	r3, r7, #12
 80022c4:	4619      	mov	r1, r3
 80022c6:	4804      	ldr	r0, [pc, #16]	@ (80022d8 <MX_GPIO_Init+0x78>)
 80022c8:	f001 fb00 	bl	80038cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80022cc:	bf00      	nop
 80022ce:	3720      	adds	r7, #32
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40021000 	.word	0x40021000
 80022d8:	48000c00 	.word	0x48000c00

080022dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022e0:	b672      	cpsid	i
}
 80022e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  printf("Error\r\n");
 80022e4:	4804      	ldr	r0, [pc, #16]	@ (80022f8 <Error_Handler+0x1c>)
 80022e6:	f004 f8b9 	bl	800645c <puts>
  HAL_GPIO_WritePin(Boad_LED_GPIO_Port, Boad_LED_Pin, GPIO_PIN_SET);
 80022ea:	2201      	movs	r2, #1
 80022ec:	2104      	movs	r1, #4
 80022ee:	4803      	ldr	r0, [pc, #12]	@ (80022fc <Error_Handler+0x20>)
 80022f0:	f001 fc6e 	bl	8003bd0 <HAL_GPIO_WritePin>
  while (1)
 80022f4:	bf00      	nop
 80022f6:	e7fd      	b.n	80022f4 <Error_Handler+0x18>
 80022f8:	080084f8 	.word	0x080084f8
 80022fc:	48000c00 	.word	0x48000c00

08002300 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002306:	4b0f      	ldr	r3, [pc, #60]	@ (8002344 <HAL_MspInit+0x44>)
 8002308:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800230a:	4a0e      	ldr	r2, [pc, #56]	@ (8002344 <HAL_MspInit+0x44>)
 800230c:	f043 0301 	orr.w	r3, r3, #1
 8002310:	6613      	str	r3, [r2, #96]	@ 0x60
 8002312:	4b0c      	ldr	r3, [pc, #48]	@ (8002344 <HAL_MspInit+0x44>)
 8002314:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	607b      	str	r3, [r7, #4]
 800231c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800231e:	4b09      	ldr	r3, [pc, #36]	@ (8002344 <HAL_MspInit+0x44>)
 8002320:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002322:	4a08      	ldr	r2, [pc, #32]	@ (8002344 <HAL_MspInit+0x44>)
 8002324:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002328:	6593      	str	r3, [r2, #88]	@ 0x58
 800232a:	4b06      	ldr	r3, [pc, #24]	@ (8002344 <HAL_MspInit+0x44>)
 800232c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800232e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002332:	603b      	str	r3, [r7, #0]
 8002334:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002336:	f001 fd07 	bl	8003d48 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800233a:	bf00      	nop
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40021000 	.word	0x40021000

08002348 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b0a0      	sub	sp, #128	@ 0x80
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002350:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	605a      	str	r2, [r3, #4]
 800235a:	609a      	str	r2, [r3, #8]
 800235c:	60da      	str	r2, [r3, #12]
 800235e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002360:	f107 0318 	add.w	r3, r7, #24
 8002364:	2254      	movs	r2, #84	@ 0x54
 8002366:	2100      	movs	r1, #0
 8002368:	4618      	mov	r0, r3
 800236a:	f004 fa13 	bl	8006794 <memset>
  if(hfdcan->Instance==FDCAN1)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a59      	ldr	r2, [pc, #356]	@ (80024d8 <HAL_FDCAN_MspInit+0x190>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d153      	bne.n	8002420 <HAL_FDCAN_MspInit+0xd8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002378:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800237c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800237e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002382:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002384:	f107 0318 	add.w	r3, r7, #24
 8002388:	4618      	mov	r0, r3
 800238a:	f002 fa1b 	bl	80047c4 <HAL_RCCEx_PeriphCLKConfig>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8002394:	f7ff ffa2 	bl	80022dc <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002398:	4b50      	ldr	r3, [pc, #320]	@ (80024dc <HAL_FDCAN_MspInit+0x194>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	3301      	adds	r3, #1
 800239e:	4a4f      	ldr	r2, [pc, #316]	@ (80024dc <HAL_FDCAN_MspInit+0x194>)
 80023a0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80023a2:	4b4e      	ldr	r3, [pc, #312]	@ (80024dc <HAL_FDCAN_MspInit+0x194>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d10b      	bne.n	80023c2 <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80023aa:	4b4d      	ldr	r3, [pc, #308]	@ (80024e0 <HAL_FDCAN_MspInit+0x198>)
 80023ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ae:	4a4c      	ldr	r2, [pc, #304]	@ (80024e0 <HAL_FDCAN_MspInit+0x198>)
 80023b0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80023b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80023b6:	4b4a      	ldr	r3, [pc, #296]	@ (80024e0 <HAL_FDCAN_MspInit+0x198>)
 80023b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023be:	617b      	str	r3, [r7, #20]
 80023c0:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023c2:	4b47      	ldr	r3, [pc, #284]	@ (80024e0 <HAL_FDCAN_MspInit+0x198>)
 80023c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023c6:	4a46      	ldr	r2, [pc, #280]	@ (80024e0 <HAL_FDCAN_MspInit+0x198>)
 80023c8:	f043 0301 	orr.w	r3, r3, #1
 80023cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023ce:	4b44      	ldr	r3, [pc, #272]	@ (80024e0 <HAL_FDCAN_MspInit+0x198>)
 80023d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	613b      	str	r3, [r7, #16]
 80023d8:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80023da:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80023de:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e0:	2302      	movs	r3, #2
 80023e2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e4:	2300      	movs	r3, #0
 80023e6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e8:	2300      	movs	r3, #0
 80023ea:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80023ec:	2309      	movs	r3, #9
 80023ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80023f4:	4619      	mov	r1, r3
 80023f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023fa:	f001 fa67 	bl	80038cc <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80023fe:	2200      	movs	r2, #0
 8002400:	2100      	movs	r1, #0
 8002402:	2015      	movs	r0, #21
 8002404:	f000 fb81 	bl	8002b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002408:	2015      	movs	r0, #21
 800240a:	f000 fb98 	bl	8002b3e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 800240e:	2200      	movs	r2, #0
 8002410:	2100      	movs	r1, #0
 8002412:	2016      	movs	r0, #22
 8002414:	f000 fb79 	bl	8002b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8002418:	2016      	movs	r0, #22
 800241a:	f000 fb90 	bl	8002b3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 800241e:	e057      	b.n	80024d0 <HAL_FDCAN_MspInit+0x188>
  else if(hfdcan->Instance==FDCAN3)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a2f      	ldr	r2, [pc, #188]	@ (80024e4 <HAL_FDCAN_MspInit+0x19c>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d152      	bne.n	80024d0 <HAL_FDCAN_MspInit+0x188>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800242a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800242e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8002430:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002434:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002436:	f107 0318 	add.w	r3, r7, #24
 800243a:	4618      	mov	r0, r3
 800243c:	f002 f9c2 	bl	80047c4 <HAL_RCCEx_PeriphCLKConfig>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <HAL_FDCAN_MspInit+0x102>
      Error_Handler();
 8002446:	f7ff ff49 	bl	80022dc <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800244a:	4b24      	ldr	r3, [pc, #144]	@ (80024dc <HAL_FDCAN_MspInit+0x194>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	3301      	adds	r3, #1
 8002450:	4a22      	ldr	r2, [pc, #136]	@ (80024dc <HAL_FDCAN_MspInit+0x194>)
 8002452:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002454:	4b21      	ldr	r3, [pc, #132]	@ (80024dc <HAL_FDCAN_MspInit+0x194>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d10b      	bne.n	8002474 <HAL_FDCAN_MspInit+0x12c>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800245c:	4b20      	ldr	r3, [pc, #128]	@ (80024e0 <HAL_FDCAN_MspInit+0x198>)
 800245e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002460:	4a1f      	ldr	r2, [pc, #124]	@ (80024e0 <HAL_FDCAN_MspInit+0x198>)
 8002462:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002466:	6593      	str	r3, [r2, #88]	@ 0x58
 8002468:	4b1d      	ldr	r3, [pc, #116]	@ (80024e0 <HAL_FDCAN_MspInit+0x198>)
 800246a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800246c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002470:	60fb      	str	r3, [r7, #12]
 8002472:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002474:	4b1a      	ldr	r3, [pc, #104]	@ (80024e0 <HAL_FDCAN_MspInit+0x198>)
 8002476:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002478:	4a19      	ldr	r2, [pc, #100]	@ (80024e0 <HAL_FDCAN_MspInit+0x198>)
 800247a:	f043 0301 	orr.w	r3, r3, #1
 800247e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002480:	4b17      	ldr	r3, [pc, #92]	@ (80024e0 <HAL_FDCAN_MspInit+0x198>)
 8002482:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	60bb      	str	r3, [r7, #8]
 800248a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 800248c:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8002490:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002492:	2302      	movs	r3, #2
 8002494:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002496:	2300      	movs	r3, #0
 8002498:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800249a:	2300      	movs	r3, #0
 800249c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF11_FDCAN3;
 800249e:	230b      	movs	r3, #11
 80024a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80024a6:	4619      	mov	r1, r3
 80024a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024ac:	f001 fa0e 	bl	80038cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN3_IT0_IRQn, 0, 0);
 80024b0:	2200      	movs	r2, #0
 80024b2:	2100      	movs	r1, #0
 80024b4:	2058      	movs	r0, #88	@ 0x58
 80024b6:	f000 fb28 	bl	8002b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT0_IRQn);
 80024ba:	2058      	movs	r0, #88	@ 0x58
 80024bc:	f000 fb3f 	bl	8002b3e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN3_IT1_IRQn, 0, 0);
 80024c0:	2200      	movs	r2, #0
 80024c2:	2100      	movs	r1, #0
 80024c4:	2059      	movs	r0, #89	@ 0x59
 80024c6:	f000 fb20 	bl	8002b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT1_IRQn);
 80024ca:	2059      	movs	r0, #89	@ 0x59
 80024cc:	f000 fb37 	bl	8002b3e <HAL_NVIC_EnableIRQ>
}
 80024d0:	bf00      	nop
 80024d2:	3780      	adds	r7, #128	@ 0x80
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40006400 	.word	0x40006400
 80024dc:	200003a0 	.word	0x200003a0
 80024e0:	40021000 	.word	0x40021000
 80024e4:	40006c00 	.word	0x40006c00

080024e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a0d      	ldr	r2, [pc, #52]	@ (800252c <HAL_TIM_Base_MspInit+0x44>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d113      	bne.n	8002522 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80024fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002530 <HAL_TIM_Base_MspInit+0x48>)
 80024fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024fe:	4a0c      	ldr	r2, [pc, #48]	@ (8002530 <HAL_TIM_Base_MspInit+0x48>)
 8002500:	f043 0310 	orr.w	r3, r3, #16
 8002504:	6593      	str	r3, [r2, #88]	@ 0x58
 8002506:	4b0a      	ldr	r3, [pc, #40]	@ (8002530 <HAL_TIM_Base_MspInit+0x48>)
 8002508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800250a:	f003 0310 	and.w	r3, r3, #16
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002512:	2200      	movs	r2, #0
 8002514:	2100      	movs	r1, #0
 8002516:	2036      	movs	r0, #54	@ 0x36
 8002518:	f000 faf7 	bl	8002b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800251c:	2036      	movs	r0, #54	@ 0x36
 800251e:	f000 fb0e 	bl	8002b3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002522:	bf00      	nop
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	40001000 	.word	0x40001000
 8002530:	40021000 	.word	0x40021000

08002534 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b09e      	sub	sp, #120	@ 0x78
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800253c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	605a      	str	r2, [r3, #4]
 8002546:	609a      	str	r2, [r3, #8]
 8002548:	60da      	str	r2, [r3, #12]
 800254a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800254c:	f107 0310 	add.w	r3, r7, #16
 8002550:	2254      	movs	r2, #84	@ 0x54
 8002552:	2100      	movs	r1, #0
 8002554:	4618      	mov	r0, r3
 8002556:	f004 f91d 	bl	8006794 <memset>
  if(huart->Instance==USART2)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a1f      	ldr	r2, [pc, #124]	@ (80025dc <HAL_UART_MspInit+0xa8>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d136      	bne.n	80025d2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002564:	2302      	movs	r3, #2
 8002566:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002568:	2300      	movs	r3, #0
 800256a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800256c:	f107 0310 	add.w	r3, r7, #16
 8002570:	4618      	mov	r0, r3
 8002572:	f002 f927 	bl	80047c4 <HAL_RCCEx_PeriphCLKConfig>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800257c:	f7ff feae 	bl	80022dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002580:	4b17      	ldr	r3, [pc, #92]	@ (80025e0 <HAL_UART_MspInit+0xac>)
 8002582:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002584:	4a16      	ldr	r2, [pc, #88]	@ (80025e0 <HAL_UART_MspInit+0xac>)
 8002586:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800258a:	6593      	str	r3, [r2, #88]	@ 0x58
 800258c:	4b14      	ldr	r3, [pc, #80]	@ (80025e0 <HAL_UART_MspInit+0xac>)
 800258e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002590:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002598:	4b11      	ldr	r3, [pc, #68]	@ (80025e0 <HAL_UART_MspInit+0xac>)
 800259a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800259c:	4a10      	ldr	r2, [pc, #64]	@ (80025e0 <HAL_UART_MspInit+0xac>)
 800259e:	f043 0301 	orr.w	r3, r3, #1
 80025a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025a4:	4b0e      	ldr	r3, [pc, #56]	@ (80025e0 <HAL_UART_MspInit+0xac>)
 80025a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	60bb      	str	r3, [r7, #8]
 80025ae:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80025b0:	230c      	movs	r3, #12
 80025b2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b4:	2302      	movs	r3, #2
 80025b6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b8:	2300      	movs	r3, #0
 80025ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025bc:	2300      	movs	r3, #0
 80025be:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025c0:	2307      	movs	r3, #7
 80025c2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025c4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80025c8:	4619      	mov	r1, r3
 80025ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025ce:	f001 f97d 	bl	80038cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80025d2:	bf00      	nop
 80025d4:	3778      	adds	r7, #120	@ 0x78
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	40004400 	.word	0x40004400
 80025e0:	40021000 	.word	0x40021000

080025e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025e8:	bf00      	nop
 80025ea:	e7fd      	b.n	80025e8 <NMI_Handler+0x4>

080025ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025f0:	bf00      	nop
 80025f2:	e7fd      	b.n	80025f0 <HardFault_Handler+0x4>

080025f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025f8:	bf00      	nop
 80025fa:	e7fd      	b.n	80025f8 <MemManage_Handler+0x4>

080025fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002600:	bf00      	nop
 8002602:	e7fd      	b.n	8002600 <BusFault_Handler+0x4>

08002604 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002608:	bf00      	nop
 800260a:	e7fd      	b.n	8002608 <UsageFault_Handler+0x4>

0800260c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002610:	bf00      	nop
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr

0800261a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800261a:	b480      	push	{r7}
 800261c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800261e:	bf00      	nop
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800262c:	bf00      	nop
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr

08002636 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800263a:	f000 f94b 	bl	80028d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800263e:	bf00      	nop
 8002640:	bd80      	pop	{r7, pc}
	...

08002644 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002648:	4802      	ldr	r0, [pc, #8]	@ (8002654 <FDCAN1_IT0_IRQHandler+0x10>)
 800264a:	f000 fed3 	bl	80033f4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800264e:	bf00      	nop
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	20000130 	.word	0x20000130

08002658 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800265c:	4802      	ldr	r0, [pc, #8]	@ (8002668 <FDCAN1_IT1_IRQHandler+0x10>)
 800265e:	f000 fec9 	bl	80033f4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8002662:	bf00      	nop
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	20000130 	.word	0x20000130

0800266c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002670:	4802      	ldr	r0, [pc, #8]	@ (800267c <TIM6_DAC_IRQHandler+0x10>)
 8002672:	f002 fbc5 	bl	8004e00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002676:	bf00      	nop
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	200001f8 	.word	0x200001f8

08002680 <FDCAN3_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 0.
  */
void FDCAN3_IT0_IRQHandler(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 0 */

  /* USER CODE END FDCAN3_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 8002684:	4802      	ldr	r0, [pc, #8]	@ (8002690 <FDCAN3_IT0_IRQHandler+0x10>)
 8002686:	f000 feb5 	bl	80033f4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 1 */

  /* USER CODE END FDCAN3_IT0_IRQn 1 */
}
 800268a:	bf00      	nop
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	20000194 	.word	0x20000194

08002694 <FDCAN3_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 1.
  */
void FDCAN3_IT1_IRQHandler(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT1_IRQn 0 */

  /* USER CODE END FDCAN3_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 8002698:	4802      	ldr	r0, [pc, #8]	@ (80026a4 <FDCAN3_IT1_IRQHandler+0x10>)
 800269a:	f000 feab 	bl	80033f4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT1_IRQn 1 */

  /* USER CODE END FDCAN3_IT1_IRQn 1 */
}
 800269e:	bf00      	nop
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	20000194 	.word	0x20000194

080026a8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026b4:	2300      	movs	r3, #0
 80026b6:	617b      	str	r3, [r7, #20]
 80026b8:	e00a      	b.n	80026d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026ba:	f3af 8000 	nop.w
 80026be:	4601      	mov	r1, r0
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	1c5a      	adds	r2, r3, #1
 80026c4:	60ba      	str	r2, [r7, #8]
 80026c6:	b2ca      	uxtb	r2, r1
 80026c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	3301      	adds	r3, #1
 80026ce:	617b      	str	r3, [r7, #20]
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	dbf0      	blt.n	80026ba <_read+0x12>
  }

  return len;
 80026d8:	687b      	ldr	r3, [r7, #4]
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3718      	adds	r7, #24
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b083      	sub	sp, #12
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026fa:	b480      	push	{r7}
 80026fc:	b083      	sub	sp, #12
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
 8002702:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800270a:	605a      	str	r2, [r3, #4]
  return 0;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr

0800271a <_isatty>:

int _isatty(int file)
{
 800271a:	b480      	push	{r7}
 800271c:	b083      	sub	sp, #12
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002722:	2301      	movs	r3, #1
}
 8002724:	4618      	mov	r0, r3
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3714      	adds	r7, #20
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
	...

0800274c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002754:	4a14      	ldr	r2, [pc, #80]	@ (80027a8 <_sbrk+0x5c>)
 8002756:	4b15      	ldr	r3, [pc, #84]	@ (80027ac <_sbrk+0x60>)
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002760:	4b13      	ldr	r3, [pc, #76]	@ (80027b0 <_sbrk+0x64>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d102      	bne.n	800276e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002768:	4b11      	ldr	r3, [pc, #68]	@ (80027b0 <_sbrk+0x64>)
 800276a:	4a12      	ldr	r2, [pc, #72]	@ (80027b4 <_sbrk+0x68>)
 800276c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800276e:	4b10      	ldr	r3, [pc, #64]	@ (80027b0 <_sbrk+0x64>)
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4413      	add	r3, r2
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	429a      	cmp	r2, r3
 800277a:	d207      	bcs.n	800278c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800277c:	f004 f858 	bl	8006830 <__errno>
 8002780:	4603      	mov	r3, r0
 8002782:	220c      	movs	r2, #12
 8002784:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002786:	f04f 33ff 	mov.w	r3, #4294967295
 800278a:	e009      	b.n	80027a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800278c:	4b08      	ldr	r3, [pc, #32]	@ (80027b0 <_sbrk+0x64>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002792:	4b07      	ldr	r3, [pc, #28]	@ (80027b0 <_sbrk+0x64>)
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4413      	add	r3, r2
 800279a:	4a05      	ldr	r2, [pc, #20]	@ (80027b0 <_sbrk+0x64>)
 800279c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800279e:	68fb      	ldr	r3, [r7, #12]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3718      	adds	r7, #24
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	20020000 	.word	0x20020000
 80027ac:	00000400 	.word	0x00000400
 80027b0:	200003a4 	.word	0x200003a4
 80027b4:	200004f8 	.word	0x200004f8

080027b8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80027bc:	4b06      	ldr	r3, [pc, #24]	@ (80027d8 <SystemInit+0x20>)
 80027be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027c2:	4a05      	ldr	r2, [pc, #20]	@ (80027d8 <SystemInit+0x20>)
 80027c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027cc:	bf00      	nop
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	e000ed00 	.word	0xe000ed00

080027dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80027dc:	480d      	ldr	r0, [pc, #52]	@ (8002814 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80027de:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80027e0:	f7ff ffea 	bl	80027b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027e4:	480c      	ldr	r0, [pc, #48]	@ (8002818 <LoopForever+0x6>)
  ldr r1, =_edata
 80027e6:	490d      	ldr	r1, [pc, #52]	@ (800281c <LoopForever+0xa>)
  ldr r2, =_sidata
 80027e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002820 <LoopForever+0xe>)
  movs r3, #0
 80027ea:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80027ec:	e002      	b.n	80027f4 <LoopCopyDataInit>

080027ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027f2:	3304      	adds	r3, #4

080027f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027f8:	d3f9      	bcc.n	80027ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002824 <LoopForever+0x12>)
  ldr r4, =_ebss
 80027fc:	4c0a      	ldr	r4, [pc, #40]	@ (8002828 <LoopForever+0x16>)
  movs r3, #0
 80027fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002800:	e001      	b.n	8002806 <LoopFillZerobss>

08002802 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002802:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002804:	3204      	adds	r2, #4

08002806 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002806:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002808:	d3fb      	bcc.n	8002802 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800280a:	f004 f817 	bl	800683c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800280e:	f7ff fa5b 	bl	8001cc8 <main>

08002812 <LoopForever>:

LoopForever:
    b LoopForever
 8002812:	e7fe      	b.n	8002812 <LoopForever>
  ldr   r0, =_estack
 8002814:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002818:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800281c:	20000114 	.word	0x20000114
  ldr r2, =_sidata
 8002820:	08008770 	.word	0x08008770
  ldr r2, =_sbss
 8002824:	20000114 	.word	0x20000114
  ldr r4, =_ebss
 8002828:	200004f8 	.word	0x200004f8

0800282c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800282c:	e7fe      	b.n	800282c <ADC1_2_IRQHandler>

0800282e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b082      	sub	sp, #8
 8002832:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002834:	2300      	movs	r3, #0
 8002836:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002838:	2003      	movs	r0, #3
 800283a:	f000 f95b 	bl	8002af4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800283e:	200f      	movs	r0, #15
 8002840:	f000 f80e 	bl	8002860 <HAL_InitTick>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d002      	beq.n	8002850 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	71fb      	strb	r3, [r7, #7]
 800284e:	e001      	b.n	8002854 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002850:	f7ff fd56 	bl	8002300 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002854:	79fb      	ldrb	r3, [r7, #7]

}
 8002856:	4618      	mov	r0, r3
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
	...

08002860 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002868:	2300      	movs	r3, #0
 800286a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800286c:	4b16      	ldr	r3, [pc, #88]	@ (80028c8 <HAL_InitTick+0x68>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d022      	beq.n	80028ba <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002874:	4b15      	ldr	r3, [pc, #84]	@ (80028cc <HAL_InitTick+0x6c>)
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	4b13      	ldr	r3, [pc, #76]	@ (80028c8 <HAL_InitTick+0x68>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002880:	fbb1 f3f3 	udiv	r3, r1, r3
 8002884:	fbb2 f3f3 	udiv	r3, r2, r3
 8002888:	4618      	mov	r0, r3
 800288a:	f000 f966 	bl	8002b5a <HAL_SYSTICK_Config>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10f      	bne.n	80028b4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b0f      	cmp	r3, #15
 8002898:	d809      	bhi.n	80028ae <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800289a:	2200      	movs	r2, #0
 800289c:	6879      	ldr	r1, [r7, #4]
 800289e:	f04f 30ff 	mov.w	r0, #4294967295
 80028a2:	f000 f932 	bl	8002b0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80028a6:	4a0a      	ldr	r2, [pc, #40]	@ (80028d0 <HAL_InitTick+0x70>)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6013      	str	r3, [r2, #0]
 80028ac:	e007      	b.n	80028be <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	73fb      	strb	r3, [r7, #15]
 80028b2:	e004      	b.n	80028be <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	73fb      	strb	r3, [r7, #15]
 80028b8:	e001      	b.n	80028be <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80028be:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	200000b4 	.word	0x200000b4
 80028cc:	200000ac 	.word	0x200000ac
 80028d0:	200000b0 	.word	0x200000b0

080028d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028d8:	4b05      	ldr	r3, [pc, #20]	@ (80028f0 <HAL_IncTick+0x1c>)
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	4b05      	ldr	r3, [pc, #20]	@ (80028f4 <HAL_IncTick+0x20>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4413      	add	r3, r2
 80028e2:	4a03      	ldr	r2, [pc, #12]	@ (80028f0 <HAL_IncTick+0x1c>)
 80028e4:	6013      	str	r3, [r2, #0]
}
 80028e6:	bf00      	nop
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	200003a8 	.word	0x200003a8
 80028f4:	200000b4 	.word	0x200000b4

080028f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  return uwTick;
 80028fc:	4b03      	ldr	r3, [pc, #12]	@ (800290c <HAL_GetTick+0x14>)
 80028fe:	681b      	ldr	r3, [r3, #0]
}
 8002900:	4618      	mov	r0, r3
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	200003a8 	.word	0x200003a8

08002910 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002918:	f7ff ffee 	bl	80028f8 <HAL_GetTick>
 800291c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002928:	d004      	beq.n	8002934 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800292a:	4b09      	ldr	r3, [pc, #36]	@ (8002950 <HAL_Delay+0x40>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	4413      	add	r3, r2
 8002932:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002934:	bf00      	nop
 8002936:	f7ff ffdf 	bl	80028f8 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	429a      	cmp	r2, r3
 8002944:	d8f7      	bhi.n	8002936 <HAL_Delay+0x26>
  {
  }
}
 8002946:	bf00      	nop
 8002948:	bf00      	nop
 800294a:	3710      	adds	r7, #16
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	200000b4 	.word	0x200000b4

08002954 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002964:	4b0c      	ldr	r3, [pc, #48]	@ (8002998 <__NVIC_SetPriorityGrouping+0x44>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800296a:	68ba      	ldr	r2, [r7, #8]
 800296c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002970:	4013      	ands	r3, r2
 8002972:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800297c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002980:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002984:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002986:	4a04      	ldr	r2, [pc, #16]	@ (8002998 <__NVIC_SetPriorityGrouping+0x44>)
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	60d3      	str	r3, [r2, #12]
}
 800298c:	bf00      	nop
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	e000ed00 	.word	0xe000ed00

0800299c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029a0:	4b04      	ldr	r3, [pc, #16]	@ (80029b4 <__NVIC_GetPriorityGrouping+0x18>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	0a1b      	lsrs	r3, r3, #8
 80029a6:	f003 0307 	and.w	r3, r3, #7
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr
 80029b4:	e000ed00 	.word	0xe000ed00

080029b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	4603      	mov	r3, r0
 80029c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	db0b      	blt.n	80029e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029ca:	79fb      	ldrb	r3, [r7, #7]
 80029cc:	f003 021f 	and.w	r2, r3, #31
 80029d0:	4907      	ldr	r1, [pc, #28]	@ (80029f0 <__NVIC_EnableIRQ+0x38>)
 80029d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d6:	095b      	lsrs	r3, r3, #5
 80029d8:	2001      	movs	r0, #1
 80029da:	fa00 f202 	lsl.w	r2, r0, r2
 80029de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	e000e100 	.word	0xe000e100

080029f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	4603      	mov	r3, r0
 80029fc:	6039      	str	r1, [r7, #0]
 80029fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	db0a      	blt.n	8002a1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	490c      	ldr	r1, [pc, #48]	@ (8002a40 <__NVIC_SetPriority+0x4c>)
 8002a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a12:	0112      	lsls	r2, r2, #4
 8002a14:	b2d2      	uxtb	r2, r2
 8002a16:	440b      	add	r3, r1
 8002a18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a1c:	e00a      	b.n	8002a34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	4908      	ldr	r1, [pc, #32]	@ (8002a44 <__NVIC_SetPriority+0x50>)
 8002a24:	79fb      	ldrb	r3, [r7, #7]
 8002a26:	f003 030f 	and.w	r3, r3, #15
 8002a2a:	3b04      	subs	r3, #4
 8002a2c:	0112      	lsls	r2, r2, #4
 8002a2e:	b2d2      	uxtb	r2, r2
 8002a30:	440b      	add	r3, r1
 8002a32:	761a      	strb	r2, [r3, #24]
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	e000e100 	.word	0xe000e100
 8002a44:	e000ed00 	.word	0xe000ed00

08002a48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b089      	sub	sp, #36	@ 0x24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	f1c3 0307 	rsb	r3, r3, #7
 8002a62:	2b04      	cmp	r3, #4
 8002a64:	bf28      	it	cs
 8002a66:	2304      	movcs	r3, #4
 8002a68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	3304      	adds	r3, #4
 8002a6e:	2b06      	cmp	r3, #6
 8002a70:	d902      	bls.n	8002a78 <NVIC_EncodePriority+0x30>
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	3b03      	subs	r3, #3
 8002a76:	e000      	b.n	8002a7a <NVIC_EncodePriority+0x32>
 8002a78:	2300      	movs	r3, #0
 8002a7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	43da      	mvns	r2, r3
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	401a      	ands	r2, r3
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a90:	f04f 31ff 	mov.w	r1, #4294967295
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9a:	43d9      	mvns	r1, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa0:	4313      	orrs	r3, r2
         );
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3724      	adds	r7, #36	@ 0x24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
	...

08002ab0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	3b01      	subs	r3, #1
 8002abc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ac0:	d301      	bcc.n	8002ac6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e00f      	b.n	8002ae6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ac6:	4a0a      	ldr	r2, [pc, #40]	@ (8002af0 <SysTick_Config+0x40>)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	3b01      	subs	r3, #1
 8002acc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ace:	210f      	movs	r1, #15
 8002ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad4:	f7ff ff8e 	bl	80029f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ad8:	4b05      	ldr	r3, [pc, #20]	@ (8002af0 <SysTick_Config+0x40>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ade:	4b04      	ldr	r3, [pc, #16]	@ (8002af0 <SysTick_Config+0x40>)
 8002ae0:	2207      	movs	r2, #7
 8002ae2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	e000e010 	.word	0xe000e010

08002af4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f7ff ff29 	bl	8002954 <__NVIC_SetPriorityGrouping>
}
 8002b02:	bf00      	nop
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b086      	sub	sp, #24
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	4603      	mov	r3, r0
 8002b12:	60b9      	str	r1, [r7, #8]
 8002b14:	607a      	str	r2, [r7, #4]
 8002b16:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b18:	f7ff ff40 	bl	800299c <__NVIC_GetPriorityGrouping>
 8002b1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	68b9      	ldr	r1, [r7, #8]
 8002b22:	6978      	ldr	r0, [r7, #20]
 8002b24:	f7ff ff90 	bl	8002a48 <NVIC_EncodePriority>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b2e:	4611      	mov	r1, r2
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff ff5f 	bl	80029f4 <__NVIC_SetPriority>
}
 8002b36:	bf00      	nop
 8002b38:	3718      	adds	r7, #24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b082      	sub	sp, #8
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	4603      	mov	r3, r0
 8002b46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff ff33 	bl	80029b8 <__NVIC_EnableIRQ>
}
 8002b52:	bf00      	nop
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b082      	sub	sp, #8
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f7ff ffa4 	bl	8002ab0 <SysTick_Config>
 8002b68:	4603      	mov	r3, r0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
	...

08002b74 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e147      	b.n	8002e16 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d106      	bne.n	8002ba0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7ff fbd4 	bl	8002348 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	699a      	ldr	r2, [r3, #24]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 0210 	bic.w	r2, r2, #16
 8002bae:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bb0:	f7ff fea2 	bl	80028f8 <HAL_GetTick>
 8002bb4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002bb6:	e012      	b.n	8002bde <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002bb8:	f7ff fe9e 	bl	80028f8 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b0a      	cmp	r3, #10
 8002bc4:	d90b      	bls.n	8002bde <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bca:	f043 0201 	orr.w	r2, r3, #1
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2203      	movs	r2, #3
 8002bd6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e11b      	b.n	8002e16 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	f003 0308 	and.w	r3, r3, #8
 8002be8:	2b08      	cmp	r3, #8
 8002bea:	d0e5      	beq.n	8002bb8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	699a      	ldr	r2, [r3, #24]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 0201 	orr.w	r2, r2, #1
 8002bfa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bfc:	f7ff fe7c 	bl	80028f8 <HAL_GetTick>
 8002c00:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002c02:	e012      	b.n	8002c2a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002c04:	f7ff fe78 	bl	80028f8 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b0a      	cmp	r3, #10
 8002c10:	d90b      	bls.n	8002c2a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c16:	f043 0201 	orr.w	r2, r3, #1
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2203      	movs	r2, #3
 8002c22:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e0f5      	b.n	8002e16 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0e5      	beq.n	8002c04 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	699a      	ldr	r2, [r3, #24]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f042 0202 	orr.w	r2, r2, #2
 8002c46:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a74      	ldr	r2, [pc, #464]	@ (8002e20 <HAL_FDCAN_Init+0x2ac>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d103      	bne.n	8002c5a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8002c52:	4a74      	ldr	r2, [pc, #464]	@ (8002e24 <HAL_FDCAN_Init+0x2b0>)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	7c1b      	ldrb	r3, [r3, #16]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d108      	bne.n	8002c74 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	699a      	ldr	r2, [r3, #24]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c70:	619a      	str	r2, [r3, #24]
 8002c72:	e007      	b.n	8002c84 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	699a      	ldr	r2, [r3, #24]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c82:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	7c5b      	ldrb	r3, [r3, #17]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d108      	bne.n	8002c9e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	699a      	ldr	r2, [r3, #24]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c9a:	619a      	str	r2, [r3, #24]
 8002c9c:	e007      	b.n	8002cae <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	699a      	ldr	r2, [r3, #24]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002cac:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	7c9b      	ldrb	r3, [r3, #18]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d108      	bne.n	8002cc8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	699a      	ldr	r2, [r3, #24]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002cc4:	619a      	str	r2, [r3, #24]
 8002cc6:	e007      	b.n	8002cd8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	699a      	ldr	r2, [r3, #24]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002cd6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	689a      	ldr	r2, [r3, #8]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	699a      	ldr	r2, [r3, #24]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8002cfc:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	691a      	ldr	r2, [r3, #16]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f022 0210 	bic.w	r2, r2, #16
 8002d0c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d108      	bne.n	8002d28 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	699a      	ldr	r2, [r3, #24]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f042 0204 	orr.w	r2, r2, #4
 8002d24:	619a      	str	r2, [r3, #24]
 8002d26:	e02c      	b.n	8002d82 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d028      	beq.n	8002d82 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d01c      	beq.n	8002d72 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	699a      	ldr	r2, [r3, #24]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002d46:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	691a      	ldr	r2, [r3, #16]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f042 0210 	orr.w	r2, r2, #16
 8002d56:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	2b03      	cmp	r3, #3
 8002d5e:	d110      	bne.n	8002d82 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	699a      	ldr	r2, [r3, #24]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f042 0220 	orr.w	r2, r2, #32
 8002d6e:	619a      	str	r2, [r3, #24]
 8002d70:	e007      	b.n	8002d82 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	699a      	ldr	r2, [r3, #24]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f042 0220 	orr.w	r2, r2, #32
 8002d80:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002d92:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a1b      	ldr	r3, [r3, #32]
 8002d98:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002d9a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	3b01      	subs	r3, #1
 8002da4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002daa:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002dac:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002db6:	d115      	bne.n	8002de4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dbc:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002dc6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002dd0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002de0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002de2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 fc7e 	bl	80036fc <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	40006400 	.word	0x40006400
 8002e24:	40006500 	.word	0x40006500

08002e28 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b087      	sub	sp, #28
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002e38:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002e3a:	7dfb      	ldrb	r3, [r7, #23]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d002      	beq.n	8002e46 <HAL_FDCAN_ConfigFilter+0x1e>
 8002e40:	7dfb      	ldrb	r3, [r7, #23]
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d13d      	bne.n	8002ec2 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d119      	bne.n	8002e82 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002e5a:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8002e62:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	4413      	add	r3, r2
 8002e78:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	e01d      	b.n	8002ebe <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	075a      	lsls	r2, r3, #29
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	079a      	lsls	r2, r3, #30
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	4413      	add	r3, r2
 8002eaa:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	3304      	adds	r3, #4
 8002eb6:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	e006      	b.n	8002ed0 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ec6:	f043 0202 	orr.w	r2, r3, #2
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
  }
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	371c      	adds	r7, #28
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
 8002ee8:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d116      	bne.n	8002f24 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002efe:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	011a      	lsls	r2, r3, #4
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	431a      	orrs	r2, r3
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	431a      	orrs	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8002f20:	2300      	movs	r3, #0
 8002f22:	e006      	b.n	8002f32 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f28:	f043 0204 	orr.w	r2, r3, #4
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
  }
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3714      	adds	r7, #20
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b083      	sub	sp, #12
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d110      	bne.n	8002f74 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2202      	movs	r2, #2
 8002f56:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	699a      	ldr	r2, [r3, #24]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 0201 	bic.w	r2, r2, #1
 8002f68:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8002f70:	2300      	movs	r3, #0
 8002f72:	e006      	b.n	8002f82 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f78:	f043 0204 	orr.w	r2, r3, #4
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
  }
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr

08002f8e <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b086      	sub	sp, #24
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	60f8      	str	r0, [r7, #12]
 8002f96:	60b9      	str	r1, [r7, #8]
 8002f98:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d12c      	bne.n	8003000 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002fae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d007      	beq.n	8002fc6 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fba:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e023      	b.n	800300e <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002fce:	0c1b      	lsrs	r3, r3, #16
 8002fd0:	f003 0303 	and.w	r3, r3, #3
 8002fd4:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	68b9      	ldr	r1, [r7, #8]
 8002fdc:	68f8      	ldr	r0, [r7, #12]
 8002fde:	f000 fbf9 	bl	80037d4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	fa01 f202 	lsl.w	r2, r1, r2
 8002fee:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	409a      	lsls	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	e006      	b.n	800300e <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003004:	f043 0208 	orr.w	r2, r3, #8
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
  }
}
 800300e:	4618      	mov	r0, r3
 8003010:	3718      	adds	r7, #24
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
	...

08003018 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8003018:	b480      	push	{r7}
 800301a:	b08b      	sub	sp, #44	@ 0x2c
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]
 8003024:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8003026:	2300      	movs	r3, #0
 8003028:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003030:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8003032:	7efb      	ldrb	r3, [r7, #27]
 8003034:	2b02      	cmp	r3, #2
 8003036:	f040 80e8 	bne.w	800320a <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	2b40      	cmp	r3, #64	@ 0x40
 800303e:	d137      	bne.n	80030b0 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003048:	f003 030f 	and.w	r3, r3, #15
 800304c:	2b00      	cmp	r3, #0
 800304e:	d107      	bne.n	8003060 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003054:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e0db      	b.n	8003218 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003068:	0e1b      	lsrs	r3, r3, #24
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b01      	cmp	r3, #1
 8003070:	d10a      	bne.n	8003088 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800307a:	0a5b      	lsrs	r3, r3, #9
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	2b01      	cmp	r3, #1
 8003082:	d101      	bne.n	8003088 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003084:	2301      	movs	r3, #1
 8003086:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003090:	0a1b      	lsrs	r3, r3, #8
 8003092:	f003 0303 	and.w	r3, r3, #3
 8003096:	69fa      	ldr	r2, [r7, #28]
 8003098:	4413      	add	r3, r2
 800309a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80030a0:	69fa      	ldr	r2, [r7, #28]
 80030a2:	4613      	mov	r3, r2
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	4413      	add	r3, r2
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	440b      	add	r3, r1
 80030ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80030ae:	e036      	b.n	800311e <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80030b8:	f003 030f 	and.w	r3, r3, #15
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d107      	bne.n	80030d0 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030c4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e0a3      	b.n	8003218 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80030d8:	0e1b      	lsrs	r3, r3, #24
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d10a      	bne.n	80030f8 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030ea:	0a1b      	lsrs	r3, r3, #8
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d101      	bne.n	80030f8 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80030f4:	2301      	movs	r3, #1
 80030f6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003100:	0a1b      	lsrs	r3, r3, #8
 8003102:	f003 0303 	and.w	r3, r3, #3
 8003106:	69fa      	ldr	r2, [r7, #28]
 8003108:	4413      	add	r3, r2
 800310a:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8003110:	69fa      	ldr	r2, [r7, #28]
 8003112:	4613      	mov	r3, r2
 8003114:	00db      	lsls	r3, r3, #3
 8003116:	4413      	add	r3, r2
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	440b      	add	r3, r1
 800311c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800311e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d107      	bne.n	8003142 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8003132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	0c9b      	lsrs	r3, r3, #18
 8003138:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	601a      	str	r2, [r3, #0]
 8003140:	e005      	b.n	800314e <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800314e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800315a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8003166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003168:	3304      	adds	r3, #4
 800316a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800316c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	b29a      	uxth	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8003176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	0c1b      	lsrs	r3, r3, #16
 800317c:	f003 020f 	and.w	r2, r3, #15
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8003184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8003190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800319c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	0e1b      	lsrs	r3, r3, #24
 80031a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80031aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	0fda      	lsrs	r2, r3, #31
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80031b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b6:	3304      	adds	r3, #4
 80031b8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80031ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031bc:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80031be:	2300      	movs	r3, #0
 80031c0:	623b      	str	r3, [r7, #32]
 80031c2:	e00a      	b.n	80031da <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	6a3b      	ldr	r3, [r7, #32]
 80031c8:	441a      	add	r2, r3
 80031ca:	6839      	ldr	r1, [r7, #0]
 80031cc:	6a3b      	ldr	r3, [r7, #32]
 80031ce:	440b      	add	r3, r1
 80031d0:	7812      	ldrb	r2, [r2, #0]
 80031d2:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80031d4:	6a3b      	ldr	r3, [r7, #32]
 80031d6:	3301      	adds	r3, #1
 80031d8:	623b      	str	r3, [r7, #32]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	4a11      	ldr	r2, [pc, #68]	@ (8003224 <HAL_FDCAN_GetRxMessage+0x20c>)
 80031e0:	5cd3      	ldrb	r3, [r2, r3]
 80031e2:	461a      	mov	r2, r3
 80031e4:	6a3b      	ldr	r3, [r7, #32]
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d3ec      	bcc.n	80031c4 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	2b40      	cmp	r3, #64	@ 0x40
 80031ee:	d105      	bne.n	80031fc <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	69fa      	ldr	r2, [r7, #28]
 80031f6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80031fa:	e004      	b.n	8003206 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	69fa      	ldr	r2, [r7, #28]
 8003202:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8003206:	2300      	movs	r3, #0
 8003208:	e006      	b.n	8003218 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800320e:	f043 0208 	orr.w	r2, r3, #8
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
  }
}
 8003218:	4618      	mov	r0, r3
 800321a:	372c      	adds	r7, #44	@ 0x2c
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr
 8003224:	08008518 	.word	0x08008518

08003228 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8003228:	b480      	push	{r7}
 800322a:	b087      	sub	sp, #28
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800323a:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800323c:	7dfb      	ldrb	r3, [r7, #23]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d003      	beq.n	800324a <HAL_FDCAN_ActivateNotification+0x22>
 8003242:	7dfb      	ldrb	r3, [r7, #23]
 8003244:	2b02      	cmp	r3, #2
 8003246:	f040 80c8 	bne.w	80033da <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003250:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	2b00      	cmp	r3, #0
 800325a:	d004      	beq.n	8003266 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d03b      	beq.n	80032de <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800326c:	2b00      	cmp	r3, #0
 800326e:	d004      	beq.n	800327a <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d031      	beq.n	80032de <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003280:	2b00      	cmp	r3, #0
 8003282:	d004      	beq.n	800328e <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	f003 0304 	and.w	r3, r3, #4
 800328a:	2b00      	cmp	r3, #0
 800328c:	d027      	beq.n	80032de <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8003294:	2b00      	cmp	r3, #0
 8003296:	d004      	beq.n	80032a2 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	f003 0308 	and.w	r3, r3, #8
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d01d      	beq.n	80032de <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d004      	beq.n	80032b6 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	f003 0310 	and.w	r3, r3, #16
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d013      	beq.n	80032de <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d004      	beq.n	80032ca <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	f003 0320 	and.w	r3, r3, #32
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d009      	beq.n	80032de <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00c      	beq.n	80032ee <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d107      	bne.n	80032ee <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f042 0201 	orr.w	r2, r2, #1
 80032ec:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	f003 0307 	and.w	r3, r3, #7
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d004      	beq.n	8003302 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d13b      	bne.n	800337a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003308:	2b00      	cmp	r3, #0
 800330a:	d004      	beq.n	8003316 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d131      	bne.n	800337a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800331c:	2b00      	cmp	r3, #0
 800331e:	d004      	beq.n	800332a <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	f003 0304 	and.w	r3, r3, #4
 8003326:	2b00      	cmp	r3, #0
 8003328:	d127      	bne.n	800337a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003330:	2b00      	cmp	r3, #0
 8003332:	d004      	beq.n	800333e <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	f003 0308 	and.w	r3, r3, #8
 800333a:	2b00      	cmp	r3, #0
 800333c:	d11d      	bne.n	800337a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003344:	2b00      	cmp	r3, #0
 8003346:	d004      	beq.n	8003352 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	f003 0310 	and.w	r3, r3, #16
 800334e:	2b00      	cmp	r3, #0
 8003350:	d113      	bne.n	800337a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003358:	2b00      	cmp	r3, #0
 800335a:	d004      	beq.n	8003366 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	f003 0320 	and.w	r3, r3, #32
 8003362:	2b00      	cmp	r3, #0
 8003364:	d109      	bne.n	800337a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00c      	beq.n	800338a <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003376:	2b00      	cmp	r3, #0
 8003378:	d007      	beq.n	800338a <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f042 0202 	orr.w	r2, r2, #2
 8003388:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003390:	2b00      	cmp	r3, #0
 8003392:	d009      	beq.n	80033a8 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	430a      	orrs	r2, r1
 80033a4:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d009      	beq.n	80033c6 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	430a      	orrs	r2, r1
 80033c2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68ba      	ldr	r2, [r7, #8]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 80033d6:	2300      	movs	r3, #0
 80033d8:	e006      	b.n	80033e8 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033de:	f043 0202 	orr.w	r2, r3, #2
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
  }
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	371c      	adds	r7, #28
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b08c      	sub	sp, #48	@ 0x30
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003402:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8003406:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800340e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003410:	4013      	ands	r3, r2
 8003412:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800341a:	f003 0307 	and.w	r3, r3, #7
 800341e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003426:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003428:	4013      	ands	r3, r2
 800342a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003432:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003436:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800343e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003440:	4013      	ands	r3, r2
 8003442:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800344a:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 800344e:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003456:	6a3a      	ldr	r2, [r7, #32]
 8003458:	4013      	ands	r3, r2
 800345a:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003462:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003466:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800346e:	69fa      	ldr	r2, [r7, #28]
 8003470:	4013      	ands	r3, r2
 8003472:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800347a:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003482:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00b      	beq.n	80034a6 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003494:	2b00      	cmp	r3, #0
 8003496:	d006      	beq.n	80034a6 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2240      	movs	r2, #64	@ 0x40
 800349e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 f90b 	bl	80036bc <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d019      	beq.n	80034e4 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d014      	beq.n	80034e4 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80034c2:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034cc:	693a      	ldr	r2, [r7, #16]
 80034ce:	4013      	ands	r3, r2
 80034d0:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80034da:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80034dc:	6939      	ldr	r1, [r7, #16]
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f8cd 	bl	800367e <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80034e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d007      	beq.n	80034fa <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034f0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80034f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 f8a2 	bl	800363e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80034fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d007      	beq.n	8003510 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003506:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003508:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f7fd ff38 	bl	8001380 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8003510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003512:	2b00      	cmp	r3, #0
 8003514:	d007      	beq.n	8003526 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800351c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800351e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f7fd ffa5 	bl	8001470 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00c      	beq.n	800354a <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003536:	2b00      	cmp	r3, #0
 8003538:	d007      	beq.n	800354a <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003542:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 f885 	bl	8003654 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003550:	2b00      	cmp	r3, #0
 8003552:	d018      	beq.n	8003586 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800355a:	2b00      	cmp	r3, #0
 800355c:	d013      	beq.n	8003586 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003566:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	4013      	ands	r3, r2
 8003574:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2280      	movs	r2, #128	@ 0x80
 800357c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800357e:	68f9      	ldr	r1, [r7, #12]
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f000 f871 	bl	8003668 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00c      	beq.n	80035aa <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d007      	beq.n	80035aa <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80035a2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 f875 	bl	8003694 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00c      	beq.n	80035ce <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d007      	beq.n	80035ce <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80035c6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 f86d 	bl	80036a8 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00f      	beq.n	80035f8 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00a      	beq.n	80035f8 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80035ea:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035f0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d007      	beq.n	800360e <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	69fa      	ldr	r2, [r7, #28]
 8003604:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8003606:	69f9      	ldr	r1, [r7, #28]
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 f86b 	bl	80036e4 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d009      	beq.n	8003628 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6a3a      	ldr	r2, [r7, #32]
 800361a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003620:	6a3b      	ldr	r3, [r7, #32]
 8003622:	431a      	orrs	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800362c:	2b00      	cmp	r3, #0
 800362e:	d002      	beq.n	8003636 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 f84d 	bl	80036d0 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8003636:	bf00      	nop
 8003638:	3730      	adds	r7, #48	@ 0x30
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800363e:	b480      	push	{r7}
 8003640:	b083      	sub	sp, #12
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
 8003646:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8003672:	bf00      	nop
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr

0800367e <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800367e:	b480      	push	{r7}
 8003680:	b083      	sub	sp, #12
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
 8003686:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80036ee:	bf00      	nop
 80036f0:	370c      	adds	r7, #12
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
	...

080036fc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003704:	4b30      	ldr	r3, [pc, #192]	@ (80037c8 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8003706:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a2f      	ldr	r2, [pc, #188]	@ (80037cc <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d103      	bne.n	800371a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8003718:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a2c      	ldr	r2, [pc, #176]	@ (80037d0 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d103      	bne.n	800372c <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 800372a:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68ba      	ldr	r2, [r7, #8]
 8003730:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800373a:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003742:	041a      	lsls	r2, r3, #16
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	430a      	orrs	r2, r1
 800374a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003760:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003768:	061a      	lsls	r2, r3, #24
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	430a      	orrs	r2, r1
 8003770:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	60fb      	str	r3, [r7, #12]
 80037a0:	e005      	b.n	80037ae <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	3304      	adds	r3, #4
 80037ac:	60fb      	str	r3, [r7, #12]
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d3f3      	bcc.n	80037a2 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80037ba:	bf00      	nop
 80037bc:	bf00      	nop
 80037be:	3714      	adds	r7, #20
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr
 80037c8:	4000a400 	.word	0x4000a400
 80037cc:	40006800 	.word	0x40006800
 80037d0:	40006c00 	.word	0x40006c00

080037d4 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b089      	sub	sp, #36	@ 0x24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
 80037e0:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d10a      	bne.n	8003800 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80037f2:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80037fa:	4313      	orrs	r3, r2
 80037fc:	61fb      	str	r3, [r7, #28]
 80037fe:	e00a      	b.n	8003816 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8003808:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800380e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003810:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003814:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003820:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8003826:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800382c:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003834:	4313      	orrs	r3, r2
 8003836:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	4613      	mov	r3, r2
 8003840:	00db      	lsls	r3, r3, #3
 8003842:	4413      	add	r3, r2
 8003844:	00db      	lsls	r3, r3, #3
 8003846:	440b      	add	r3, r1
 8003848:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	69fa      	ldr	r2, [r7, #28]
 800384e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	3304      	adds	r3, #4
 8003854:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	3304      	adds	r3, #4
 8003860:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003862:	2300      	movs	r3, #0
 8003864:	617b      	str	r3, [r7, #20]
 8003866:	e020      	b.n	80038aa <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	3303      	adds	r3, #3
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	4413      	add	r3, r2
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	3302      	adds	r3, #2
 8003878:	6879      	ldr	r1, [r7, #4]
 800387a:	440b      	add	r3, r1
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003880:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	3301      	adds	r3, #1
 8003886:	6879      	ldr	r1, [r7, #4]
 8003888:	440b      	add	r3, r1
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800388e:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8003890:	6879      	ldr	r1, [r7, #4]
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	440a      	add	r2, r1
 8003896:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003898:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	3304      	adds	r3, #4
 80038a2:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	3304      	adds	r3, #4
 80038a8:	617b      	str	r3, [r7, #20]
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	4a06      	ldr	r2, [pc, #24]	@ (80038c8 <FDCAN_CopyMessageToRAM+0xf4>)
 80038b0:	5cd3      	ldrb	r3, [r2, r3]
 80038b2:	461a      	mov	r2, r3
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d3d6      	bcc.n	8003868 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 80038ba:	bf00      	nop
 80038bc:	bf00      	nop
 80038be:	3724      	adds	r7, #36	@ 0x24
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr
 80038c8:	08008518 	.word	0x08008518

080038cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b087      	sub	sp, #28
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80038d6:	2300      	movs	r3, #0
 80038d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80038da:	e15a      	b.n	8003b92 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	2101      	movs	r1, #1
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	fa01 f303 	lsl.w	r3, r1, r3
 80038e8:	4013      	ands	r3, r2
 80038ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f000 814c 	beq.w	8003b8c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f003 0303 	and.w	r3, r3, #3
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d005      	beq.n	800390c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003908:	2b02      	cmp	r3, #2
 800390a:	d130      	bne.n	800396e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	2203      	movs	r2, #3
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	43db      	mvns	r3, r3
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	4013      	ands	r3, r2
 8003922:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	68da      	ldr	r2, [r3, #12]
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	4313      	orrs	r3, r2
 8003934:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003942:	2201      	movs	r2, #1
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	fa02 f303 	lsl.w	r3, r2, r3
 800394a:	43db      	mvns	r3, r3
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	4013      	ands	r3, r2
 8003950:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	091b      	lsrs	r3, r3, #4
 8003958:	f003 0201 	and.w	r2, r3, #1
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	fa02 f303 	lsl.w	r3, r2, r3
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	4313      	orrs	r3, r2
 8003966:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f003 0303 	and.w	r3, r3, #3
 8003976:	2b03      	cmp	r3, #3
 8003978:	d017      	beq.n	80039aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	2203      	movs	r2, #3
 8003986:	fa02 f303 	lsl.w	r3, r2, r3
 800398a:	43db      	mvns	r3, r3
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	4013      	ands	r3, r2
 8003990:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	689a      	ldr	r2, [r3, #8]
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	fa02 f303 	lsl.w	r3, r2, r3
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f003 0303 	and.w	r3, r3, #3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d123      	bne.n	80039fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	08da      	lsrs	r2, r3, #3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	3208      	adds	r2, #8
 80039be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	f003 0307 	and.w	r3, r3, #7
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	220f      	movs	r2, #15
 80039ce:	fa02 f303 	lsl.w	r3, r2, r3
 80039d2:	43db      	mvns	r3, r3
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	4013      	ands	r3, r2
 80039d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	691a      	ldr	r2, [r3, #16]
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	f003 0307 	and.w	r3, r3, #7
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	08da      	lsrs	r2, r3, #3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	3208      	adds	r2, #8
 80039f8:	6939      	ldr	r1, [r7, #16]
 80039fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	2203      	movs	r2, #3
 8003a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0e:	43db      	mvns	r3, r3
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	4013      	ands	r3, r2
 8003a14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f003 0203 	and.w	r2, r3, #3
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	fa02 f303 	lsl.w	r3, r2, r3
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f000 80a6 	beq.w	8003b8c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a40:	4b5b      	ldr	r3, [pc, #364]	@ (8003bb0 <HAL_GPIO_Init+0x2e4>)
 8003a42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a44:	4a5a      	ldr	r2, [pc, #360]	@ (8003bb0 <HAL_GPIO_Init+0x2e4>)
 8003a46:	f043 0301 	orr.w	r3, r3, #1
 8003a4a:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a4c:	4b58      	ldr	r3, [pc, #352]	@ (8003bb0 <HAL_GPIO_Init+0x2e4>)
 8003a4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	60bb      	str	r3, [r7, #8]
 8003a56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a58:	4a56      	ldr	r2, [pc, #344]	@ (8003bb4 <HAL_GPIO_Init+0x2e8>)
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	089b      	lsrs	r3, r3, #2
 8003a5e:	3302      	adds	r3, #2
 8003a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f003 0303 	and.w	r3, r3, #3
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	220f      	movs	r2, #15
 8003a70:	fa02 f303 	lsl.w	r3, r2, r3
 8003a74:	43db      	mvns	r3, r3
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003a82:	d01f      	beq.n	8003ac4 <HAL_GPIO_Init+0x1f8>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a4c      	ldr	r2, [pc, #304]	@ (8003bb8 <HAL_GPIO_Init+0x2ec>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d019      	beq.n	8003ac0 <HAL_GPIO_Init+0x1f4>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a4b      	ldr	r2, [pc, #300]	@ (8003bbc <HAL_GPIO_Init+0x2f0>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d013      	beq.n	8003abc <HAL_GPIO_Init+0x1f0>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a4a      	ldr	r2, [pc, #296]	@ (8003bc0 <HAL_GPIO_Init+0x2f4>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d00d      	beq.n	8003ab8 <HAL_GPIO_Init+0x1ec>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a49      	ldr	r2, [pc, #292]	@ (8003bc4 <HAL_GPIO_Init+0x2f8>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d007      	beq.n	8003ab4 <HAL_GPIO_Init+0x1e8>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a48      	ldr	r2, [pc, #288]	@ (8003bc8 <HAL_GPIO_Init+0x2fc>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d101      	bne.n	8003ab0 <HAL_GPIO_Init+0x1e4>
 8003aac:	2305      	movs	r3, #5
 8003aae:	e00a      	b.n	8003ac6 <HAL_GPIO_Init+0x1fa>
 8003ab0:	2306      	movs	r3, #6
 8003ab2:	e008      	b.n	8003ac6 <HAL_GPIO_Init+0x1fa>
 8003ab4:	2304      	movs	r3, #4
 8003ab6:	e006      	b.n	8003ac6 <HAL_GPIO_Init+0x1fa>
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e004      	b.n	8003ac6 <HAL_GPIO_Init+0x1fa>
 8003abc:	2302      	movs	r3, #2
 8003abe:	e002      	b.n	8003ac6 <HAL_GPIO_Init+0x1fa>
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e000      	b.n	8003ac6 <HAL_GPIO_Init+0x1fa>
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	f002 0203 	and.w	r2, r2, #3
 8003acc:	0092      	lsls	r2, r2, #2
 8003ace:	4093      	lsls	r3, r2
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ad6:	4937      	ldr	r1, [pc, #220]	@ (8003bb4 <HAL_GPIO_Init+0x2e8>)
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	089b      	lsrs	r3, r3, #2
 8003adc:	3302      	adds	r3, #2
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ae4:	4b39      	ldr	r3, [pc, #228]	@ (8003bcc <HAL_GPIO_Init+0x300>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	43db      	mvns	r3, r3
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	4013      	ands	r3, r2
 8003af2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d003      	beq.n	8003b08 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b08:	4a30      	ldr	r2, [pc, #192]	@ (8003bcc <HAL_GPIO_Init+0x300>)
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003b0e:	4b2f      	ldr	r3, [pc, #188]	@ (8003bcc <HAL_GPIO_Init+0x300>)
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	43db      	mvns	r3, r3
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d003      	beq.n	8003b32 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b32:	4a26      	ldr	r2, [pc, #152]	@ (8003bcc <HAL_GPIO_Init+0x300>)
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003b38:	4b24      	ldr	r3, [pc, #144]	@ (8003bcc <HAL_GPIO_Init+0x300>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	43db      	mvns	r3, r3
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	4013      	ands	r3, r2
 8003b46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d003      	beq.n	8003b5c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b5c:	4a1b      	ldr	r2, [pc, #108]	@ (8003bcc <HAL_GPIO_Init+0x300>)
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003b62:	4b1a      	ldr	r3, [pc, #104]	@ (8003bcc <HAL_GPIO_Init+0x300>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	43db      	mvns	r3, r3
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	4013      	ands	r3, r2
 8003b70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b86:	4a11      	ldr	r2, [pc, #68]	@ (8003bcc <HAL_GPIO_Init+0x300>)
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	3301      	adds	r3, #1
 8003b90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	fa22 f303 	lsr.w	r3, r2, r3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f47f ae9d 	bne.w	80038dc <HAL_GPIO_Init+0x10>
  }
}
 8003ba2:	bf00      	nop
 8003ba4:	bf00      	nop
 8003ba6:	371c      	adds	r7, #28
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr
 8003bb0:	40021000 	.word	0x40021000
 8003bb4:	40010000 	.word	0x40010000
 8003bb8:	48000400 	.word	0x48000400
 8003bbc:	48000800 	.word	0x48000800
 8003bc0:	48000c00 	.word	0x48000c00
 8003bc4:	48001000 	.word	0x48001000
 8003bc8:	48001400 	.word	0x48001400
 8003bcc:	40010400 	.word	0x40010400

08003bd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	460b      	mov	r3, r1
 8003bda:	807b      	strh	r3, [r7, #2]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003be0:	787b      	ldrb	r3, [r7, #1]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d003      	beq.n	8003bee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003be6:	887a      	ldrh	r2, [r7, #2]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003bec:	e002      	b.n	8003bf4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003bee:	887a      	ldrh	r2, [r7, #2]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003bf4:	bf00      	nop
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d141      	bne.n	8003c92 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c0e:	4b4b      	ldr	r3, [pc, #300]	@ (8003d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003c16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c1a:	d131      	bne.n	8003c80 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c1c:	4b47      	ldr	r3, [pc, #284]	@ (8003d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c22:	4a46      	ldr	r2, [pc, #280]	@ (8003d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c28:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c2c:	4b43      	ldr	r3, [pc, #268]	@ (8003d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003c34:	4a41      	ldr	r2, [pc, #260]	@ (8003d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c3a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c3c:	4b40      	ldr	r3, [pc, #256]	@ (8003d40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2232      	movs	r2, #50	@ 0x32
 8003c42:	fb02 f303 	mul.w	r3, r2, r3
 8003c46:	4a3f      	ldr	r2, [pc, #252]	@ (8003d44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003c48:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4c:	0c9b      	lsrs	r3, r3, #18
 8003c4e:	3301      	adds	r3, #1
 8003c50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c52:	e002      	b.n	8003c5a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	3b01      	subs	r3, #1
 8003c58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c5a:	4b38      	ldr	r3, [pc, #224]	@ (8003d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c66:	d102      	bne.n	8003c6e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1f2      	bne.n	8003c54 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c6e:	4b33      	ldr	r3, [pc, #204]	@ (8003d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c7a:	d158      	bne.n	8003d2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e057      	b.n	8003d30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c80:	4b2e      	ldr	r3, [pc, #184]	@ (8003d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c86:	4a2d      	ldr	r2, [pc, #180]	@ (8003d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c8c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003c90:	e04d      	b.n	8003d2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c98:	d141      	bne.n	8003d1e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c9a:	4b28      	ldr	r3, [pc, #160]	@ (8003d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003ca2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ca6:	d131      	bne.n	8003d0c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ca8:	4b24      	ldr	r3, [pc, #144]	@ (8003d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003caa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cae:	4a23      	ldr	r2, [pc, #140]	@ (8003d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cb4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003cb8:	4b20      	ldr	r3, [pc, #128]	@ (8003d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003cc0:	4a1e      	ldr	r2, [pc, #120]	@ (8003d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003cc6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003cc8:	4b1d      	ldr	r3, [pc, #116]	@ (8003d40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2232      	movs	r2, #50	@ 0x32
 8003cce:	fb02 f303 	mul.w	r3, r2, r3
 8003cd2:	4a1c      	ldr	r2, [pc, #112]	@ (8003d44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd8:	0c9b      	lsrs	r3, r3, #18
 8003cda:	3301      	adds	r3, #1
 8003cdc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cde:	e002      	b.n	8003ce6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ce6:	4b15      	ldr	r3, [pc, #84]	@ (8003d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cf2:	d102      	bne.n	8003cfa <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1f2      	bne.n	8003ce0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003cfa:	4b10      	ldr	r3, [pc, #64]	@ (8003d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cfc:	695b      	ldr	r3, [r3, #20]
 8003cfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d06:	d112      	bne.n	8003d2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e011      	b.n	8003d30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8003d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d12:	4a0a      	ldr	r2, [pc, #40]	@ (8003d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d18:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003d1c:	e007      	b.n	8003d2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d1e:	4b07      	ldr	r3, [pc, #28]	@ (8003d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003d26:	4a05      	ldr	r2, [pc, #20]	@ (8003d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d28:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003d2c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3714      	adds	r7, #20
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr
 8003d3c:	40007000 	.word	0x40007000
 8003d40:	200000ac 	.word	0x200000ac
 8003d44:	431bde83 	.word	0x431bde83

08003d48 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003d4c:	4b05      	ldr	r3, [pc, #20]	@ (8003d64 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	4a04      	ldr	r2, [pc, #16]	@ (8003d64 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003d52:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d56:	6093      	str	r3, [r2, #8]
}
 8003d58:	bf00      	nop
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	40007000 	.word	0x40007000

08003d68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b088      	sub	sp, #32
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e2fe      	b.n	8004378 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d075      	beq.n	8003e72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d86:	4b97      	ldr	r3, [pc, #604]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f003 030c 	and.w	r3, r3, #12
 8003d8e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d90:	4b94      	ldr	r3, [pc, #592]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	f003 0303 	and.w	r3, r3, #3
 8003d98:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	2b0c      	cmp	r3, #12
 8003d9e:	d102      	bne.n	8003da6 <HAL_RCC_OscConfig+0x3e>
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	2b03      	cmp	r3, #3
 8003da4:	d002      	beq.n	8003dac <HAL_RCC_OscConfig+0x44>
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	2b08      	cmp	r3, #8
 8003daa:	d10b      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dac:	4b8d      	ldr	r3, [pc, #564]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d05b      	beq.n	8003e70 <HAL_RCC_OscConfig+0x108>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d157      	bne.n	8003e70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e2d9      	b.n	8004378 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dcc:	d106      	bne.n	8003ddc <HAL_RCC_OscConfig+0x74>
 8003dce:	4b85      	ldr	r3, [pc, #532]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a84      	ldr	r2, [pc, #528]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003dd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dd8:	6013      	str	r3, [r2, #0]
 8003dda:	e01d      	b.n	8003e18 <HAL_RCC_OscConfig+0xb0>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003de4:	d10c      	bne.n	8003e00 <HAL_RCC_OscConfig+0x98>
 8003de6:	4b7f      	ldr	r3, [pc, #508]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a7e      	ldr	r2, [pc, #504]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003dec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003df0:	6013      	str	r3, [r2, #0]
 8003df2:	4b7c      	ldr	r3, [pc, #496]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a7b      	ldr	r2, [pc, #492]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003df8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dfc:	6013      	str	r3, [r2, #0]
 8003dfe:	e00b      	b.n	8003e18 <HAL_RCC_OscConfig+0xb0>
 8003e00:	4b78      	ldr	r3, [pc, #480]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a77      	ldr	r2, [pc, #476]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003e06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e0a:	6013      	str	r3, [r2, #0]
 8003e0c:	4b75      	ldr	r3, [pc, #468]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a74      	ldr	r2, [pc, #464]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003e12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d013      	beq.n	8003e48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e20:	f7fe fd6a 	bl	80028f8 <HAL_GetTick>
 8003e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e26:	e008      	b.n	8003e3a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e28:	f7fe fd66 	bl	80028f8 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b64      	cmp	r3, #100	@ 0x64
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e29e      	b.n	8004378 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e3a:	4b6a      	ldr	r3, [pc, #424]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d0f0      	beq.n	8003e28 <HAL_RCC_OscConfig+0xc0>
 8003e46:	e014      	b.n	8003e72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e48:	f7fe fd56 	bl	80028f8 <HAL_GetTick>
 8003e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e4e:	e008      	b.n	8003e62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e50:	f7fe fd52 	bl	80028f8 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b64      	cmp	r3, #100	@ 0x64
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e28a      	b.n	8004378 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e62:	4b60      	ldr	r3, [pc, #384]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1f0      	bne.n	8003e50 <HAL_RCC_OscConfig+0xe8>
 8003e6e:	e000      	b.n	8003e72 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d075      	beq.n	8003f6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e7e:	4b59      	ldr	r3, [pc, #356]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f003 030c 	and.w	r3, r3, #12
 8003e86:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e88:	4b56      	ldr	r3, [pc, #344]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	f003 0303 	and.w	r3, r3, #3
 8003e90:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	2b0c      	cmp	r3, #12
 8003e96:	d102      	bne.n	8003e9e <HAL_RCC_OscConfig+0x136>
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d002      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x13c>
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	2b04      	cmp	r3, #4
 8003ea2:	d11f      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ea4:	4b4f      	ldr	r3, [pc, #316]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d005      	beq.n	8003ebc <HAL_RCC_OscConfig+0x154>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d101      	bne.n	8003ebc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e25d      	b.n	8004378 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ebc:	4b49      	ldr	r3, [pc, #292]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	061b      	lsls	r3, r3, #24
 8003eca:	4946      	ldr	r1, [pc, #280]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003ed0:	4b45      	ldr	r3, [pc, #276]	@ (8003fe8 <HAL_RCC_OscConfig+0x280>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7fe fcc3 	bl	8002860 <HAL_InitTick>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d043      	beq.n	8003f68 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e249      	b.n	8004378 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d023      	beq.n	8003f34 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003eec:	4b3d      	ldr	r3, [pc, #244]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a3c      	ldr	r2, [pc, #240]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003ef2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ef6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef8:	f7fe fcfe 	bl	80028f8 <HAL_GetTick>
 8003efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003efe:	e008      	b.n	8003f12 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f00:	f7fe fcfa 	bl	80028f8 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e232      	b.n	8004378 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f12:	4b34      	ldr	r3, [pc, #208]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d0f0      	beq.n	8003f00 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f1e:	4b31      	ldr	r3, [pc, #196]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	061b      	lsls	r3, r3, #24
 8003f2c:	492d      	ldr	r1, [pc, #180]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	604b      	str	r3, [r1, #4]
 8003f32:	e01a      	b.n	8003f6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f34:	4b2b      	ldr	r3, [pc, #172]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a2a      	ldr	r2, [pc, #168]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003f3a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f40:	f7fe fcda 	bl	80028f8 <HAL_GetTick>
 8003f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f46:	e008      	b.n	8003f5a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f48:	f7fe fcd6 	bl	80028f8 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e20e      	b.n	8004378 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f5a:	4b22      	ldr	r3, [pc, #136]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1f0      	bne.n	8003f48 <HAL_RCC_OscConfig+0x1e0>
 8003f66:	e000      	b.n	8003f6a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f68:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0308 	and.w	r3, r3, #8
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d041      	beq.n	8003ffa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d01c      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f7e:	4b19      	ldr	r3, [pc, #100]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f84:	4a17      	ldr	r2, [pc, #92]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003f86:	f043 0301 	orr.w	r3, r3, #1
 8003f8a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f8e:	f7fe fcb3 	bl	80028f8 <HAL_GetTick>
 8003f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f94:	e008      	b.n	8003fa8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f96:	f7fe fcaf 	bl	80028f8 <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d901      	bls.n	8003fa8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e1e7      	b.n	8004378 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fa8:	4b0e      	ldr	r3, [pc, #56]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003faa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d0ef      	beq.n	8003f96 <HAL_RCC_OscConfig+0x22e>
 8003fb6:	e020      	b.n	8003ffa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003fba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fbe:	4a09      	ldr	r2, [pc, #36]	@ (8003fe4 <HAL_RCC_OscConfig+0x27c>)
 8003fc0:	f023 0301 	bic.w	r3, r3, #1
 8003fc4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc8:	f7fe fc96 	bl	80028f8 <HAL_GetTick>
 8003fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fce:	e00d      	b.n	8003fec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fd0:	f7fe fc92 	bl	80028f8 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d906      	bls.n	8003fec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e1ca      	b.n	8004378 <HAL_RCC_OscConfig+0x610>
 8003fe2:	bf00      	nop
 8003fe4:	40021000 	.word	0x40021000
 8003fe8:	200000b0 	.word	0x200000b0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fec:	4b8c      	ldr	r3, [pc, #560]	@ (8004220 <HAL_RCC_OscConfig+0x4b8>)
 8003fee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1ea      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0304 	and.w	r3, r3, #4
 8004002:	2b00      	cmp	r3, #0
 8004004:	f000 80a6 	beq.w	8004154 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004008:	2300      	movs	r3, #0
 800400a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800400c:	4b84      	ldr	r3, [pc, #528]	@ (8004220 <HAL_RCC_OscConfig+0x4b8>)
 800400e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004010:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d101      	bne.n	800401c <HAL_RCC_OscConfig+0x2b4>
 8004018:	2301      	movs	r3, #1
 800401a:	e000      	b.n	800401e <HAL_RCC_OscConfig+0x2b6>
 800401c:	2300      	movs	r3, #0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00d      	beq.n	800403e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004022:	4b7f      	ldr	r3, [pc, #508]	@ (8004220 <HAL_RCC_OscConfig+0x4b8>)
 8004024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004026:	4a7e      	ldr	r2, [pc, #504]	@ (8004220 <HAL_RCC_OscConfig+0x4b8>)
 8004028:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800402c:	6593      	str	r3, [r2, #88]	@ 0x58
 800402e:	4b7c      	ldr	r3, [pc, #496]	@ (8004220 <HAL_RCC_OscConfig+0x4b8>)
 8004030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004032:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004036:	60fb      	str	r3, [r7, #12]
 8004038:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800403a:	2301      	movs	r3, #1
 800403c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800403e:	4b79      	ldr	r3, [pc, #484]	@ (8004224 <HAL_RCC_OscConfig+0x4bc>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004046:	2b00      	cmp	r3, #0
 8004048:	d118      	bne.n	800407c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800404a:	4b76      	ldr	r3, [pc, #472]	@ (8004224 <HAL_RCC_OscConfig+0x4bc>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a75      	ldr	r2, [pc, #468]	@ (8004224 <HAL_RCC_OscConfig+0x4bc>)
 8004050:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004054:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004056:	f7fe fc4f 	bl	80028f8 <HAL_GetTick>
 800405a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800405c:	e008      	b.n	8004070 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800405e:	f7fe fc4b 	bl	80028f8 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	2b02      	cmp	r3, #2
 800406a:	d901      	bls.n	8004070 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e183      	b.n	8004378 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004070:	4b6c      	ldr	r3, [pc, #432]	@ (8004224 <HAL_RCC_OscConfig+0x4bc>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004078:	2b00      	cmp	r3, #0
 800407a:	d0f0      	beq.n	800405e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	2b01      	cmp	r3, #1
 8004082:	d108      	bne.n	8004096 <HAL_RCC_OscConfig+0x32e>
 8004084:	4b66      	ldr	r3, [pc, #408]	@ (8004220 <HAL_RCC_OscConfig+0x4b8>)
 8004086:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800408a:	4a65      	ldr	r2, [pc, #404]	@ (8004220 <HAL_RCC_OscConfig+0x4b8>)
 800408c:	f043 0301 	orr.w	r3, r3, #1
 8004090:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004094:	e024      	b.n	80040e0 <HAL_RCC_OscConfig+0x378>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	2b05      	cmp	r3, #5
 800409c:	d110      	bne.n	80040c0 <HAL_RCC_OscConfig+0x358>
 800409e:	4b60      	ldr	r3, [pc, #384]	@ (8004220 <HAL_RCC_OscConfig+0x4b8>)
 80040a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040a4:	4a5e      	ldr	r2, [pc, #376]	@ (8004220 <HAL_RCC_OscConfig+0x4b8>)
 80040a6:	f043 0304 	orr.w	r3, r3, #4
 80040aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80040ae:	4b5c      	ldr	r3, [pc, #368]	@ (8004220 <HAL_RCC_OscConfig+0x4b8>)
 80040b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040b4:	4a5a      	ldr	r2, [pc, #360]	@ (8004220 <HAL_RCC_OscConfig+0x4b8>)
 80040b6:	f043 0301 	orr.w	r3, r3, #1
 80040ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80040be:	e00f      	b.n	80040e0 <HAL_RCC_OscConfig+0x378>
 80040c0:	4b57      	ldr	r3, [pc, #348]	@ (8004220 <HAL_RCC_OscConfig+0x4b8>)
 80040c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040c6:	4a56      	ldr	r2, [pc, #344]	@ (8004220 <HAL_RCC_OscConfig+0x4b8>)
 80040c8:	f023 0301 	bic.w	r3, r3, #1
 80040cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80040d0:	4b53      	ldr	r3, [pc, #332]	@ (8004220 <HAL_RCC_OscConfig+0x4b8>)
 80040d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040d6:	4a52      	ldr	r2, [pc, #328]	@ (8004220 <HAL_RCC_OscConfig+0x4b8>)
 80040d8:	f023 0304 	bic.w	r3, r3, #4
 80040dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d016      	beq.n	8004116 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040e8:	f7fe fc06 	bl	80028f8 <HAL_GetTick>
 80040ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040ee:	e00a      	b.n	8004106 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040f0:	f7fe fc02 	bl	80028f8 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040fe:	4293      	cmp	r3, r2
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e138      	b.n	8004378 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004106:	4b46      	ldr	r3, [pc, #280]	@ (8004220 <HAL_RCC_OscConfig+0x4b8>)
 8004108:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d0ed      	beq.n	80040f0 <HAL_RCC_OscConfig+0x388>
 8004114:	e015      	b.n	8004142 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004116:	f7fe fbef 	bl	80028f8 <HAL_GetTick>
 800411a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800411c:	e00a      	b.n	8004134 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800411e:	f7fe fbeb 	bl	80028f8 <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	f241 3288 	movw	r2, #5000	@ 0x1388
 800412c:	4293      	cmp	r3, r2
 800412e:	d901      	bls.n	8004134 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e121      	b.n	8004378 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004134:	4b3a      	ldr	r3, [pc, #232]	@ (8004220 <HAL_RCC_OscConfig+0x4b8>)
 8004136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1ed      	bne.n	800411e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004142:	7ffb      	ldrb	r3, [r7, #31]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d105      	bne.n	8004154 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004148:	4b35      	ldr	r3, [pc, #212]	@ (8004220 <HAL_RCC_OscConfig+0x4b8>)
 800414a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800414c:	4a34      	ldr	r2, [pc, #208]	@ (8004220 <HAL_RCC_OscConfig+0x4b8>)
 800414e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004152:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0320 	and.w	r3, r3, #32
 800415c:	2b00      	cmp	r3, #0
 800415e:	d03c      	beq.n	80041da <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d01c      	beq.n	80041a2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004168:	4b2d      	ldr	r3, [pc, #180]	@ (8004220 <HAL_RCC_OscConfig+0x4b8>)
 800416a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800416e:	4a2c      	ldr	r2, [pc, #176]	@ (8004220 <HAL_RCC_OscConfig+0x4b8>)
 8004170:	f043 0301 	orr.w	r3, r3, #1
 8004174:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004178:	f7fe fbbe 	bl	80028f8 <HAL_GetTick>
 800417c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800417e:	e008      	b.n	8004192 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004180:	f7fe fbba 	bl	80028f8 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e0f2      	b.n	8004378 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004192:	4b23      	ldr	r3, [pc, #140]	@ (8004220 <HAL_RCC_OscConfig+0x4b8>)
 8004194:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004198:	f003 0302 	and.w	r3, r3, #2
 800419c:	2b00      	cmp	r3, #0
 800419e:	d0ef      	beq.n	8004180 <HAL_RCC_OscConfig+0x418>
 80041a0:	e01b      	b.n	80041da <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80041a2:	4b1f      	ldr	r3, [pc, #124]	@ (8004220 <HAL_RCC_OscConfig+0x4b8>)
 80041a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80041a8:	4a1d      	ldr	r2, [pc, #116]	@ (8004220 <HAL_RCC_OscConfig+0x4b8>)
 80041aa:	f023 0301 	bic.w	r3, r3, #1
 80041ae:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b2:	f7fe fba1 	bl	80028f8 <HAL_GetTick>
 80041b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80041b8:	e008      	b.n	80041cc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041ba:	f7fe fb9d 	bl	80028f8 <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d901      	bls.n	80041cc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e0d5      	b.n	8004378 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80041cc:	4b14      	ldr	r3, [pc, #80]	@ (8004220 <HAL_RCC_OscConfig+0x4b8>)
 80041ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1ef      	bne.n	80041ba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f000 80c9 	beq.w	8004376 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041e4:	4b0e      	ldr	r3, [pc, #56]	@ (8004220 <HAL_RCC_OscConfig+0x4b8>)
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f003 030c 	and.w	r3, r3, #12
 80041ec:	2b0c      	cmp	r3, #12
 80041ee:	f000 8083 	beq.w	80042f8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	69db      	ldr	r3, [r3, #28]
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d15e      	bne.n	80042b8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041fa:	4b09      	ldr	r3, [pc, #36]	@ (8004220 <HAL_RCC_OscConfig+0x4b8>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a08      	ldr	r2, [pc, #32]	@ (8004220 <HAL_RCC_OscConfig+0x4b8>)
 8004200:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004204:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004206:	f7fe fb77 	bl	80028f8 <HAL_GetTick>
 800420a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800420c:	e00c      	b.n	8004228 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800420e:	f7fe fb73 	bl	80028f8 <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	2b02      	cmp	r3, #2
 800421a:	d905      	bls.n	8004228 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e0ab      	b.n	8004378 <HAL_RCC_OscConfig+0x610>
 8004220:	40021000 	.word	0x40021000
 8004224:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004228:	4b55      	ldr	r3, [pc, #340]	@ (8004380 <HAL_RCC_OscConfig+0x618>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1ec      	bne.n	800420e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004234:	4b52      	ldr	r3, [pc, #328]	@ (8004380 <HAL_RCC_OscConfig+0x618>)
 8004236:	68da      	ldr	r2, [r3, #12]
 8004238:	4b52      	ldr	r3, [pc, #328]	@ (8004384 <HAL_RCC_OscConfig+0x61c>)
 800423a:	4013      	ands	r3, r2
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	6a11      	ldr	r1, [r2, #32]
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004244:	3a01      	subs	r2, #1
 8004246:	0112      	lsls	r2, r2, #4
 8004248:	4311      	orrs	r1, r2
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800424e:	0212      	lsls	r2, r2, #8
 8004250:	4311      	orrs	r1, r2
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004256:	0852      	lsrs	r2, r2, #1
 8004258:	3a01      	subs	r2, #1
 800425a:	0552      	lsls	r2, r2, #21
 800425c:	4311      	orrs	r1, r2
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004262:	0852      	lsrs	r2, r2, #1
 8004264:	3a01      	subs	r2, #1
 8004266:	0652      	lsls	r2, r2, #25
 8004268:	4311      	orrs	r1, r2
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800426e:	06d2      	lsls	r2, r2, #27
 8004270:	430a      	orrs	r2, r1
 8004272:	4943      	ldr	r1, [pc, #268]	@ (8004380 <HAL_RCC_OscConfig+0x618>)
 8004274:	4313      	orrs	r3, r2
 8004276:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004278:	4b41      	ldr	r3, [pc, #260]	@ (8004380 <HAL_RCC_OscConfig+0x618>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a40      	ldr	r2, [pc, #256]	@ (8004380 <HAL_RCC_OscConfig+0x618>)
 800427e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004282:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004284:	4b3e      	ldr	r3, [pc, #248]	@ (8004380 <HAL_RCC_OscConfig+0x618>)
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	4a3d      	ldr	r2, [pc, #244]	@ (8004380 <HAL_RCC_OscConfig+0x618>)
 800428a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800428e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004290:	f7fe fb32 	bl	80028f8 <HAL_GetTick>
 8004294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004296:	e008      	b.n	80042aa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004298:	f7fe fb2e 	bl	80028f8 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e066      	b.n	8004378 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042aa:	4b35      	ldr	r3, [pc, #212]	@ (8004380 <HAL_RCC_OscConfig+0x618>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d0f0      	beq.n	8004298 <HAL_RCC_OscConfig+0x530>
 80042b6:	e05e      	b.n	8004376 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042b8:	4b31      	ldr	r3, [pc, #196]	@ (8004380 <HAL_RCC_OscConfig+0x618>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a30      	ldr	r2, [pc, #192]	@ (8004380 <HAL_RCC_OscConfig+0x618>)
 80042be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80042c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c4:	f7fe fb18 	bl	80028f8 <HAL_GetTick>
 80042c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042ca:	e008      	b.n	80042de <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042cc:	f7fe fb14 	bl	80028f8 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d901      	bls.n	80042de <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e04c      	b.n	8004378 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042de:	4b28      	ldr	r3, [pc, #160]	@ (8004380 <HAL_RCC_OscConfig+0x618>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1f0      	bne.n	80042cc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80042ea:	4b25      	ldr	r3, [pc, #148]	@ (8004380 <HAL_RCC_OscConfig+0x618>)
 80042ec:	68da      	ldr	r2, [r3, #12]
 80042ee:	4924      	ldr	r1, [pc, #144]	@ (8004380 <HAL_RCC_OscConfig+0x618>)
 80042f0:	4b25      	ldr	r3, [pc, #148]	@ (8004388 <HAL_RCC_OscConfig+0x620>)
 80042f2:	4013      	ands	r3, r2
 80042f4:	60cb      	str	r3, [r1, #12]
 80042f6:	e03e      	b.n	8004376 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	69db      	ldr	r3, [r3, #28]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d101      	bne.n	8004304 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e039      	b.n	8004378 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004304:	4b1e      	ldr	r3, [pc, #120]	@ (8004380 <HAL_RCC_OscConfig+0x618>)
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	f003 0203 	and.w	r2, r3, #3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	429a      	cmp	r2, r3
 8004316:	d12c      	bne.n	8004372 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004322:	3b01      	subs	r3, #1
 8004324:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004326:	429a      	cmp	r2, r3
 8004328:	d123      	bne.n	8004372 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004334:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004336:	429a      	cmp	r2, r3
 8004338:	d11b      	bne.n	8004372 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004344:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004346:	429a      	cmp	r2, r3
 8004348:	d113      	bne.n	8004372 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004354:	085b      	lsrs	r3, r3, #1
 8004356:	3b01      	subs	r3, #1
 8004358:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800435a:	429a      	cmp	r2, r3
 800435c:	d109      	bne.n	8004372 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004368:	085b      	lsrs	r3, r3, #1
 800436a:	3b01      	subs	r3, #1
 800436c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800436e:	429a      	cmp	r2, r3
 8004370:	d001      	beq.n	8004376 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e000      	b.n	8004378 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004376:	2300      	movs	r3, #0
}
 8004378:	4618      	mov	r0, r3
 800437a:	3720      	adds	r7, #32
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	40021000 	.word	0x40021000
 8004384:	019f800c 	.word	0x019f800c
 8004388:	feeefffc 	.word	0xfeeefffc

0800438c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b086      	sub	sp, #24
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004396:	2300      	movs	r3, #0
 8004398:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d101      	bne.n	80043a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e11e      	b.n	80045e2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043a4:	4b91      	ldr	r3, [pc, #580]	@ (80045ec <HAL_RCC_ClockConfig+0x260>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 030f 	and.w	r3, r3, #15
 80043ac:	683a      	ldr	r2, [r7, #0]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d910      	bls.n	80043d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043b2:	4b8e      	ldr	r3, [pc, #568]	@ (80045ec <HAL_RCC_ClockConfig+0x260>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f023 020f 	bic.w	r2, r3, #15
 80043ba:	498c      	ldr	r1, [pc, #560]	@ (80045ec <HAL_RCC_ClockConfig+0x260>)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	4313      	orrs	r3, r2
 80043c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043c2:	4b8a      	ldr	r3, [pc, #552]	@ (80045ec <HAL_RCC_ClockConfig+0x260>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 030f 	and.w	r3, r3, #15
 80043ca:	683a      	ldr	r2, [r7, #0]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d001      	beq.n	80043d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e106      	b.n	80045e2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0301 	and.w	r3, r3, #1
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d073      	beq.n	80044c8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	2b03      	cmp	r3, #3
 80043e6:	d129      	bne.n	800443c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043e8:	4b81      	ldr	r3, [pc, #516]	@ (80045f0 <HAL_RCC_ClockConfig+0x264>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d101      	bne.n	80043f8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e0f4      	b.n	80045e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80043f8:	f000 f99e 	bl	8004738 <RCC_GetSysClockFreqFromPLLSource>
 80043fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	4a7c      	ldr	r2, [pc, #496]	@ (80045f4 <HAL_RCC_ClockConfig+0x268>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d93f      	bls.n	8004486 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004406:	4b7a      	ldr	r3, [pc, #488]	@ (80045f0 <HAL_RCC_ClockConfig+0x264>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d009      	beq.n	8004426 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800441a:	2b00      	cmp	r3, #0
 800441c:	d033      	beq.n	8004486 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004422:	2b00      	cmp	r3, #0
 8004424:	d12f      	bne.n	8004486 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004426:	4b72      	ldr	r3, [pc, #456]	@ (80045f0 <HAL_RCC_ClockConfig+0x264>)
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800442e:	4a70      	ldr	r2, [pc, #448]	@ (80045f0 <HAL_RCC_ClockConfig+0x264>)
 8004430:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004434:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004436:	2380      	movs	r3, #128	@ 0x80
 8004438:	617b      	str	r3, [r7, #20]
 800443a:	e024      	b.n	8004486 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	2b02      	cmp	r3, #2
 8004442:	d107      	bne.n	8004454 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004444:	4b6a      	ldr	r3, [pc, #424]	@ (80045f0 <HAL_RCC_ClockConfig+0x264>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d109      	bne.n	8004464 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e0c6      	b.n	80045e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004454:	4b66      	ldr	r3, [pc, #408]	@ (80045f0 <HAL_RCC_ClockConfig+0x264>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800445c:	2b00      	cmp	r3, #0
 800445e:	d101      	bne.n	8004464 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e0be      	b.n	80045e2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004464:	f000 f8ce 	bl	8004604 <HAL_RCC_GetSysClockFreq>
 8004468:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	4a61      	ldr	r2, [pc, #388]	@ (80045f4 <HAL_RCC_ClockConfig+0x268>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d909      	bls.n	8004486 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004472:	4b5f      	ldr	r3, [pc, #380]	@ (80045f0 <HAL_RCC_ClockConfig+0x264>)
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800447a:	4a5d      	ldr	r2, [pc, #372]	@ (80045f0 <HAL_RCC_ClockConfig+0x264>)
 800447c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004480:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004482:	2380      	movs	r3, #128	@ 0x80
 8004484:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004486:	4b5a      	ldr	r3, [pc, #360]	@ (80045f0 <HAL_RCC_ClockConfig+0x264>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f023 0203 	bic.w	r2, r3, #3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	4957      	ldr	r1, [pc, #348]	@ (80045f0 <HAL_RCC_ClockConfig+0x264>)
 8004494:	4313      	orrs	r3, r2
 8004496:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004498:	f7fe fa2e 	bl	80028f8 <HAL_GetTick>
 800449c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800449e:	e00a      	b.n	80044b6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044a0:	f7fe fa2a 	bl	80028f8 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e095      	b.n	80045e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044b6:	4b4e      	ldr	r3, [pc, #312]	@ (80045f0 <HAL_RCC_ClockConfig+0x264>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f003 020c 	and.w	r2, r3, #12
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d1eb      	bne.n	80044a0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d023      	beq.n	800451c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0304 	and.w	r3, r3, #4
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d005      	beq.n	80044ec <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044e0:	4b43      	ldr	r3, [pc, #268]	@ (80045f0 <HAL_RCC_ClockConfig+0x264>)
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	4a42      	ldr	r2, [pc, #264]	@ (80045f0 <HAL_RCC_ClockConfig+0x264>)
 80044e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80044ea:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0308 	and.w	r3, r3, #8
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d007      	beq.n	8004508 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80044f8:	4b3d      	ldr	r3, [pc, #244]	@ (80045f0 <HAL_RCC_ClockConfig+0x264>)
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004500:	4a3b      	ldr	r2, [pc, #236]	@ (80045f0 <HAL_RCC_ClockConfig+0x264>)
 8004502:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004506:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004508:	4b39      	ldr	r3, [pc, #228]	@ (80045f0 <HAL_RCC_ClockConfig+0x264>)
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	4936      	ldr	r1, [pc, #216]	@ (80045f0 <HAL_RCC_ClockConfig+0x264>)
 8004516:	4313      	orrs	r3, r2
 8004518:	608b      	str	r3, [r1, #8]
 800451a:	e008      	b.n	800452e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	2b80      	cmp	r3, #128	@ 0x80
 8004520:	d105      	bne.n	800452e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004522:	4b33      	ldr	r3, [pc, #204]	@ (80045f0 <HAL_RCC_ClockConfig+0x264>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	4a32      	ldr	r2, [pc, #200]	@ (80045f0 <HAL_RCC_ClockConfig+0x264>)
 8004528:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800452c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800452e:	4b2f      	ldr	r3, [pc, #188]	@ (80045ec <HAL_RCC_ClockConfig+0x260>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 030f 	and.w	r3, r3, #15
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	429a      	cmp	r2, r3
 800453a:	d21d      	bcs.n	8004578 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800453c:	4b2b      	ldr	r3, [pc, #172]	@ (80045ec <HAL_RCC_ClockConfig+0x260>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f023 020f 	bic.w	r2, r3, #15
 8004544:	4929      	ldr	r1, [pc, #164]	@ (80045ec <HAL_RCC_ClockConfig+0x260>)
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	4313      	orrs	r3, r2
 800454a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800454c:	f7fe f9d4 	bl	80028f8 <HAL_GetTick>
 8004550:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004552:	e00a      	b.n	800456a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004554:	f7fe f9d0 	bl	80028f8 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004562:	4293      	cmp	r3, r2
 8004564:	d901      	bls.n	800456a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e03b      	b.n	80045e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800456a:	4b20      	ldr	r3, [pc, #128]	@ (80045ec <HAL_RCC_ClockConfig+0x260>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 030f 	and.w	r3, r3, #15
 8004572:	683a      	ldr	r2, [r7, #0]
 8004574:	429a      	cmp	r2, r3
 8004576:	d1ed      	bne.n	8004554 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0304 	and.w	r3, r3, #4
 8004580:	2b00      	cmp	r3, #0
 8004582:	d008      	beq.n	8004596 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004584:	4b1a      	ldr	r3, [pc, #104]	@ (80045f0 <HAL_RCC_ClockConfig+0x264>)
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	4917      	ldr	r1, [pc, #92]	@ (80045f0 <HAL_RCC_ClockConfig+0x264>)
 8004592:	4313      	orrs	r3, r2
 8004594:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0308 	and.w	r3, r3, #8
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d009      	beq.n	80045b6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045a2:	4b13      	ldr	r3, [pc, #76]	@ (80045f0 <HAL_RCC_ClockConfig+0x264>)
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	00db      	lsls	r3, r3, #3
 80045b0:	490f      	ldr	r1, [pc, #60]	@ (80045f0 <HAL_RCC_ClockConfig+0x264>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80045b6:	f000 f825 	bl	8004604 <HAL_RCC_GetSysClockFreq>
 80045ba:	4602      	mov	r2, r0
 80045bc:	4b0c      	ldr	r3, [pc, #48]	@ (80045f0 <HAL_RCC_ClockConfig+0x264>)
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	091b      	lsrs	r3, r3, #4
 80045c2:	f003 030f 	and.w	r3, r3, #15
 80045c6:	490c      	ldr	r1, [pc, #48]	@ (80045f8 <HAL_RCC_ClockConfig+0x26c>)
 80045c8:	5ccb      	ldrb	r3, [r1, r3]
 80045ca:	f003 031f 	and.w	r3, r3, #31
 80045ce:	fa22 f303 	lsr.w	r3, r2, r3
 80045d2:	4a0a      	ldr	r2, [pc, #40]	@ (80045fc <HAL_RCC_ClockConfig+0x270>)
 80045d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80045d6:	4b0a      	ldr	r3, [pc, #40]	@ (8004600 <HAL_RCC_ClockConfig+0x274>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4618      	mov	r0, r3
 80045dc:	f7fe f940 	bl	8002860 <HAL_InitTick>
 80045e0:	4603      	mov	r3, r0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3718      	adds	r7, #24
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	40022000 	.word	0x40022000
 80045f0:	40021000 	.word	0x40021000
 80045f4:	04c4b400 	.word	0x04c4b400
 80045f8:	08008500 	.word	0x08008500
 80045fc:	200000ac 	.word	0x200000ac
 8004600:	200000b0 	.word	0x200000b0

08004604 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004604:	b480      	push	{r7}
 8004606:	b087      	sub	sp, #28
 8004608:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800460a:	4b2c      	ldr	r3, [pc, #176]	@ (80046bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f003 030c 	and.w	r3, r3, #12
 8004612:	2b04      	cmp	r3, #4
 8004614:	d102      	bne.n	800461c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004616:	4b2a      	ldr	r3, [pc, #168]	@ (80046c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004618:	613b      	str	r3, [r7, #16]
 800461a:	e047      	b.n	80046ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800461c:	4b27      	ldr	r3, [pc, #156]	@ (80046bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f003 030c 	and.w	r3, r3, #12
 8004624:	2b08      	cmp	r3, #8
 8004626:	d102      	bne.n	800462e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004628:	4b26      	ldr	r3, [pc, #152]	@ (80046c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800462a:	613b      	str	r3, [r7, #16]
 800462c:	e03e      	b.n	80046ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800462e:	4b23      	ldr	r3, [pc, #140]	@ (80046bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f003 030c 	and.w	r3, r3, #12
 8004636:	2b0c      	cmp	r3, #12
 8004638:	d136      	bne.n	80046a8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800463a:	4b20      	ldr	r3, [pc, #128]	@ (80046bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	f003 0303 	and.w	r3, r3, #3
 8004642:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004644:	4b1d      	ldr	r3, [pc, #116]	@ (80046bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	091b      	lsrs	r3, r3, #4
 800464a:	f003 030f 	and.w	r3, r3, #15
 800464e:	3301      	adds	r3, #1
 8004650:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2b03      	cmp	r3, #3
 8004656:	d10c      	bne.n	8004672 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004658:	4a1a      	ldr	r2, [pc, #104]	@ (80046c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004660:	4a16      	ldr	r2, [pc, #88]	@ (80046bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004662:	68d2      	ldr	r2, [r2, #12]
 8004664:	0a12      	lsrs	r2, r2, #8
 8004666:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800466a:	fb02 f303 	mul.w	r3, r2, r3
 800466e:	617b      	str	r3, [r7, #20]
      break;
 8004670:	e00c      	b.n	800468c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004672:	4a13      	ldr	r2, [pc, #76]	@ (80046c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	fbb2 f3f3 	udiv	r3, r2, r3
 800467a:	4a10      	ldr	r2, [pc, #64]	@ (80046bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800467c:	68d2      	ldr	r2, [r2, #12]
 800467e:	0a12      	lsrs	r2, r2, #8
 8004680:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004684:	fb02 f303 	mul.w	r3, r2, r3
 8004688:	617b      	str	r3, [r7, #20]
      break;
 800468a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800468c:	4b0b      	ldr	r3, [pc, #44]	@ (80046bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	0e5b      	lsrs	r3, r3, #25
 8004692:	f003 0303 	and.w	r3, r3, #3
 8004696:	3301      	adds	r3, #1
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800469c:	697a      	ldr	r2, [r7, #20]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a4:	613b      	str	r3, [r7, #16]
 80046a6:	e001      	b.n	80046ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80046a8:	2300      	movs	r3, #0
 80046aa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80046ac:	693b      	ldr	r3, [r7, #16]
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	371c      	adds	r7, #28
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	40021000 	.word	0x40021000
 80046c0:	00f42400 	.word	0x00f42400
 80046c4:	007a1200 	.word	0x007a1200

080046c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046c8:	b480      	push	{r7}
 80046ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046cc:	4b03      	ldr	r3, [pc, #12]	@ (80046dc <HAL_RCC_GetHCLKFreq+0x14>)
 80046ce:	681b      	ldr	r3, [r3, #0]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	200000ac 	.word	0x200000ac

080046e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80046e4:	f7ff fff0 	bl	80046c8 <HAL_RCC_GetHCLKFreq>
 80046e8:	4602      	mov	r2, r0
 80046ea:	4b06      	ldr	r3, [pc, #24]	@ (8004704 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	0a1b      	lsrs	r3, r3, #8
 80046f0:	f003 0307 	and.w	r3, r3, #7
 80046f4:	4904      	ldr	r1, [pc, #16]	@ (8004708 <HAL_RCC_GetPCLK1Freq+0x28>)
 80046f6:	5ccb      	ldrb	r3, [r1, r3]
 80046f8:	f003 031f 	and.w	r3, r3, #31
 80046fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004700:	4618      	mov	r0, r3
 8004702:	bd80      	pop	{r7, pc}
 8004704:	40021000 	.word	0x40021000
 8004708:	08008510 	.word	0x08008510

0800470c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004710:	f7ff ffda 	bl	80046c8 <HAL_RCC_GetHCLKFreq>
 8004714:	4602      	mov	r2, r0
 8004716:	4b06      	ldr	r3, [pc, #24]	@ (8004730 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	0adb      	lsrs	r3, r3, #11
 800471c:	f003 0307 	and.w	r3, r3, #7
 8004720:	4904      	ldr	r1, [pc, #16]	@ (8004734 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004722:	5ccb      	ldrb	r3, [r1, r3]
 8004724:	f003 031f 	and.w	r3, r3, #31
 8004728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800472c:	4618      	mov	r0, r3
 800472e:	bd80      	pop	{r7, pc}
 8004730:	40021000 	.word	0x40021000
 8004734:	08008510 	.word	0x08008510

08004738 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004738:	b480      	push	{r7}
 800473a:	b087      	sub	sp, #28
 800473c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800473e:	4b1e      	ldr	r3, [pc, #120]	@ (80047b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	f003 0303 	and.w	r3, r3, #3
 8004746:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004748:	4b1b      	ldr	r3, [pc, #108]	@ (80047b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	091b      	lsrs	r3, r3, #4
 800474e:	f003 030f 	and.w	r3, r3, #15
 8004752:	3301      	adds	r3, #1
 8004754:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	2b03      	cmp	r3, #3
 800475a:	d10c      	bne.n	8004776 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800475c:	4a17      	ldr	r2, [pc, #92]	@ (80047bc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	fbb2 f3f3 	udiv	r3, r2, r3
 8004764:	4a14      	ldr	r2, [pc, #80]	@ (80047b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004766:	68d2      	ldr	r2, [r2, #12]
 8004768:	0a12      	lsrs	r2, r2, #8
 800476a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800476e:	fb02 f303 	mul.w	r3, r2, r3
 8004772:	617b      	str	r3, [r7, #20]
    break;
 8004774:	e00c      	b.n	8004790 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004776:	4a12      	ldr	r2, [pc, #72]	@ (80047c0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	fbb2 f3f3 	udiv	r3, r2, r3
 800477e:	4a0e      	ldr	r2, [pc, #56]	@ (80047b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004780:	68d2      	ldr	r2, [r2, #12]
 8004782:	0a12      	lsrs	r2, r2, #8
 8004784:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004788:	fb02 f303 	mul.w	r3, r2, r3
 800478c:	617b      	str	r3, [r7, #20]
    break;
 800478e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004790:	4b09      	ldr	r3, [pc, #36]	@ (80047b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	0e5b      	lsrs	r3, r3, #25
 8004796:	f003 0303 	and.w	r3, r3, #3
 800479a:	3301      	adds	r3, #1
 800479c:	005b      	lsls	r3, r3, #1
 800479e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80047a0:	697a      	ldr	r2, [r7, #20]
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80047aa:	687b      	ldr	r3, [r7, #4]
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	371c      	adds	r7, #28
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr
 80047b8:	40021000 	.word	0x40021000
 80047bc:	007a1200 	.word	0x007a1200
 80047c0:	00f42400 	.word	0x00f42400

080047c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b086      	sub	sp, #24
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80047cc:	2300      	movs	r3, #0
 80047ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80047d0:	2300      	movs	r3, #0
 80047d2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f000 8098 	beq.w	8004912 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047e2:	2300      	movs	r3, #0
 80047e4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047e6:	4b43      	ldr	r3, [pc, #268]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d10d      	bne.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047f2:	4b40      	ldr	r3, [pc, #256]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047f6:	4a3f      	ldr	r2, [pc, #252]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80047fe:	4b3d      	ldr	r3, [pc, #244]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004802:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004806:	60bb      	str	r3, [r7, #8]
 8004808:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800480a:	2301      	movs	r3, #1
 800480c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800480e:	4b3a      	ldr	r3, [pc, #232]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a39      	ldr	r2, [pc, #228]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004814:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004818:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800481a:	f7fe f86d 	bl	80028f8 <HAL_GetTick>
 800481e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004820:	e009      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004822:	f7fe f869 	bl	80028f8 <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	2b02      	cmp	r3, #2
 800482e:	d902      	bls.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	74fb      	strb	r3, [r7, #19]
        break;
 8004834:	e005      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004836:	4b30      	ldr	r3, [pc, #192]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800483e:	2b00      	cmp	r3, #0
 8004840:	d0ef      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004842:	7cfb      	ldrb	r3, [r7, #19]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d159      	bne.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004848:	4b2a      	ldr	r3, [pc, #168]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800484a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800484e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004852:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d01e      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	429a      	cmp	r2, r3
 8004862:	d019      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004864:	4b23      	ldr	r3, [pc, #140]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800486a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800486e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004870:	4b20      	ldr	r3, [pc, #128]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004872:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004876:	4a1f      	ldr	r2, [pc, #124]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004878:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800487c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004880:	4b1c      	ldr	r3, [pc, #112]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004882:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004886:	4a1b      	ldr	r2, [pc, #108]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004888:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800488c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004890:	4a18      	ldr	r2, [pc, #96]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d016      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a2:	f7fe f829 	bl	80028f8 <HAL_GetTick>
 80048a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048a8:	e00b      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048aa:	f7fe f825 	bl	80028f8 <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d902      	bls.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	74fb      	strb	r3, [r7, #19]
            break;
 80048c0:	e006      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048c2:	4b0c      	ldr	r3, [pc, #48]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d0ec      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80048d0:	7cfb      	ldrb	r3, [r7, #19]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d10b      	bne.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048d6:	4b07      	ldr	r3, [pc, #28]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048e4:	4903      	ldr	r1, [pc, #12]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80048ec:	e008      	b.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80048ee:	7cfb      	ldrb	r3, [r7, #19]
 80048f0:	74bb      	strb	r3, [r7, #18]
 80048f2:	e005      	b.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80048f4:	40021000 	.word	0x40021000
 80048f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048fc:	7cfb      	ldrb	r3, [r7, #19]
 80048fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004900:	7c7b      	ldrb	r3, [r7, #17]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d105      	bne.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004906:	4ba7      	ldr	r3, [pc, #668]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800490a:	4aa6      	ldr	r2, [pc, #664]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800490c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004910:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00a      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800491e:	4ba1      	ldr	r3, [pc, #644]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004920:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004924:	f023 0203 	bic.w	r2, r3, #3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	499d      	ldr	r1, [pc, #628]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800492e:	4313      	orrs	r3, r2
 8004930:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0302 	and.w	r3, r3, #2
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00a      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004940:	4b98      	ldr	r3, [pc, #608]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004946:	f023 020c 	bic.w	r2, r3, #12
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	4995      	ldr	r1, [pc, #596]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004950:	4313      	orrs	r3, r2
 8004952:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0304 	and.w	r3, r3, #4
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00a      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004962:	4b90      	ldr	r3, [pc, #576]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004964:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004968:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	498c      	ldr	r1, [pc, #560]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004972:	4313      	orrs	r3, r2
 8004974:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0308 	and.w	r3, r3, #8
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00a      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004984:	4b87      	ldr	r3, [pc, #540]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800498a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	4984      	ldr	r1, [pc, #528]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004994:	4313      	orrs	r3, r2
 8004996:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0310 	and.w	r3, r3, #16
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00a      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80049a6:	4b7f      	ldr	r3, [pc, #508]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	497b      	ldr	r1, [pc, #492]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0320 	and.w	r3, r3, #32
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00a      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80049c8:	4b76      	ldr	r3, [pc, #472]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	699b      	ldr	r3, [r3, #24]
 80049d6:	4973      	ldr	r1, [pc, #460]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00a      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049ea:	4b6e      	ldr	r3, [pc, #440]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049f0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	69db      	ldr	r3, [r3, #28]
 80049f8:	496a      	ldr	r1, [pc, #424]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00a      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a0c:	4b65      	ldr	r3, [pc, #404]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a12:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	4962      	ldr	r1, [pc, #392]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00a      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a2e:	4b5d      	ldr	r3, [pc, #372]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a34:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a3c:	4959      	ldr	r1, [pc, #356]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00a      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a50:	4b54      	ldr	r3, [pc, #336]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a52:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a56:	f023 0203 	bic.w	r2, r3, #3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a5e:	4951      	ldr	r1, [pc, #324]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00a      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a72:	4b4c      	ldr	r3, [pc, #304]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a78:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a80:	4948      	ldr	r1, [pc, #288]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d015      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a94:	4b43      	ldr	r3, [pc, #268]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a9a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aa2:	4940      	ldr	r1, [pc, #256]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ab2:	d105      	bne.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ab4:	4b3b      	ldr	r3, [pc, #236]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	4a3a      	ldr	r2, [pc, #232]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004abe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d015      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004acc:	4b35      	ldr	r3, [pc, #212]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ad2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ada:	4932      	ldr	r1, [pc, #200]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ae6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004aea:	d105      	bne.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004aec:	4b2d      	ldr	r3, [pc, #180]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	4a2c      	ldr	r2, [pc, #176]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004af2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004af6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d015      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004b04:	4b27      	ldr	r3, [pc, #156]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b0a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b12:	4924      	ldr	r1, [pc, #144]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b1e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b22:	d105      	bne.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b24:	4b1f      	ldr	r3, [pc, #124]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	4a1e      	ldr	r2, [pc, #120]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b2e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d015      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b3c:	4b19      	ldr	r3, [pc, #100]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b42:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b4a:	4916      	ldr	r1, [pc, #88]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b56:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b5a:	d105      	bne.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b5c:	4b11      	ldr	r3, [pc, #68]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	4a10      	ldr	r2, [pc, #64]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b66:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d019      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b74:	4b0b      	ldr	r3, [pc, #44]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b7a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b82:	4908      	ldr	r1, [pc, #32]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b92:	d109      	bne.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b94:	4b03      	ldr	r3, [pc, #12]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	4a02      	ldr	r2, [pc, #8]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b9e:	60d3      	str	r3, [r2, #12]
 8004ba0:	e002      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004ba2:	bf00      	nop
 8004ba4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d015      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004bb4:	4b29      	ldr	r3, [pc, #164]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bba:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bc2:	4926      	ldr	r1, [pc, #152]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004bd2:	d105      	bne.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004bd4:	4b21      	ldr	r3, [pc, #132]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	4a20      	ldr	r2, [pc, #128]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004bda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bde:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d015      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004bec:	4b1b      	ldr	r3, [pc, #108]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bf2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bfa:	4918      	ldr	r1, [pc, #96]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c0a:	d105      	bne.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004c0c:	4b13      	ldr	r3, [pc, #76]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	4a12      	ldr	r2, [pc, #72]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c16:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d015      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004c24:	4b0d      	ldr	r3, [pc, #52]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c26:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004c2a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c32:	490a      	ldr	r1, [pc, #40]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c3e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c42:	d105      	bne.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c44:	4b05      	ldr	r3, [pc, #20]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	4a04      	ldr	r2, [pc, #16]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c4e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004c50:	7cbb      	ldrb	r3, [r7, #18]
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3718      	adds	r7, #24
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	40021000 	.word	0x40021000

08004c60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d101      	bne.n	8004c72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e049      	b.n	8004d06 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d106      	bne.n	8004c8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f7fd fc2e 	bl	80024e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2202      	movs	r2, #2
 8004c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	3304      	adds	r3, #4
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	4610      	mov	r0, r2
 8004ca0:	f000 fa26 	bl	80050f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3708      	adds	r7, #8
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
	...

08004d10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d001      	beq.n	8004d28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e054      	b.n	8004dd2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68da      	ldr	r2, [r3, #12]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f042 0201 	orr.w	r2, r2, #1
 8004d3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a26      	ldr	r2, [pc, #152]	@ (8004de0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d022      	beq.n	8004d90 <HAL_TIM_Base_Start_IT+0x80>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d52:	d01d      	beq.n	8004d90 <HAL_TIM_Base_Start_IT+0x80>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a22      	ldr	r2, [pc, #136]	@ (8004de4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d018      	beq.n	8004d90 <HAL_TIM_Base_Start_IT+0x80>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a21      	ldr	r2, [pc, #132]	@ (8004de8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d013      	beq.n	8004d90 <HAL_TIM_Base_Start_IT+0x80>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a1f      	ldr	r2, [pc, #124]	@ (8004dec <HAL_TIM_Base_Start_IT+0xdc>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d00e      	beq.n	8004d90 <HAL_TIM_Base_Start_IT+0x80>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a1e      	ldr	r2, [pc, #120]	@ (8004df0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d009      	beq.n	8004d90 <HAL_TIM_Base_Start_IT+0x80>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a1c      	ldr	r2, [pc, #112]	@ (8004df4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d004      	beq.n	8004d90 <HAL_TIM_Base_Start_IT+0x80>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a1b      	ldr	r2, [pc, #108]	@ (8004df8 <HAL_TIM_Base_Start_IT+0xe8>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d115      	bne.n	8004dbc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	689a      	ldr	r2, [r3, #8]
 8004d96:	4b19      	ldr	r3, [pc, #100]	@ (8004dfc <HAL_TIM_Base_Start_IT+0xec>)
 8004d98:	4013      	ands	r3, r2
 8004d9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2b06      	cmp	r3, #6
 8004da0:	d015      	beq.n	8004dce <HAL_TIM_Base_Start_IT+0xbe>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004da8:	d011      	beq.n	8004dce <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f042 0201 	orr.w	r2, r2, #1
 8004db8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dba:	e008      	b.n	8004dce <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f042 0201 	orr.w	r2, r2, #1
 8004dca:	601a      	str	r2, [r3, #0]
 8004dcc:	e000      	b.n	8004dd0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3714      	adds	r7, #20
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	40012c00 	.word	0x40012c00
 8004de4:	40000400 	.word	0x40000400
 8004de8:	40000800 	.word	0x40000800
 8004dec:	40000c00 	.word	0x40000c00
 8004df0:	40013400 	.word	0x40013400
 8004df4:	40014000 	.word	0x40014000
 8004df8:	40015000 	.word	0x40015000
 8004dfc:	00010007 	.word	0x00010007

08004e00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d020      	beq.n	8004e64 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f003 0302 	and.w	r3, r3, #2
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d01b      	beq.n	8004e64 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f06f 0202 	mvn.w	r2, #2
 8004e34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	f003 0303 	and.w	r3, r3, #3
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d003      	beq.n	8004e52 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 f931 	bl	80050b2 <HAL_TIM_IC_CaptureCallback>
 8004e50:	e005      	b.n	8004e5e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 f923 	bl	800509e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 f934 	bl	80050c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	f003 0304 	and.w	r3, r3, #4
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d020      	beq.n	8004eb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f003 0304 	and.w	r3, r3, #4
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d01b      	beq.n	8004eb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f06f 0204 	mvn.w	r2, #4
 8004e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2202      	movs	r2, #2
 8004e86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d003      	beq.n	8004e9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 f90b 	bl	80050b2 <HAL_TIM_IC_CaptureCallback>
 8004e9c:	e005      	b.n	8004eaa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 f8fd 	bl	800509e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 f90e 	bl	80050c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	f003 0308 	and.w	r3, r3, #8
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d020      	beq.n	8004efc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f003 0308 	and.w	r3, r3, #8
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d01b      	beq.n	8004efc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f06f 0208 	mvn.w	r2, #8
 8004ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2204      	movs	r2, #4
 8004ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	69db      	ldr	r3, [r3, #28]
 8004eda:	f003 0303 	and.w	r3, r3, #3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d003      	beq.n	8004eea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 f8e5 	bl	80050b2 <HAL_TIM_IC_CaptureCallback>
 8004ee8:	e005      	b.n	8004ef6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 f8d7 	bl	800509e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 f8e8 	bl	80050c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	f003 0310 	and.w	r3, r3, #16
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d020      	beq.n	8004f48 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f003 0310 	and.w	r3, r3, #16
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d01b      	beq.n	8004f48 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f06f 0210 	mvn.w	r2, #16
 8004f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2208      	movs	r2, #8
 8004f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	69db      	ldr	r3, [r3, #28]
 8004f26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d003      	beq.n	8004f36 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 f8bf 	bl	80050b2 <HAL_TIM_IC_CaptureCallback>
 8004f34:	e005      	b.n	8004f42 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 f8b1 	bl	800509e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f000 f8c2 	bl	80050c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00c      	beq.n	8004f6c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f003 0301 	and.w	r3, r3, #1
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d007      	beq.n	8004f6c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f06f 0201 	mvn.w	r2, #1
 8004f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f7fb fff2 	bl	8000f50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d104      	bne.n	8004f80 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d00c      	beq.n	8004f9a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d007      	beq.n	8004f9a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004f92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f000 f9ff 	bl	8005398 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d00c      	beq.n	8004fbe <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d007      	beq.n	8004fbe <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004fb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f000 f9f7 	bl	80053ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d00c      	beq.n	8004fe2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d007      	beq.n	8004fe2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004fda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f000 f87c 	bl	80050da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	f003 0320 	and.w	r3, r3, #32
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00c      	beq.n	8005006 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f003 0320 	and.w	r3, r3, #32
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d007      	beq.n	8005006 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f06f 0220 	mvn.w	r2, #32
 8004ffe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 f9bf 	bl	8005384 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00c      	beq.n	800502a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d007      	beq.n	800502a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005022:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 f9cb 	bl	80053c0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00c      	beq.n	800504e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d007      	beq.n	800504e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005046:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 f9c3 	bl	80053d4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00c      	beq.n	8005072 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d007      	beq.n	8005072 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800506a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 f9bb 	bl	80053e8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00c      	beq.n	8005096 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d007      	beq.n	8005096 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800508e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f000 f9b3 	bl	80053fc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005096:	bf00      	nop
 8005098:	3710      	adds	r7, #16
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800509e:	b480      	push	{r7}
 80050a0:	b083      	sub	sp, #12
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050a6:	bf00      	nop
 80050a8:	370c      	adds	r7, #12
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr

080050b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050b2:	b480      	push	{r7}
 80050b4:	b083      	sub	sp, #12
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050ba:	bf00      	nop
 80050bc:	370c      	adds	r7, #12
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr

080050c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050c6:	b480      	push	{r7}
 80050c8:	b083      	sub	sp, #12
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050ce:	bf00      	nop
 80050d0:	370c      	adds	r7, #12
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr

080050da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050da:	b480      	push	{r7}
 80050dc:	b083      	sub	sp, #12
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050e2:	bf00      	nop
 80050e4:	370c      	adds	r7, #12
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
	...

080050f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a4c      	ldr	r2, [pc, #304]	@ (8005234 <TIM_Base_SetConfig+0x144>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d017      	beq.n	8005138 <TIM_Base_SetConfig+0x48>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800510e:	d013      	beq.n	8005138 <TIM_Base_SetConfig+0x48>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a49      	ldr	r2, [pc, #292]	@ (8005238 <TIM_Base_SetConfig+0x148>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d00f      	beq.n	8005138 <TIM_Base_SetConfig+0x48>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a48      	ldr	r2, [pc, #288]	@ (800523c <TIM_Base_SetConfig+0x14c>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d00b      	beq.n	8005138 <TIM_Base_SetConfig+0x48>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a47      	ldr	r2, [pc, #284]	@ (8005240 <TIM_Base_SetConfig+0x150>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d007      	beq.n	8005138 <TIM_Base_SetConfig+0x48>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a46      	ldr	r2, [pc, #280]	@ (8005244 <TIM_Base_SetConfig+0x154>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d003      	beq.n	8005138 <TIM_Base_SetConfig+0x48>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a45      	ldr	r2, [pc, #276]	@ (8005248 <TIM_Base_SetConfig+0x158>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d108      	bne.n	800514a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800513e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	4313      	orrs	r3, r2
 8005148:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a39      	ldr	r2, [pc, #228]	@ (8005234 <TIM_Base_SetConfig+0x144>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d023      	beq.n	800519a <TIM_Base_SetConfig+0xaa>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005158:	d01f      	beq.n	800519a <TIM_Base_SetConfig+0xaa>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a36      	ldr	r2, [pc, #216]	@ (8005238 <TIM_Base_SetConfig+0x148>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d01b      	beq.n	800519a <TIM_Base_SetConfig+0xaa>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a35      	ldr	r2, [pc, #212]	@ (800523c <TIM_Base_SetConfig+0x14c>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d017      	beq.n	800519a <TIM_Base_SetConfig+0xaa>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a34      	ldr	r2, [pc, #208]	@ (8005240 <TIM_Base_SetConfig+0x150>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d013      	beq.n	800519a <TIM_Base_SetConfig+0xaa>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a33      	ldr	r2, [pc, #204]	@ (8005244 <TIM_Base_SetConfig+0x154>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d00f      	beq.n	800519a <TIM_Base_SetConfig+0xaa>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a33      	ldr	r2, [pc, #204]	@ (800524c <TIM_Base_SetConfig+0x15c>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d00b      	beq.n	800519a <TIM_Base_SetConfig+0xaa>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a32      	ldr	r2, [pc, #200]	@ (8005250 <TIM_Base_SetConfig+0x160>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d007      	beq.n	800519a <TIM_Base_SetConfig+0xaa>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a31      	ldr	r2, [pc, #196]	@ (8005254 <TIM_Base_SetConfig+0x164>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d003      	beq.n	800519a <TIM_Base_SetConfig+0xaa>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a2c      	ldr	r2, [pc, #176]	@ (8005248 <TIM_Base_SetConfig+0x158>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d108      	bne.n	80051ac <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	689a      	ldr	r2, [r3, #8]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a18      	ldr	r2, [pc, #96]	@ (8005234 <TIM_Base_SetConfig+0x144>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d013      	beq.n	8005200 <TIM_Base_SetConfig+0x110>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a1a      	ldr	r2, [pc, #104]	@ (8005244 <TIM_Base_SetConfig+0x154>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d00f      	beq.n	8005200 <TIM_Base_SetConfig+0x110>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a1a      	ldr	r2, [pc, #104]	@ (800524c <TIM_Base_SetConfig+0x15c>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d00b      	beq.n	8005200 <TIM_Base_SetConfig+0x110>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a19      	ldr	r2, [pc, #100]	@ (8005250 <TIM_Base_SetConfig+0x160>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d007      	beq.n	8005200 <TIM_Base_SetConfig+0x110>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a18      	ldr	r2, [pc, #96]	@ (8005254 <TIM_Base_SetConfig+0x164>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d003      	beq.n	8005200 <TIM_Base_SetConfig+0x110>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a13      	ldr	r2, [pc, #76]	@ (8005248 <TIM_Base_SetConfig+0x158>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d103      	bne.n	8005208 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	691a      	ldr	r2, [r3, #16]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	f003 0301 	and.w	r3, r3, #1
 8005216:	2b01      	cmp	r3, #1
 8005218:	d105      	bne.n	8005226 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	f023 0201 	bic.w	r2, r3, #1
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	611a      	str	r2, [r3, #16]
  }
}
 8005226:	bf00      	nop
 8005228:	3714      	adds	r7, #20
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	40012c00 	.word	0x40012c00
 8005238:	40000400 	.word	0x40000400
 800523c:	40000800 	.word	0x40000800
 8005240:	40000c00 	.word	0x40000c00
 8005244:	40013400 	.word	0x40013400
 8005248:	40015000 	.word	0x40015000
 800524c:	40014000 	.word	0x40014000
 8005250:	40014400 	.word	0x40014400
 8005254:	40014800 	.word	0x40014800

08005258 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005268:	2b01      	cmp	r3, #1
 800526a:	d101      	bne.n	8005270 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800526c:	2302      	movs	r3, #2
 800526e:	e074      	b.n	800535a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2202      	movs	r2, #2
 800527c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a34      	ldr	r2, [pc, #208]	@ (8005368 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d009      	beq.n	80052ae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a33      	ldr	r2, [pc, #204]	@ (800536c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d004      	beq.n	80052ae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a31      	ldr	r2, [pc, #196]	@ (8005370 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d108      	bne.n	80052c0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80052b4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	4313      	orrs	r3, r2
 80052be:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80052c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a21      	ldr	r2, [pc, #132]	@ (8005368 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d022      	beq.n	800532e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052f0:	d01d      	beq.n	800532e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a1f      	ldr	r2, [pc, #124]	@ (8005374 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d018      	beq.n	800532e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a1d      	ldr	r2, [pc, #116]	@ (8005378 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d013      	beq.n	800532e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a1c      	ldr	r2, [pc, #112]	@ (800537c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d00e      	beq.n	800532e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a15      	ldr	r2, [pc, #84]	@ (800536c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d009      	beq.n	800532e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a18      	ldr	r2, [pc, #96]	@ (8005380 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d004      	beq.n	800532e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a11      	ldr	r2, [pc, #68]	@ (8005370 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d10c      	bne.n	8005348 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005334:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	68ba      	ldr	r2, [r7, #8]
 800533c:	4313      	orrs	r3, r2
 800533e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68ba      	ldr	r2, [r7, #8]
 8005346:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3714      	adds	r7, #20
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	40012c00 	.word	0x40012c00
 800536c:	40013400 	.word	0x40013400
 8005370:	40015000 	.word	0x40015000
 8005374:	40000400 	.word	0x40000400
 8005378:	40000800 	.word	0x40000800
 800537c:	40000c00 	.word	0x40000c00
 8005380:	40014000 	.word	0x40014000

08005384 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800538c:	bf00      	nop
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80053c8:	bf00      	nop
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005404:	bf00      	nop
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d101      	bne.n	8005422 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e042      	b.n	80054a8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005428:	2b00      	cmp	r3, #0
 800542a:	d106      	bne.n	800543a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f7fd f87d 	bl	8002534 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2224      	movs	r2, #36	@ 0x24
 800543e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f022 0201 	bic.w	r2, r2, #1
 8005450:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005456:	2b00      	cmp	r3, #0
 8005458:	d002      	beq.n	8005460 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 fbb2 	bl	8005bc4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 f8b3 	bl	80055cc <UART_SetConfig>
 8005466:	4603      	mov	r3, r0
 8005468:	2b01      	cmp	r3, #1
 800546a:	d101      	bne.n	8005470 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e01b      	b.n	80054a8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	685a      	ldr	r2, [r3, #4]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800547e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	689a      	ldr	r2, [r3, #8]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800548e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f042 0201 	orr.w	r2, r2, #1
 800549e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 fc31 	bl	8005d08 <UART_CheckIdleState>
 80054a6:	4603      	mov	r3, r0
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3708      	adds	r7, #8
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b08a      	sub	sp, #40	@ 0x28
 80054b4:	af02      	add	r7, sp, #8
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	603b      	str	r3, [r7, #0]
 80054bc:	4613      	mov	r3, r2
 80054be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054c6:	2b20      	cmp	r3, #32
 80054c8:	d17b      	bne.n	80055c2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d002      	beq.n	80054d6 <HAL_UART_Transmit+0x26>
 80054d0:	88fb      	ldrh	r3, [r7, #6]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d101      	bne.n	80054da <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e074      	b.n	80055c4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2221      	movs	r2, #33	@ 0x21
 80054e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054ea:	f7fd fa05 	bl	80028f8 <HAL_GetTick>
 80054ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	88fa      	ldrh	r2, [r7, #6]
 80054f4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	88fa      	ldrh	r2, [r7, #6]
 80054fc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005508:	d108      	bne.n	800551c <HAL_UART_Transmit+0x6c>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d104      	bne.n	800551c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005512:	2300      	movs	r3, #0
 8005514:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	61bb      	str	r3, [r7, #24]
 800551a:	e003      	b.n	8005524 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005520:	2300      	movs	r3, #0
 8005522:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005524:	e030      	b.n	8005588 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	9300      	str	r3, [sp, #0]
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	2200      	movs	r2, #0
 800552e:	2180      	movs	r1, #128	@ 0x80
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f000 fc93 	bl	8005e5c <UART_WaitOnFlagUntilTimeout>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d005      	beq.n	8005548 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2220      	movs	r2, #32
 8005540:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	e03d      	b.n	80055c4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d10b      	bne.n	8005566 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	881b      	ldrh	r3, [r3, #0]
 8005552:	461a      	mov	r2, r3
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800555c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	3302      	adds	r3, #2
 8005562:	61bb      	str	r3, [r7, #24]
 8005564:	e007      	b.n	8005576 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	781a      	ldrb	r2, [r3, #0]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	3301      	adds	r3, #1
 8005574:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800557c:	b29b      	uxth	r3, r3
 800557e:	3b01      	subs	r3, #1
 8005580:	b29a      	uxth	r2, r3
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800558e:	b29b      	uxth	r3, r3
 8005590:	2b00      	cmp	r3, #0
 8005592:	d1c8      	bne.n	8005526 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	9300      	str	r3, [sp, #0]
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	2200      	movs	r2, #0
 800559c:	2140      	movs	r1, #64	@ 0x40
 800559e:	68f8      	ldr	r0, [r7, #12]
 80055a0:	f000 fc5c 	bl	8005e5c <UART_WaitOnFlagUntilTimeout>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d005      	beq.n	80055b6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2220      	movs	r2, #32
 80055ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e006      	b.n	80055c4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2220      	movs	r2, #32
 80055ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80055be:	2300      	movs	r3, #0
 80055c0:	e000      	b.n	80055c4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80055c2:	2302      	movs	r3, #2
  }
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3720      	adds	r7, #32
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055d0:	b08c      	sub	sp, #48	@ 0x30
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80055d6:	2300      	movs	r3, #0
 80055d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	689a      	ldr	r2, [r3, #8]
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	431a      	orrs	r2, r3
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	431a      	orrs	r2, r3
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	69db      	ldr	r3, [r3, #28]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	4baa      	ldr	r3, [pc, #680]	@ (80058a4 <UART_SetConfig+0x2d8>)
 80055fc:	4013      	ands	r3, r2
 80055fe:	697a      	ldr	r2, [r7, #20]
 8005600:	6812      	ldr	r2, [r2, #0]
 8005602:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005604:	430b      	orrs	r3, r1
 8005606:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	68da      	ldr	r2, [r3, #12]
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	430a      	orrs	r2, r1
 800561c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a9f      	ldr	r2, [pc, #636]	@ (80058a8 <UART_SetConfig+0x2dc>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d004      	beq.n	8005638 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	6a1b      	ldr	r3, [r3, #32]
 8005632:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005634:	4313      	orrs	r3, r2
 8005636:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005642:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	6812      	ldr	r2, [r2, #0]
 800564a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800564c:	430b      	orrs	r3, r1
 800564e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005656:	f023 010f 	bic.w	r1, r3, #15
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	430a      	orrs	r2, r1
 8005664:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a90      	ldr	r2, [pc, #576]	@ (80058ac <UART_SetConfig+0x2e0>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d125      	bne.n	80056bc <UART_SetConfig+0xf0>
 8005670:	4b8f      	ldr	r3, [pc, #572]	@ (80058b0 <UART_SetConfig+0x2e4>)
 8005672:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005676:	f003 0303 	and.w	r3, r3, #3
 800567a:	2b03      	cmp	r3, #3
 800567c:	d81a      	bhi.n	80056b4 <UART_SetConfig+0xe8>
 800567e:	a201      	add	r2, pc, #4	@ (adr r2, 8005684 <UART_SetConfig+0xb8>)
 8005680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005684:	08005695 	.word	0x08005695
 8005688:	080056a5 	.word	0x080056a5
 800568c:	0800569d 	.word	0x0800569d
 8005690:	080056ad 	.word	0x080056ad
 8005694:	2301      	movs	r3, #1
 8005696:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800569a:	e116      	b.n	80058ca <UART_SetConfig+0x2fe>
 800569c:	2302      	movs	r3, #2
 800569e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056a2:	e112      	b.n	80058ca <UART_SetConfig+0x2fe>
 80056a4:	2304      	movs	r3, #4
 80056a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056aa:	e10e      	b.n	80058ca <UART_SetConfig+0x2fe>
 80056ac:	2308      	movs	r3, #8
 80056ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056b2:	e10a      	b.n	80058ca <UART_SetConfig+0x2fe>
 80056b4:	2310      	movs	r3, #16
 80056b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056ba:	e106      	b.n	80058ca <UART_SetConfig+0x2fe>
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a7c      	ldr	r2, [pc, #496]	@ (80058b4 <UART_SetConfig+0x2e8>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d138      	bne.n	8005738 <UART_SetConfig+0x16c>
 80056c6:	4b7a      	ldr	r3, [pc, #488]	@ (80058b0 <UART_SetConfig+0x2e4>)
 80056c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056cc:	f003 030c 	and.w	r3, r3, #12
 80056d0:	2b0c      	cmp	r3, #12
 80056d2:	d82d      	bhi.n	8005730 <UART_SetConfig+0x164>
 80056d4:	a201      	add	r2, pc, #4	@ (adr r2, 80056dc <UART_SetConfig+0x110>)
 80056d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056da:	bf00      	nop
 80056dc:	08005711 	.word	0x08005711
 80056e0:	08005731 	.word	0x08005731
 80056e4:	08005731 	.word	0x08005731
 80056e8:	08005731 	.word	0x08005731
 80056ec:	08005721 	.word	0x08005721
 80056f0:	08005731 	.word	0x08005731
 80056f4:	08005731 	.word	0x08005731
 80056f8:	08005731 	.word	0x08005731
 80056fc:	08005719 	.word	0x08005719
 8005700:	08005731 	.word	0x08005731
 8005704:	08005731 	.word	0x08005731
 8005708:	08005731 	.word	0x08005731
 800570c:	08005729 	.word	0x08005729
 8005710:	2300      	movs	r3, #0
 8005712:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005716:	e0d8      	b.n	80058ca <UART_SetConfig+0x2fe>
 8005718:	2302      	movs	r3, #2
 800571a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800571e:	e0d4      	b.n	80058ca <UART_SetConfig+0x2fe>
 8005720:	2304      	movs	r3, #4
 8005722:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005726:	e0d0      	b.n	80058ca <UART_SetConfig+0x2fe>
 8005728:	2308      	movs	r3, #8
 800572a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800572e:	e0cc      	b.n	80058ca <UART_SetConfig+0x2fe>
 8005730:	2310      	movs	r3, #16
 8005732:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005736:	e0c8      	b.n	80058ca <UART_SetConfig+0x2fe>
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a5e      	ldr	r2, [pc, #376]	@ (80058b8 <UART_SetConfig+0x2ec>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d125      	bne.n	800578e <UART_SetConfig+0x1c2>
 8005742:	4b5b      	ldr	r3, [pc, #364]	@ (80058b0 <UART_SetConfig+0x2e4>)
 8005744:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005748:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800574c:	2b30      	cmp	r3, #48	@ 0x30
 800574e:	d016      	beq.n	800577e <UART_SetConfig+0x1b2>
 8005750:	2b30      	cmp	r3, #48	@ 0x30
 8005752:	d818      	bhi.n	8005786 <UART_SetConfig+0x1ba>
 8005754:	2b20      	cmp	r3, #32
 8005756:	d00a      	beq.n	800576e <UART_SetConfig+0x1a2>
 8005758:	2b20      	cmp	r3, #32
 800575a:	d814      	bhi.n	8005786 <UART_SetConfig+0x1ba>
 800575c:	2b00      	cmp	r3, #0
 800575e:	d002      	beq.n	8005766 <UART_SetConfig+0x19a>
 8005760:	2b10      	cmp	r3, #16
 8005762:	d008      	beq.n	8005776 <UART_SetConfig+0x1aa>
 8005764:	e00f      	b.n	8005786 <UART_SetConfig+0x1ba>
 8005766:	2300      	movs	r3, #0
 8005768:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800576c:	e0ad      	b.n	80058ca <UART_SetConfig+0x2fe>
 800576e:	2302      	movs	r3, #2
 8005770:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005774:	e0a9      	b.n	80058ca <UART_SetConfig+0x2fe>
 8005776:	2304      	movs	r3, #4
 8005778:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800577c:	e0a5      	b.n	80058ca <UART_SetConfig+0x2fe>
 800577e:	2308      	movs	r3, #8
 8005780:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005784:	e0a1      	b.n	80058ca <UART_SetConfig+0x2fe>
 8005786:	2310      	movs	r3, #16
 8005788:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800578c:	e09d      	b.n	80058ca <UART_SetConfig+0x2fe>
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a4a      	ldr	r2, [pc, #296]	@ (80058bc <UART_SetConfig+0x2f0>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d125      	bne.n	80057e4 <UART_SetConfig+0x218>
 8005798:	4b45      	ldr	r3, [pc, #276]	@ (80058b0 <UART_SetConfig+0x2e4>)
 800579a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800579e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80057a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80057a4:	d016      	beq.n	80057d4 <UART_SetConfig+0x208>
 80057a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80057a8:	d818      	bhi.n	80057dc <UART_SetConfig+0x210>
 80057aa:	2b80      	cmp	r3, #128	@ 0x80
 80057ac:	d00a      	beq.n	80057c4 <UART_SetConfig+0x1f8>
 80057ae:	2b80      	cmp	r3, #128	@ 0x80
 80057b0:	d814      	bhi.n	80057dc <UART_SetConfig+0x210>
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d002      	beq.n	80057bc <UART_SetConfig+0x1f0>
 80057b6:	2b40      	cmp	r3, #64	@ 0x40
 80057b8:	d008      	beq.n	80057cc <UART_SetConfig+0x200>
 80057ba:	e00f      	b.n	80057dc <UART_SetConfig+0x210>
 80057bc:	2300      	movs	r3, #0
 80057be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057c2:	e082      	b.n	80058ca <UART_SetConfig+0x2fe>
 80057c4:	2302      	movs	r3, #2
 80057c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057ca:	e07e      	b.n	80058ca <UART_SetConfig+0x2fe>
 80057cc:	2304      	movs	r3, #4
 80057ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057d2:	e07a      	b.n	80058ca <UART_SetConfig+0x2fe>
 80057d4:	2308      	movs	r3, #8
 80057d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057da:	e076      	b.n	80058ca <UART_SetConfig+0x2fe>
 80057dc:	2310      	movs	r3, #16
 80057de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057e2:	e072      	b.n	80058ca <UART_SetConfig+0x2fe>
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a35      	ldr	r2, [pc, #212]	@ (80058c0 <UART_SetConfig+0x2f4>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d12a      	bne.n	8005844 <UART_SetConfig+0x278>
 80057ee:	4b30      	ldr	r3, [pc, #192]	@ (80058b0 <UART_SetConfig+0x2e4>)
 80057f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80057fc:	d01a      	beq.n	8005834 <UART_SetConfig+0x268>
 80057fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005802:	d81b      	bhi.n	800583c <UART_SetConfig+0x270>
 8005804:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005808:	d00c      	beq.n	8005824 <UART_SetConfig+0x258>
 800580a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800580e:	d815      	bhi.n	800583c <UART_SetConfig+0x270>
 8005810:	2b00      	cmp	r3, #0
 8005812:	d003      	beq.n	800581c <UART_SetConfig+0x250>
 8005814:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005818:	d008      	beq.n	800582c <UART_SetConfig+0x260>
 800581a:	e00f      	b.n	800583c <UART_SetConfig+0x270>
 800581c:	2300      	movs	r3, #0
 800581e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005822:	e052      	b.n	80058ca <UART_SetConfig+0x2fe>
 8005824:	2302      	movs	r3, #2
 8005826:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800582a:	e04e      	b.n	80058ca <UART_SetConfig+0x2fe>
 800582c:	2304      	movs	r3, #4
 800582e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005832:	e04a      	b.n	80058ca <UART_SetConfig+0x2fe>
 8005834:	2308      	movs	r3, #8
 8005836:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800583a:	e046      	b.n	80058ca <UART_SetConfig+0x2fe>
 800583c:	2310      	movs	r3, #16
 800583e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005842:	e042      	b.n	80058ca <UART_SetConfig+0x2fe>
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a17      	ldr	r2, [pc, #92]	@ (80058a8 <UART_SetConfig+0x2dc>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d13a      	bne.n	80058c4 <UART_SetConfig+0x2f8>
 800584e:	4b18      	ldr	r3, [pc, #96]	@ (80058b0 <UART_SetConfig+0x2e4>)
 8005850:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005854:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005858:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800585c:	d01a      	beq.n	8005894 <UART_SetConfig+0x2c8>
 800585e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005862:	d81b      	bhi.n	800589c <UART_SetConfig+0x2d0>
 8005864:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005868:	d00c      	beq.n	8005884 <UART_SetConfig+0x2b8>
 800586a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800586e:	d815      	bhi.n	800589c <UART_SetConfig+0x2d0>
 8005870:	2b00      	cmp	r3, #0
 8005872:	d003      	beq.n	800587c <UART_SetConfig+0x2b0>
 8005874:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005878:	d008      	beq.n	800588c <UART_SetConfig+0x2c0>
 800587a:	e00f      	b.n	800589c <UART_SetConfig+0x2d0>
 800587c:	2300      	movs	r3, #0
 800587e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005882:	e022      	b.n	80058ca <UART_SetConfig+0x2fe>
 8005884:	2302      	movs	r3, #2
 8005886:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800588a:	e01e      	b.n	80058ca <UART_SetConfig+0x2fe>
 800588c:	2304      	movs	r3, #4
 800588e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005892:	e01a      	b.n	80058ca <UART_SetConfig+0x2fe>
 8005894:	2308      	movs	r3, #8
 8005896:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800589a:	e016      	b.n	80058ca <UART_SetConfig+0x2fe>
 800589c:	2310      	movs	r3, #16
 800589e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058a2:	e012      	b.n	80058ca <UART_SetConfig+0x2fe>
 80058a4:	cfff69f3 	.word	0xcfff69f3
 80058a8:	40008000 	.word	0x40008000
 80058ac:	40013800 	.word	0x40013800
 80058b0:	40021000 	.word	0x40021000
 80058b4:	40004400 	.word	0x40004400
 80058b8:	40004800 	.word	0x40004800
 80058bc:	40004c00 	.word	0x40004c00
 80058c0:	40005000 	.word	0x40005000
 80058c4:	2310      	movs	r3, #16
 80058c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4aae      	ldr	r2, [pc, #696]	@ (8005b88 <UART_SetConfig+0x5bc>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	f040 8097 	bne.w	8005a04 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80058d6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80058da:	2b08      	cmp	r3, #8
 80058dc:	d823      	bhi.n	8005926 <UART_SetConfig+0x35a>
 80058de:	a201      	add	r2, pc, #4	@ (adr r2, 80058e4 <UART_SetConfig+0x318>)
 80058e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e4:	08005909 	.word	0x08005909
 80058e8:	08005927 	.word	0x08005927
 80058ec:	08005911 	.word	0x08005911
 80058f0:	08005927 	.word	0x08005927
 80058f4:	08005917 	.word	0x08005917
 80058f8:	08005927 	.word	0x08005927
 80058fc:	08005927 	.word	0x08005927
 8005900:	08005927 	.word	0x08005927
 8005904:	0800591f 	.word	0x0800591f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005908:	f7fe feea 	bl	80046e0 <HAL_RCC_GetPCLK1Freq>
 800590c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800590e:	e010      	b.n	8005932 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005910:	4b9e      	ldr	r3, [pc, #632]	@ (8005b8c <UART_SetConfig+0x5c0>)
 8005912:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005914:	e00d      	b.n	8005932 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005916:	f7fe fe75 	bl	8004604 <HAL_RCC_GetSysClockFreq>
 800591a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800591c:	e009      	b.n	8005932 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800591e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005922:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005924:	e005      	b.n	8005932 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005926:	2300      	movs	r3, #0
 8005928:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005930:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005934:	2b00      	cmp	r3, #0
 8005936:	f000 8130 	beq.w	8005b9a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800593e:	4a94      	ldr	r2, [pc, #592]	@ (8005b90 <UART_SetConfig+0x5c4>)
 8005940:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005944:	461a      	mov	r2, r3
 8005946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005948:	fbb3 f3f2 	udiv	r3, r3, r2
 800594c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	685a      	ldr	r2, [r3, #4]
 8005952:	4613      	mov	r3, r2
 8005954:	005b      	lsls	r3, r3, #1
 8005956:	4413      	add	r3, r2
 8005958:	69ba      	ldr	r2, [r7, #24]
 800595a:	429a      	cmp	r2, r3
 800595c:	d305      	bcc.n	800596a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005964:	69ba      	ldr	r2, [r7, #24]
 8005966:	429a      	cmp	r2, r3
 8005968:	d903      	bls.n	8005972 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005970:	e113      	b.n	8005b9a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005974:	2200      	movs	r2, #0
 8005976:	60bb      	str	r3, [r7, #8]
 8005978:	60fa      	str	r2, [r7, #12]
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800597e:	4a84      	ldr	r2, [pc, #528]	@ (8005b90 <UART_SetConfig+0x5c4>)
 8005980:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005984:	b29b      	uxth	r3, r3
 8005986:	2200      	movs	r2, #0
 8005988:	603b      	str	r3, [r7, #0]
 800598a:	607a      	str	r2, [r7, #4]
 800598c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005990:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005994:	f7fb f962 	bl	8000c5c <__aeabi_uldivmod>
 8005998:	4602      	mov	r2, r0
 800599a:	460b      	mov	r3, r1
 800599c:	4610      	mov	r0, r2
 800599e:	4619      	mov	r1, r3
 80059a0:	f04f 0200 	mov.w	r2, #0
 80059a4:	f04f 0300 	mov.w	r3, #0
 80059a8:	020b      	lsls	r3, r1, #8
 80059aa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80059ae:	0202      	lsls	r2, r0, #8
 80059b0:	6979      	ldr	r1, [r7, #20]
 80059b2:	6849      	ldr	r1, [r1, #4]
 80059b4:	0849      	lsrs	r1, r1, #1
 80059b6:	2000      	movs	r0, #0
 80059b8:	460c      	mov	r4, r1
 80059ba:	4605      	mov	r5, r0
 80059bc:	eb12 0804 	adds.w	r8, r2, r4
 80059c0:	eb43 0905 	adc.w	r9, r3, r5
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	469a      	mov	sl, r3
 80059cc:	4693      	mov	fp, r2
 80059ce:	4652      	mov	r2, sl
 80059d0:	465b      	mov	r3, fp
 80059d2:	4640      	mov	r0, r8
 80059d4:	4649      	mov	r1, r9
 80059d6:	f7fb f941 	bl	8000c5c <__aeabi_uldivmod>
 80059da:	4602      	mov	r2, r0
 80059dc:	460b      	mov	r3, r1
 80059de:	4613      	mov	r3, r2
 80059e0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80059e2:	6a3b      	ldr	r3, [r7, #32]
 80059e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80059e8:	d308      	bcc.n	80059fc <UART_SetConfig+0x430>
 80059ea:	6a3b      	ldr	r3, [r7, #32]
 80059ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059f0:	d204      	bcs.n	80059fc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	6a3a      	ldr	r2, [r7, #32]
 80059f8:	60da      	str	r2, [r3, #12]
 80059fa:	e0ce      	b.n	8005b9a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005a02:	e0ca      	b.n	8005b9a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	69db      	ldr	r3, [r3, #28]
 8005a08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a0c:	d166      	bne.n	8005adc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005a0e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005a12:	2b08      	cmp	r3, #8
 8005a14:	d827      	bhi.n	8005a66 <UART_SetConfig+0x49a>
 8005a16:	a201      	add	r2, pc, #4	@ (adr r2, 8005a1c <UART_SetConfig+0x450>)
 8005a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a1c:	08005a41 	.word	0x08005a41
 8005a20:	08005a49 	.word	0x08005a49
 8005a24:	08005a51 	.word	0x08005a51
 8005a28:	08005a67 	.word	0x08005a67
 8005a2c:	08005a57 	.word	0x08005a57
 8005a30:	08005a67 	.word	0x08005a67
 8005a34:	08005a67 	.word	0x08005a67
 8005a38:	08005a67 	.word	0x08005a67
 8005a3c:	08005a5f 	.word	0x08005a5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a40:	f7fe fe4e 	bl	80046e0 <HAL_RCC_GetPCLK1Freq>
 8005a44:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a46:	e014      	b.n	8005a72 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a48:	f7fe fe60 	bl	800470c <HAL_RCC_GetPCLK2Freq>
 8005a4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a4e:	e010      	b.n	8005a72 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a50:	4b4e      	ldr	r3, [pc, #312]	@ (8005b8c <UART_SetConfig+0x5c0>)
 8005a52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005a54:	e00d      	b.n	8005a72 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a56:	f7fe fdd5 	bl	8004604 <HAL_RCC_GetSysClockFreq>
 8005a5a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a5c:	e009      	b.n	8005a72 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005a64:	e005      	b.n	8005a72 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005a66:	2300      	movs	r3, #0
 8005a68:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005a70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f000 8090 	beq.w	8005b9a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a7e:	4a44      	ldr	r2, [pc, #272]	@ (8005b90 <UART_SetConfig+0x5c4>)
 8005a80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a84:	461a      	mov	r2, r3
 8005a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a88:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a8c:	005a      	lsls	r2, r3, #1
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	085b      	lsrs	r3, r3, #1
 8005a94:	441a      	add	r2, r3
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a9e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005aa0:	6a3b      	ldr	r3, [r7, #32]
 8005aa2:	2b0f      	cmp	r3, #15
 8005aa4:	d916      	bls.n	8005ad4 <UART_SetConfig+0x508>
 8005aa6:	6a3b      	ldr	r3, [r7, #32]
 8005aa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005aac:	d212      	bcs.n	8005ad4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005aae:	6a3b      	ldr	r3, [r7, #32]
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	f023 030f 	bic.w	r3, r3, #15
 8005ab6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ab8:	6a3b      	ldr	r3, [r7, #32]
 8005aba:	085b      	lsrs	r3, r3, #1
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	f003 0307 	and.w	r3, r3, #7
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	8bfb      	ldrh	r3, [r7, #30]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	8bfa      	ldrh	r2, [r7, #30]
 8005ad0:	60da      	str	r2, [r3, #12]
 8005ad2:	e062      	b.n	8005b9a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005ada:	e05e      	b.n	8005b9a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005adc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005ae0:	2b08      	cmp	r3, #8
 8005ae2:	d828      	bhi.n	8005b36 <UART_SetConfig+0x56a>
 8005ae4:	a201      	add	r2, pc, #4	@ (adr r2, 8005aec <UART_SetConfig+0x520>)
 8005ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aea:	bf00      	nop
 8005aec:	08005b11 	.word	0x08005b11
 8005af0:	08005b19 	.word	0x08005b19
 8005af4:	08005b21 	.word	0x08005b21
 8005af8:	08005b37 	.word	0x08005b37
 8005afc:	08005b27 	.word	0x08005b27
 8005b00:	08005b37 	.word	0x08005b37
 8005b04:	08005b37 	.word	0x08005b37
 8005b08:	08005b37 	.word	0x08005b37
 8005b0c:	08005b2f 	.word	0x08005b2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b10:	f7fe fde6 	bl	80046e0 <HAL_RCC_GetPCLK1Freq>
 8005b14:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b16:	e014      	b.n	8005b42 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b18:	f7fe fdf8 	bl	800470c <HAL_RCC_GetPCLK2Freq>
 8005b1c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b1e:	e010      	b.n	8005b42 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b20:	4b1a      	ldr	r3, [pc, #104]	@ (8005b8c <UART_SetConfig+0x5c0>)
 8005b22:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005b24:	e00d      	b.n	8005b42 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b26:	f7fe fd6d 	bl	8004604 <HAL_RCC_GetSysClockFreq>
 8005b2a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b2c:	e009      	b.n	8005b42 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005b34:	e005      	b.n	8005b42 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005b36:	2300      	movs	r3, #0
 8005b38:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005b40:	bf00      	nop
    }

    if (pclk != 0U)
 8005b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d028      	beq.n	8005b9a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b4c:	4a10      	ldr	r2, [pc, #64]	@ (8005b90 <UART_SetConfig+0x5c4>)
 8005b4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b52:	461a      	mov	r2, r3
 8005b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b56:	fbb3 f2f2 	udiv	r2, r3, r2
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	085b      	lsrs	r3, r3, #1
 8005b60:	441a      	add	r2, r3
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b6a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b6c:	6a3b      	ldr	r3, [r7, #32]
 8005b6e:	2b0f      	cmp	r3, #15
 8005b70:	d910      	bls.n	8005b94 <UART_SetConfig+0x5c8>
 8005b72:	6a3b      	ldr	r3, [r7, #32]
 8005b74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b78:	d20c      	bcs.n	8005b94 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b7a:	6a3b      	ldr	r3, [r7, #32]
 8005b7c:	b29a      	uxth	r2, r3
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	60da      	str	r2, [r3, #12]
 8005b84:	e009      	b.n	8005b9a <UART_SetConfig+0x5ce>
 8005b86:	bf00      	nop
 8005b88:	40008000 	.word	0x40008000
 8005b8c:	00f42400 	.word	0x00f42400
 8005b90:	08008528 	.word	0x08008528
      }
      else
      {
        ret = HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	2200      	movs	r2, #0
 8005bae:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005bb6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3730      	adds	r7, #48	@ 0x30
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005bc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bd0:	f003 0308 	and.w	r3, r3, #8
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d00a      	beq.n	8005bee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	430a      	orrs	r2, r1
 8005bec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bf2:	f003 0301 	and.w	r3, r3, #1
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00a      	beq.n	8005c10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	430a      	orrs	r2, r1
 8005c0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c14:	f003 0302 	and.w	r3, r3, #2
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d00a      	beq.n	8005c32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	430a      	orrs	r2, r1
 8005c30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c36:	f003 0304 	and.w	r3, r3, #4
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00a      	beq.n	8005c54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	430a      	orrs	r2, r1
 8005c52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c58:	f003 0310 	and.w	r3, r3, #16
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d00a      	beq.n	8005c76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	430a      	orrs	r2, r1
 8005c74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c7a:	f003 0320 	and.w	r3, r3, #32
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00a      	beq.n	8005c98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	430a      	orrs	r2, r1
 8005c96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d01a      	beq.n	8005cda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	430a      	orrs	r2, r1
 8005cb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005cc2:	d10a      	bne.n	8005cda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00a      	beq.n	8005cfc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	430a      	orrs	r2, r1
 8005cfa:	605a      	str	r2, [r3, #4]
  }
}
 8005cfc:	bf00      	nop
 8005cfe:	370c      	adds	r7, #12
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b098      	sub	sp, #96	@ 0x60
 8005d0c:	af02      	add	r7, sp, #8
 8005d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d18:	f7fc fdee 	bl	80028f8 <HAL_GetTick>
 8005d1c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 0308 	and.w	r3, r3, #8
 8005d28:	2b08      	cmp	r3, #8
 8005d2a:	d12f      	bne.n	8005d8c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d2c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005d30:	9300      	str	r3, [sp, #0]
 8005d32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d34:	2200      	movs	r2, #0
 8005d36:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 f88e 	bl	8005e5c <UART_WaitOnFlagUntilTimeout>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d022      	beq.n	8005d8c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d4e:	e853 3f00 	ldrex	r3, [r3]
 8005d52:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	461a      	mov	r2, r3
 8005d62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d64:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d66:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d6c:	e841 2300 	strex	r3, r2, [r1]
 8005d70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d1e6      	bne.n	8005d46 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2220      	movs	r2, #32
 8005d7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d88:	2303      	movs	r3, #3
 8005d8a:	e063      	b.n	8005e54 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 0304 	and.w	r3, r3, #4
 8005d96:	2b04      	cmp	r3, #4
 8005d98:	d149      	bne.n	8005e2e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d9a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005d9e:	9300      	str	r3, [sp, #0]
 8005da0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005da2:	2200      	movs	r2, #0
 8005da4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f000 f857 	bl	8005e5c <UART_WaitOnFlagUntilTimeout>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d03c      	beq.n	8005e2e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dbc:	e853 3f00 	ldrex	r3, [r3]
 8005dc0:	623b      	str	r3, [r7, #32]
   return(result);
 8005dc2:	6a3b      	ldr	r3, [r7, #32]
 8005dc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005dc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	461a      	mov	r2, r3
 8005dd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005dd2:	633b      	str	r3, [r7, #48]	@ 0x30
 8005dd4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005dd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005dda:	e841 2300 	strex	r3, r2, [r1]
 8005dde:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d1e6      	bne.n	8005db4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	3308      	adds	r3, #8
 8005dec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	e853 3f00 	ldrex	r3, [r3]
 8005df4:	60fb      	str	r3, [r7, #12]
   return(result);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f023 0301 	bic.w	r3, r3, #1
 8005dfc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	3308      	adds	r3, #8
 8005e04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e06:	61fa      	str	r2, [r7, #28]
 8005e08:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e0a:	69b9      	ldr	r1, [r7, #24]
 8005e0c:	69fa      	ldr	r2, [r7, #28]
 8005e0e:	e841 2300 	strex	r3, r2, [r1]
 8005e12:	617b      	str	r3, [r7, #20]
   return(result);
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d1e5      	bne.n	8005de6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2220      	movs	r2, #32
 8005e1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	e012      	b.n	8005e54 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2220      	movs	r2, #32
 8005e32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2220      	movs	r2, #32
 8005e3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3758      	adds	r7, #88	@ 0x58
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	603b      	str	r3, [r7, #0]
 8005e68:	4613      	mov	r3, r2
 8005e6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e6c:	e04f      	b.n	8005f0e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e74:	d04b      	beq.n	8005f0e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e76:	f7fc fd3f 	bl	80028f8 <HAL_GetTick>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	1ad3      	subs	r3, r2, r3
 8005e80:	69ba      	ldr	r2, [r7, #24]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d302      	bcc.n	8005e8c <UART_WaitOnFlagUntilTimeout+0x30>
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d101      	bne.n	8005e90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	e04e      	b.n	8005f2e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0304 	and.w	r3, r3, #4
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d037      	beq.n	8005f0e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	2b80      	cmp	r3, #128	@ 0x80
 8005ea2:	d034      	beq.n	8005f0e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	2b40      	cmp	r3, #64	@ 0x40
 8005ea8:	d031      	beq.n	8005f0e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	69db      	ldr	r3, [r3, #28]
 8005eb0:	f003 0308 	and.w	r3, r3, #8
 8005eb4:	2b08      	cmp	r3, #8
 8005eb6:	d110      	bne.n	8005eda <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2208      	movs	r2, #8
 8005ebe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	f000 f838 	bl	8005f36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2208      	movs	r2, #8
 8005eca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e029      	b.n	8005f2e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	69db      	ldr	r3, [r3, #28]
 8005ee0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ee4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ee8:	d111      	bne.n	8005f0e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005ef2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	f000 f81e 	bl	8005f36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2220      	movs	r2, #32
 8005efe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e00f      	b.n	8005f2e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	69da      	ldr	r2, [r3, #28]
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	4013      	ands	r3, r2
 8005f18:	68ba      	ldr	r2, [r7, #8]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	bf0c      	ite	eq
 8005f1e:	2301      	moveq	r3, #1
 8005f20:	2300      	movne	r3, #0
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	461a      	mov	r2, r3
 8005f26:	79fb      	ldrb	r3, [r7, #7]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d0a0      	beq.n	8005e6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3710      	adds	r7, #16
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}

08005f36 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f36:	b480      	push	{r7}
 8005f38:	b095      	sub	sp, #84	@ 0x54
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f46:	e853 3f00 	ldrex	r3, [r3]
 8005f4a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f4e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	461a      	mov	r2, r3
 8005f5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f5e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f60:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005f62:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f64:	e841 2300 	strex	r3, r2, [r1]
 8005f68:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d1e6      	bne.n	8005f3e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	3308      	adds	r3, #8
 8005f76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f78:	6a3b      	ldr	r3, [r7, #32]
 8005f7a:	e853 3f00 	ldrex	r3, [r3]
 8005f7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f86:	f023 0301 	bic.w	r3, r3, #1
 8005f8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	3308      	adds	r3, #8
 8005f92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f94:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f96:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f9c:	e841 2300 	strex	r3, r2, [r1]
 8005fa0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d1e3      	bne.n	8005f70 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d118      	bne.n	8005fe2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	e853 3f00 	ldrex	r3, [r3]
 8005fbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	f023 0310 	bic.w	r3, r3, #16
 8005fc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	461a      	mov	r2, r3
 8005fcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fce:	61bb      	str	r3, [r7, #24]
 8005fd0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd2:	6979      	ldr	r1, [r7, #20]
 8005fd4:	69ba      	ldr	r2, [r7, #24]
 8005fd6:	e841 2300 	strex	r3, r2, [r1]
 8005fda:	613b      	str	r3, [r7, #16]
   return(result);
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d1e6      	bne.n	8005fb0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2220      	movs	r2, #32
 8005fe6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005ff6:	bf00      	nop
 8005ff8:	3754      	adds	r7, #84	@ 0x54
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr

08006002 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006002:	b480      	push	{r7}
 8006004:	b085      	sub	sp, #20
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006010:	2b01      	cmp	r3, #1
 8006012:	d101      	bne.n	8006018 <HAL_UARTEx_DisableFifoMode+0x16>
 8006014:	2302      	movs	r3, #2
 8006016:	e027      	b.n	8006068 <HAL_UARTEx_DisableFifoMode+0x66>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2224      	movs	r2, #36	@ 0x24
 8006024:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f022 0201 	bic.w	r2, r2, #1
 800603e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006046:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2220      	movs	r2, #32
 800605a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006066:	2300      	movs	r3, #0
}
 8006068:	4618      	mov	r0, r3
 800606a:	3714      	adds	r7, #20
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006084:	2b01      	cmp	r3, #1
 8006086:	d101      	bne.n	800608c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006088:	2302      	movs	r3, #2
 800608a:	e02d      	b.n	80060e8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2224      	movs	r2, #36	@ 0x24
 8006098:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f022 0201 	bic.w	r2, r2, #1
 80060b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	683a      	ldr	r2, [r7, #0]
 80060c4:	430a      	orrs	r2, r1
 80060c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 f84f 	bl	800616c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2220      	movs	r2, #32
 80060da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80060e6:	2300      	movs	r3, #0
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3710      	adds	r7, #16
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006100:	2b01      	cmp	r3, #1
 8006102:	d101      	bne.n	8006108 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006104:	2302      	movs	r3, #2
 8006106:	e02d      	b.n	8006164 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2224      	movs	r2, #36	@ 0x24
 8006114:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f022 0201 	bic.w	r2, r2, #1
 800612e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	683a      	ldr	r2, [r7, #0]
 8006140:	430a      	orrs	r2, r1
 8006142:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 f811 	bl	800616c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2220      	movs	r2, #32
 8006156:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006162:	2300      	movs	r3, #0
}
 8006164:	4618      	mov	r0, r3
 8006166:	3710      	adds	r7, #16
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800616c:	b480      	push	{r7}
 800616e:	b085      	sub	sp, #20
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006178:	2b00      	cmp	r3, #0
 800617a:	d108      	bne.n	800618e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800618c:	e031      	b.n	80061f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800618e:	2308      	movs	r3, #8
 8006190:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006192:	2308      	movs	r3, #8
 8006194:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	0e5b      	lsrs	r3, r3, #25
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	f003 0307 	and.w	r3, r3, #7
 80061a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	0f5b      	lsrs	r3, r3, #29
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	f003 0307 	and.w	r3, r3, #7
 80061b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80061b6:	7bbb      	ldrb	r3, [r7, #14]
 80061b8:	7b3a      	ldrb	r2, [r7, #12]
 80061ba:	4911      	ldr	r1, [pc, #68]	@ (8006200 <UARTEx_SetNbDataToProcess+0x94>)
 80061bc:	5c8a      	ldrb	r2, [r1, r2]
 80061be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80061c2:	7b3a      	ldrb	r2, [r7, #12]
 80061c4:	490f      	ldr	r1, [pc, #60]	@ (8006204 <UARTEx_SetNbDataToProcess+0x98>)
 80061c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80061c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80061cc:	b29a      	uxth	r2, r3
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80061d4:	7bfb      	ldrb	r3, [r7, #15]
 80061d6:	7b7a      	ldrb	r2, [r7, #13]
 80061d8:	4909      	ldr	r1, [pc, #36]	@ (8006200 <UARTEx_SetNbDataToProcess+0x94>)
 80061da:	5c8a      	ldrb	r2, [r1, r2]
 80061dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80061e0:	7b7a      	ldrb	r2, [r7, #13]
 80061e2:	4908      	ldr	r1, [pc, #32]	@ (8006204 <UARTEx_SetNbDataToProcess+0x98>)
 80061e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80061e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80061f2:	bf00      	nop
 80061f4:	3714      	adds	r7, #20
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	08008540 	.word	0x08008540
 8006204:	08008548 	.word	0x08008548

08006208 <std>:
 8006208:	2300      	movs	r3, #0
 800620a:	b510      	push	{r4, lr}
 800620c:	4604      	mov	r4, r0
 800620e:	e9c0 3300 	strd	r3, r3, [r0]
 8006212:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006216:	6083      	str	r3, [r0, #8]
 8006218:	8181      	strh	r1, [r0, #12]
 800621a:	6643      	str	r3, [r0, #100]	@ 0x64
 800621c:	81c2      	strh	r2, [r0, #14]
 800621e:	6183      	str	r3, [r0, #24]
 8006220:	4619      	mov	r1, r3
 8006222:	2208      	movs	r2, #8
 8006224:	305c      	adds	r0, #92	@ 0x5c
 8006226:	f000 fab5 	bl	8006794 <memset>
 800622a:	4b0d      	ldr	r3, [pc, #52]	@ (8006260 <std+0x58>)
 800622c:	6263      	str	r3, [r4, #36]	@ 0x24
 800622e:	4b0d      	ldr	r3, [pc, #52]	@ (8006264 <std+0x5c>)
 8006230:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006232:	4b0d      	ldr	r3, [pc, #52]	@ (8006268 <std+0x60>)
 8006234:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006236:	4b0d      	ldr	r3, [pc, #52]	@ (800626c <std+0x64>)
 8006238:	6323      	str	r3, [r4, #48]	@ 0x30
 800623a:	4b0d      	ldr	r3, [pc, #52]	@ (8006270 <std+0x68>)
 800623c:	6224      	str	r4, [r4, #32]
 800623e:	429c      	cmp	r4, r3
 8006240:	d006      	beq.n	8006250 <std+0x48>
 8006242:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006246:	4294      	cmp	r4, r2
 8006248:	d002      	beq.n	8006250 <std+0x48>
 800624a:	33d0      	adds	r3, #208	@ 0xd0
 800624c:	429c      	cmp	r4, r3
 800624e:	d105      	bne.n	800625c <std+0x54>
 8006250:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006258:	f000 bb14 	b.w	8006884 <__retarget_lock_init_recursive>
 800625c:	bd10      	pop	{r4, pc}
 800625e:	bf00      	nop
 8006260:	080065e5 	.word	0x080065e5
 8006264:	08006607 	.word	0x08006607
 8006268:	0800663f 	.word	0x0800663f
 800626c:	08006663 	.word	0x08006663
 8006270:	200003ac 	.word	0x200003ac

08006274 <stdio_exit_handler>:
 8006274:	4a02      	ldr	r2, [pc, #8]	@ (8006280 <stdio_exit_handler+0xc>)
 8006276:	4903      	ldr	r1, [pc, #12]	@ (8006284 <stdio_exit_handler+0x10>)
 8006278:	4803      	ldr	r0, [pc, #12]	@ (8006288 <stdio_exit_handler+0x14>)
 800627a:	f000 b869 	b.w	8006350 <_fwalk_sglue>
 800627e:	bf00      	nop
 8006280:	200000b8 	.word	0x200000b8
 8006284:	08007135 	.word	0x08007135
 8006288:	200000c8 	.word	0x200000c8

0800628c <cleanup_stdio>:
 800628c:	6841      	ldr	r1, [r0, #4]
 800628e:	4b0c      	ldr	r3, [pc, #48]	@ (80062c0 <cleanup_stdio+0x34>)
 8006290:	4299      	cmp	r1, r3
 8006292:	b510      	push	{r4, lr}
 8006294:	4604      	mov	r4, r0
 8006296:	d001      	beq.n	800629c <cleanup_stdio+0x10>
 8006298:	f000 ff4c 	bl	8007134 <_fflush_r>
 800629c:	68a1      	ldr	r1, [r4, #8]
 800629e:	4b09      	ldr	r3, [pc, #36]	@ (80062c4 <cleanup_stdio+0x38>)
 80062a0:	4299      	cmp	r1, r3
 80062a2:	d002      	beq.n	80062aa <cleanup_stdio+0x1e>
 80062a4:	4620      	mov	r0, r4
 80062a6:	f000 ff45 	bl	8007134 <_fflush_r>
 80062aa:	68e1      	ldr	r1, [r4, #12]
 80062ac:	4b06      	ldr	r3, [pc, #24]	@ (80062c8 <cleanup_stdio+0x3c>)
 80062ae:	4299      	cmp	r1, r3
 80062b0:	d004      	beq.n	80062bc <cleanup_stdio+0x30>
 80062b2:	4620      	mov	r0, r4
 80062b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062b8:	f000 bf3c 	b.w	8007134 <_fflush_r>
 80062bc:	bd10      	pop	{r4, pc}
 80062be:	bf00      	nop
 80062c0:	200003ac 	.word	0x200003ac
 80062c4:	20000414 	.word	0x20000414
 80062c8:	2000047c 	.word	0x2000047c

080062cc <global_stdio_init.part.0>:
 80062cc:	b510      	push	{r4, lr}
 80062ce:	4b0b      	ldr	r3, [pc, #44]	@ (80062fc <global_stdio_init.part.0+0x30>)
 80062d0:	4c0b      	ldr	r4, [pc, #44]	@ (8006300 <global_stdio_init.part.0+0x34>)
 80062d2:	4a0c      	ldr	r2, [pc, #48]	@ (8006304 <global_stdio_init.part.0+0x38>)
 80062d4:	601a      	str	r2, [r3, #0]
 80062d6:	4620      	mov	r0, r4
 80062d8:	2200      	movs	r2, #0
 80062da:	2104      	movs	r1, #4
 80062dc:	f7ff ff94 	bl	8006208 <std>
 80062e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80062e4:	2201      	movs	r2, #1
 80062e6:	2109      	movs	r1, #9
 80062e8:	f7ff ff8e 	bl	8006208 <std>
 80062ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80062f0:	2202      	movs	r2, #2
 80062f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062f6:	2112      	movs	r1, #18
 80062f8:	f7ff bf86 	b.w	8006208 <std>
 80062fc:	200004e4 	.word	0x200004e4
 8006300:	200003ac 	.word	0x200003ac
 8006304:	08006275 	.word	0x08006275

08006308 <__sfp_lock_acquire>:
 8006308:	4801      	ldr	r0, [pc, #4]	@ (8006310 <__sfp_lock_acquire+0x8>)
 800630a:	f000 babc 	b.w	8006886 <__retarget_lock_acquire_recursive>
 800630e:	bf00      	nop
 8006310:	200004ed 	.word	0x200004ed

08006314 <__sfp_lock_release>:
 8006314:	4801      	ldr	r0, [pc, #4]	@ (800631c <__sfp_lock_release+0x8>)
 8006316:	f000 bab7 	b.w	8006888 <__retarget_lock_release_recursive>
 800631a:	bf00      	nop
 800631c:	200004ed 	.word	0x200004ed

08006320 <__sinit>:
 8006320:	b510      	push	{r4, lr}
 8006322:	4604      	mov	r4, r0
 8006324:	f7ff fff0 	bl	8006308 <__sfp_lock_acquire>
 8006328:	6a23      	ldr	r3, [r4, #32]
 800632a:	b11b      	cbz	r3, 8006334 <__sinit+0x14>
 800632c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006330:	f7ff bff0 	b.w	8006314 <__sfp_lock_release>
 8006334:	4b04      	ldr	r3, [pc, #16]	@ (8006348 <__sinit+0x28>)
 8006336:	6223      	str	r3, [r4, #32]
 8006338:	4b04      	ldr	r3, [pc, #16]	@ (800634c <__sinit+0x2c>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d1f5      	bne.n	800632c <__sinit+0xc>
 8006340:	f7ff ffc4 	bl	80062cc <global_stdio_init.part.0>
 8006344:	e7f2      	b.n	800632c <__sinit+0xc>
 8006346:	bf00      	nop
 8006348:	0800628d 	.word	0x0800628d
 800634c:	200004e4 	.word	0x200004e4

08006350 <_fwalk_sglue>:
 8006350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006354:	4607      	mov	r7, r0
 8006356:	4688      	mov	r8, r1
 8006358:	4614      	mov	r4, r2
 800635a:	2600      	movs	r6, #0
 800635c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006360:	f1b9 0901 	subs.w	r9, r9, #1
 8006364:	d505      	bpl.n	8006372 <_fwalk_sglue+0x22>
 8006366:	6824      	ldr	r4, [r4, #0]
 8006368:	2c00      	cmp	r4, #0
 800636a:	d1f7      	bne.n	800635c <_fwalk_sglue+0xc>
 800636c:	4630      	mov	r0, r6
 800636e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006372:	89ab      	ldrh	r3, [r5, #12]
 8006374:	2b01      	cmp	r3, #1
 8006376:	d907      	bls.n	8006388 <_fwalk_sglue+0x38>
 8006378:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800637c:	3301      	adds	r3, #1
 800637e:	d003      	beq.n	8006388 <_fwalk_sglue+0x38>
 8006380:	4629      	mov	r1, r5
 8006382:	4638      	mov	r0, r7
 8006384:	47c0      	blx	r8
 8006386:	4306      	orrs	r6, r0
 8006388:	3568      	adds	r5, #104	@ 0x68
 800638a:	e7e9      	b.n	8006360 <_fwalk_sglue+0x10>

0800638c <iprintf>:
 800638c:	b40f      	push	{r0, r1, r2, r3}
 800638e:	b507      	push	{r0, r1, r2, lr}
 8006390:	4906      	ldr	r1, [pc, #24]	@ (80063ac <iprintf+0x20>)
 8006392:	ab04      	add	r3, sp, #16
 8006394:	6808      	ldr	r0, [r1, #0]
 8006396:	f853 2b04 	ldr.w	r2, [r3], #4
 800639a:	6881      	ldr	r1, [r0, #8]
 800639c:	9301      	str	r3, [sp, #4]
 800639e:	f000 fb9f 	bl	8006ae0 <_vfiprintf_r>
 80063a2:	b003      	add	sp, #12
 80063a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80063a8:	b004      	add	sp, #16
 80063aa:	4770      	bx	lr
 80063ac:	200000c4 	.word	0x200000c4

080063b0 <_puts_r>:
 80063b0:	6a03      	ldr	r3, [r0, #32]
 80063b2:	b570      	push	{r4, r5, r6, lr}
 80063b4:	6884      	ldr	r4, [r0, #8]
 80063b6:	4605      	mov	r5, r0
 80063b8:	460e      	mov	r6, r1
 80063ba:	b90b      	cbnz	r3, 80063c0 <_puts_r+0x10>
 80063bc:	f7ff ffb0 	bl	8006320 <__sinit>
 80063c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80063c2:	07db      	lsls	r3, r3, #31
 80063c4:	d405      	bmi.n	80063d2 <_puts_r+0x22>
 80063c6:	89a3      	ldrh	r3, [r4, #12]
 80063c8:	0598      	lsls	r0, r3, #22
 80063ca:	d402      	bmi.n	80063d2 <_puts_r+0x22>
 80063cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063ce:	f000 fa5a 	bl	8006886 <__retarget_lock_acquire_recursive>
 80063d2:	89a3      	ldrh	r3, [r4, #12]
 80063d4:	0719      	lsls	r1, r3, #28
 80063d6:	d502      	bpl.n	80063de <_puts_r+0x2e>
 80063d8:	6923      	ldr	r3, [r4, #16]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d135      	bne.n	800644a <_puts_r+0x9a>
 80063de:	4621      	mov	r1, r4
 80063e0:	4628      	mov	r0, r5
 80063e2:	f000 f981 	bl	80066e8 <__swsetup_r>
 80063e6:	b380      	cbz	r0, 800644a <_puts_r+0x9a>
 80063e8:	f04f 35ff 	mov.w	r5, #4294967295
 80063ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80063ee:	07da      	lsls	r2, r3, #31
 80063f0:	d405      	bmi.n	80063fe <_puts_r+0x4e>
 80063f2:	89a3      	ldrh	r3, [r4, #12]
 80063f4:	059b      	lsls	r3, r3, #22
 80063f6:	d402      	bmi.n	80063fe <_puts_r+0x4e>
 80063f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063fa:	f000 fa45 	bl	8006888 <__retarget_lock_release_recursive>
 80063fe:	4628      	mov	r0, r5
 8006400:	bd70      	pop	{r4, r5, r6, pc}
 8006402:	2b00      	cmp	r3, #0
 8006404:	da04      	bge.n	8006410 <_puts_r+0x60>
 8006406:	69a2      	ldr	r2, [r4, #24]
 8006408:	429a      	cmp	r2, r3
 800640a:	dc17      	bgt.n	800643c <_puts_r+0x8c>
 800640c:	290a      	cmp	r1, #10
 800640e:	d015      	beq.n	800643c <_puts_r+0x8c>
 8006410:	6823      	ldr	r3, [r4, #0]
 8006412:	1c5a      	adds	r2, r3, #1
 8006414:	6022      	str	r2, [r4, #0]
 8006416:	7019      	strb	r1, [r3, #0]
 8006418:	68a3      	ldr	r3, [r4, #8]
 800641a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800641e:	3b01      	subs	r3, #1
 8006420:	60a3      	str	r3, [r4, #8]
 8006422:	2900      	cmp	r1, #0
 8006424:	d1ed      	bne.n	8006402 <_puts_r+0x52>
 8006426:	2b00      	cmp	r3, #0
 8006428:	da11      	bge.n	800644e <_puts_r+0x9e>
 800642a:	4622      	mov	r2, r4
 800642c:	210a      	movs	r1, #10
 800642e:	4628      	mov	r0, r5
 8006430:	f000 f91b 	bl	800666a <__swbuf_r>
 8006434:	3001      	adds	r0, #1
 8006436:	d0d7      	beq.n	80063e8 <_puts_r+0x38>
 8006438:	250a      	movs	r5, #10
 800643a:	e7d7      	b.n	80063ec <_puts_r+0x3c>
 800643c:	4622      	mov	r2, r4
 800643e:	4628      	mov	r0, r5
 8006440:	f000 f913 	bl	800666a <__swbuf_r>
 8006444:	3001      	adds	r0, #1
 8006446:	d1e7      	bne.n	8006418 <_puts_r+0x68>
 8006448:	e7ce      	b.n	80063e8 <_puts_r+0x38>
 800644a:	3e01      	subs	r6, #1
 800644c:	e7e4      	b.n	8006418 <_puts_r+0x68>
 800644e:	6823      	ldr	r3, [r4, #0]
 8006450:	1c5a      	adds	r2, r3, #1
 8006452:	6022      	str	r2, [r4, #0]
 8006454:	220a      	movs	r2, #10
 8006456:	701a      	strb	r2, [r3, #0]
 8006458:	e7ee      	b.n	8006438 <_puts_r+0x88>
	...

0800645c <puts>:
 800645c:	4b02      	ldr	r3, [pc, #8]	@ (8006468 <puts+0xc>)
 800645e:	4601      	mov	r1, r0
 8006460:	6818      	ldr	r0, [r3, #0]
 8006462:	f7ff bfa5 	b.w	80063b0 <_puts_r>
 8006466:	bf00      	nop
 8006468:	200000c4 	.word	0x200000c4

0800646c <setbuf>:
 800646c:	fab1 f281 	clz	r2, r1
 8006470:	0952      	lsrs	r2, r2, #5
 8006472:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006476:	0052      	lsls	r2, r2, #1
 8006478:	f000 b800 	b.w	800647c <setvbuf>

0800647c <setvbuf>:
 800647c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006480:	461d      	mov	r5, r3
 8006482:	4b57      	ldr	r3, [pc, #348]	@ (80065e0 <setvbuf+0x164>)
 8006484:	681f      	ldr	r7, [r3, #0]
 8006486:	4604      	mov	r4, r0
 8006488:	460e      	mov	r6, r1
 800648a:	4690      	mov	r8, r2
 800648c:	b127      	cbz	r7, 8006498 <setvbuf+0x1c>
 800648e:	6a3b      	ldr	r3, [r7, #32]
 8006490:	b913      	cbnz	r3, 8006498 <setvbuf+0x1c>
 8006492:	4638      	mov	r0, r7
 8006494:	f7ff ff44 	bl	8006320 <__sinit>
 8006498:	f1b8 0f02 	cmp.w	r8, #2
 800649c:	d006      	beq.n	80064ac <setvbuf+0x30>
 800649e:	f1b8 0f01 	cmp.w	r8, #1
 80064a2:	f200 809a 	bhi.w	80065da <setvbuf+0x15e>
 80064a6:	2d00      	cmp	r5, #0
 80064a8:	f2c0 8097 	blt.w	80065da <setvbuf+0x15e>
 80064ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80064ae:	07d9      	lsls	r1, r3, #31
 80064b0:	d405      	bmi.n	80064be <setvbuf+0x42>
 80064b2:	89a3      	ldrh	r3, [r4, #12]
 80064b4:	059a      	lsls	r2, r3, #22
 80064b6:	d402      	bmi.n	80064be <setvbuf+0x42>
 80064b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80064ba:	f000 f9e4 	bl	8006886 <__retarget_lock_acquire_recursive>
 80064be:	4621      	mov	r1, r4
 80064c0:	4638      	mov	r0, r7
 80064c2:	f000 fe37 	bl	8007134 <_fflush_r>
 80064c6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80064c8:	b141      	cbz	r1, 80064dc <setvbuf+0x60>
 80064ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80064ce:	4299      	cmp	r1, r3
 80064d0:	d002      	beq.n	80064d8 <setvbuf+0x5c>
 80064d2:	4638      	mov	r0, r7
 80064d4:	f000 f9da 	bl	800688c <_free_r>
 80064d8:	2300      	movs	r3, #0
 80064da:	6363      	str	r3, [r4, #52]	@ 0x34
 80064dc:	2300      	movs	r3, #0
 80064de:	61a3      	str	r3, [r4, #24]
 80064e0:	6063      	str	r3, [r4, #4]
 80064e2:	89a3      	ldrh	r3, [r4, #12]
 80064e4:	061b      	lsls	r3, r3, #24
 80064e6:	d503      	bpl.n	80064f0 <setvbuf+0x74>
 80064e8:	6921      	ldr	r1, [r4, #16]
 80064ea:	4638      	mov	r0, r7
 80064ec:	f000 f9ce 	bl	800688c <_free_r>
 80064f0:	89a3      	ldrh	r3, [r4, #12]
 80064f2:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 80064f6:	f023 0303 	bic.w	r3, r3, #3
 80064fa:	f1b8 0f02 	cmp.w	r8, #2
 80064fe:	81a3      	strh	r3, [r4, #12]
 8006500:	d061      	beq.n	80065c6 <setvbuf+0x14a>
 8006502:	ab01      	add	r3, sp, #4
 8006504:	466a      	mov	r2, sp
 8006506:	4621      	mov	r1, r4
 8006508:	4638      	mov	r0, r7
 800650a:	f000 fe3b 	bl	8007184 <__swhatbuf_r>
 800650e:	89a3      	ldrh	r3, [r4, #12]
 8006510:	4318      	orrs	r0, r3
 8006512:	81a0      	strh	r0, [r4, #12]
 8006514:	bb2d      	cbnz	r5, 8006562 <setvbuf+0xe6>
 8006516:	9d00      	ldr	r5, [sp, #0]
 8006518:	4628      	mov	r0, r5
 800651a:	f000 fa01 	bl	8006920 <malloc>
 800651e:	4606      	mov	r6, r0
 8006520:	2800      	cmp	r0, #0
 8006522:	d152      	bne.n	80065ca <setvbuf+0x14e>
 8006524:	f8dd 9000 	ldr.w	r9, [sp]
 8006528:	45a9      	cmp	r9, r5
 800652a:	d140      	bne.n	80065ae <setvbuf+0x132>
 800652c:	f04f 35ff 	mov.w	r5, #4294967295
 8006530:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006534:	f043 0202 	orr.w	r2, r3, #2
 8006538:	81a2      	strh	r2, [r4, #12]
 800653a:	2200      	movs	r2, #0
 800653c:	60a2      	str	r2, [r4, #8]
 800653e:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8006542:	6022      	str	r2, [r4, #0]
 8006544:	6122      	str	r2, [r4, #16]
 8006546:	2201      	movs	r2, #1
 8006548:	6162      	str	r2, [r4, #20]
 800654a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800654c:	07d6      	lsls	r6, r2, #31
 800654e:	d404      	bmi.n	800655a <setvbuf+0xde>
 8006550:	0598      	lsls	r0, r3, #22
 8006552:	d402      	bmi.n	800655a <setvbuf+0xde>
 8006554:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006556:	f000 f997 	bl	8006888 <__retarget_lock_release_recursive>
 800655a:	4628      	mov	r0, r5
 800655c:	b003      	add	sp, #12
 800655e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006562:	2e00      	cmp	r6, #0
 8006564:	d0d8      	beq.n	8006518 <setvbuf+0x9c>
 8006566:	6a3b      	ldr	r3, [r7, #32]
 8006568:	b913      	cbnz	r3, 8006570 <setvbuf+0xf4>
 800656a:	4638      	mov	r0, r7
 800656c:	f7ff fed8 	bl	8006320 <__sinit>
 8006570:	f1b8 0f01 	cmp.w	r8, #1
 8006574:	bf08      	it	eq
 8006576:	89a3      	ldrheq	r3, [r4, #12]
 8006578:	6026      	str	r6, [r4, #0]
 800657a:	bf04      	itt	eq
 800657c:	f043 0301 	orreq.w	r3, r3, #1
 8006580:	81a3      	strheq	r3, [r4, #12]
 8006582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006586:	f013 0208 	ands.w	r2, r3, #8
 800658a:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800658e:	d01e      	beq.n	80065ce <setvbuf+0x152>
 8006590:	07d9      	lsls	r1, r3, #31
 8006592:	bf41      	itttt	mi
 8006594:	2200      	movmi	r2, #0
 8006596:	426d      	negmi	r5, r5
 8006598:	60a2      	strmi	r2, [r4, #8]
 800659a:	61a5      	strmi	r5, [r4, #24]
 800659c:	bf58      	it	pl
 800659e:	60a5      	strpl	r5, [r4, #8]
 80065a0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80065a2:	07d2      	lsls	r2, r2, #31
 80065a4:	d401      	bmi.n	80065aa <setvbuf+0x12e>
 80065a6:	059b      	lsls	r3, r3, #22
 80065a8:	d513      	bpl.n	80065d2 <setvbuf+0x156>
 80065aa:	2500      	movs	r5, #0
 80065ac:	e7d5      	b.n	800655a <setvbuf+0xde>
 80065ae:	4648      	mov	r0, r9
 80065b0:	f000 f9b6 	bl	8006920 <malloc>
 80065b4:	4606      	mov	r6, r0
 80065b6:	2800      	cmp	r0, #0
 80065b8:	d0b8      	beq.n	800652c <setvbuf+0xb0>
 80065ba:	89a3      	ldrh	r3, [r4, #12]
 80065bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065c0:	81a3      	strh	r3, [r4, #12]
 80065c2:	464d      	mov	r5, r9
 80065c4:	e7cf      	b.n	8006566 <setvbuf+0xea>
 80065c6:	2500      	movs	r5, #0
 80065c8:	e7b2      	b.n	8006530 <setvbuf+0xb4>
 80065ca:	46a9      	mov	r9, r5
 80065cc:	e7f5      	b.n	80065ba <setvbuf+0x13e>
 80065ce:	60a2      	str	r2, [r4, #8]
 80065d0:	e7e6      	b.n	80065a0 <setvbuf+0x124>
 80065d2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065d4:	f000 f958 	bl	8006888 <__retarget_lock_release_recursive>
 80065d8:	e7e7      	b.n	80065aa <setvbuf+0x12e>
 80065da:	f04f 35ff 	mov.w	r5, #4294967295
 80065de:	e7bc      	b.n	800655a <setvbuf+0xde>
 80065e0:	200000c4 	.word	0x200000c4

080065e4 <__sread>:
 80065e4:	b510      	push	{r4, lr}
 80065e6:	460c      	mov	r4, r1
 80065e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065ec:	f000 f8fc 	bl	80067e8 <_read_r>
 80065f0:	2800      	cmp	r0, #0
 80065f2:	bfab      	itete	ge
 80065f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80065f6:	89a3      	ldrhlt	r3, [r4, #12]
 80065f8:	181b      	addge	r3, r3, r0
 80065fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80065fe:	bfac      	ite	ge
 8006600:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006602:	81a3      	strhlt	r3, [r4, #12]
 8006604:	bd10      	pop	{r4, pc}

08006606 <__swrite>:
 8006606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800660a:	461f      	mov	r7, r3
 800660c:	898b      	ldrh	r3, [r1, #12]
 800660e:	05db      	lsls	r3, r3, #23
 8006610:	4605      	mov	r5, r0
 8006612:	460c      	mov	r4, r1
 8006614:	4616      	mov	r6, r2
 8006616:	d505      	bpl.n	8006624 <__swrite+0x1e>
 8006618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800661c:	2302      	movs	r3, #2
 800661e:	2200      	movs	r2, #0
 8006620:	f000 f8d0 	bl	80067c4 <_lseek_r>
 8006624:	89a3      	ldrh	r3, [r4, #12]
 8006626:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800662a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800662e:	81a3      	strh	r3, [r4, #12]
 8006630:	4632      	mov	r2, r6
 8006632:	463b      	mov	r3, r7
 8006634:	4628      	mov	r0, r5
 8006636:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800663a:	f000 b8e7 	b.w	800680c <_write_r>

0800663e <__sseek>:
 800663e:	b510      	push	{r4, lr}
 8006640:	460c      	mov	r4, r1
 8006642:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006646:	f000 f8bd 	bl	80067c4 <_lseek_r>
 800664a:	1c43      	adds	r3, r0, #1
 800664c:	89a3      	ldrh	r3, [r4, #12]
 800664e:	bf15      	itete	ne
 8006650:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006652:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006656:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800665a:	81a3      	strheq	r3, [r4, #12]
 800665c:	bf18      	it	ne
 800665e:	81a3      	strhne	r3, [r4, #12]
 8006660:	bd10      	pop	{r4, pc}

08006662 <__sclose>:
 8006662:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006666:	f000 b89d 	b.w	80067a4 <_close_r>

0800666a <__swbuf_r>:
 800666a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800666c:	460e      	mov	r6, r1
 800666e:	4614      	mov	r4, r2
 8006670:	4605      	mov	r5, r0
 8006672:	b118      	cbz	r0, 800667c <__swbuf_r+0x12>
 8006674:	6a03      	ldr	r3, [r0, #32]
 8006676:	b90b      	cbnz	r3, 800667c <__swbuf_r+0x12>
 8006678:	f7ff fe52 	bl	8006320 <__sinit>
 800667c:	69a3      	ldr	r3, [r4, #24]
 800667e:	60a3      	str	r3, [r4, #8]
 8006680:	89a3      	ldrh	r3, [r4, #12]
 8006682:	071a      	lsls	r2, r3, #28
 8006684:	d501      	bpl.n	800668a <__swbuf_r+0x20>
 8006686:	6923      	ldr	r3, [r4, #16]
 8006688:	b943      	cbnz	r3, 800669c <__swbuf_r+0x32>
 800668a:	4621      	mov	r1, r4
 800668c:	4628      	mov	r0, r5
 800668e:	f000 f82b 	bl	80066e8 <__swsetup_r>
 8006692:	b118      	cbz	r0, 800669c <__swbuf_r+0x32>
 8006694:	f04f 37ff 	mov.w	r7, #4294967295
 8006698:	4638      	mov	r0, r7
 800669a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800669c:	6823      	ldr	r3, [r4, #0]
 800669e:	6922      	ldr	r2, [r4, #16]
 80066a0:	1a98      	subs	r0, r3, r2
 80066a2:	6963      	ldr	r3, [r4, #20]
 80066a4:	b2f6      	uxtb	r6, r6
 80066a6:	4283      	cmp	r3, r0
 80066a8:	4637      	mov	r7, r6
 80066aa:	dc05      	bgt.n	80066b8 <__swbuf_r+0x4e>
 80066ac:	4621      	mov	r1, r4
 80066ae:	4628      	mov	r0, r5
 80066b0:	f000 fd40 	bl	8007134 <_fflush_r>
 80066b4:	2800      	cmp	r0, #0
 80066b6:	d1ed      	bne.n	8006694 <__swbuf_r+0x2a>
 80066b8:	68a3      	ldr	r3, [r4, #8]
 80066ba:	3b01      	subs	r3, #1
 80066bc:	60a3      	str	r3, [r4, #8]
 80066be:	6823      	ldr	r3, [r4, #0]
 80066c0:	1c5a      	adds	r2, r3, #1
 80066c2:	6022      	str	r2, [r4, #0]
 80066c4:	701e      	strb	r6, [r3, #0]
 80066c6:	6962      	ldr	r2, [r4, #20]
 80066c8:	1c43      	adds	r3, r0, #1
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d004      	beq.n	80066d8 <__swbuf_r+0x6e>
 80066ce:	89a3      	ldrh	r3, [r4, #12]
 80066d0:	07db      	lsls	r3, r3, #31
 80066d2:	d5e1      	bpl.n	8006698 <__swbuf_r+0x2e>
 80066d4:	2e0a      	cmp	r6, #10
 80066d6:	d1df      	bne.n	8006698 <__swbuf_r+0x2e>
 80066d8:	4621      	mov	r1, r4
 80066da:	4628      	mov	r0, r5
 80066dc:	f000 fd2a 	bl	8007134 <_fflush_r>
 80066e0:	2800      	cmp	r0, #0
 80066e2:	d0d9      	beq.n	8006698 <__swbuf_r+0x2e>
 80066e4:	e7d6      	b.n	8006694 <__swbuf_r+0x2a>
	...

080066e8 <__swsetup_r>:
 80066e8:	b538      	push	{r3, r4, r5, lr}
 80066ea:	4b29      	ldr	r3, [pc, #164]	@ (8006790 <__swsetup_r+0xa8>)
 80066ec:	4605      	mov	r5, r0
 80066ee:	6818      	ldr	r0, [r3, #0]
 80066f0:	460c      	mov	r4, r1
 80066f2:	b118      	cbz	r0, 80066fc <__swsetup_r+0x14>
 80066f4:	6a03      	ldr	r3, [r0, #32]
 80066f6:	b90b      	cbnz	r3, 80066fc <__swsetup_r+0x14>
 80066f8:	f7ff fe12 	bl	8006320 <__sinit>
 80066fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006700:	0719      	lsls	r1, r3, #28
 8006702:	d422      	bmi.n	800674a <__swsetup_r+0x62>
 8006704:	06da      	lsls	r2, r3, #27
 8006706:	d407      	bmi.n	8006718 <__swsetup_r+0x30>
 8006708:	2209      	movs	r2, #9
 800670a:	602a      	str	r2, [r5, #0]
 800670c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006710:	81a3      	strh	r3, [r4, #12]
 8006712:	f04f 30ff 	mov.w	r0, #4294967295
 8006716:	e033      	b.n	8006780 <__swsetup_r+0x98>
 8006718:	0758      	lsls	r0, r3, #29
 800671a:	d512      	bpl.n	8006742 <__swsetup_r+0x5a>
 800671c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800671e:	b141      	cbz	r1, 8006732 <__swsetup_r+0x4a>
 8006720:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006724:	4299      	cmp	r1, r3
 8006726:	d002      	beq.n	800672e <__swsetup_r+0x46>
 8006728:	4628      	mov	r0, r5
 800672a:	f000 f8af 	bl	800688c <_free_r>
 800672e:	2300      	movs	r3, #0
 8006730:	6363      	str	r3, [r4, #52]	@ 0x34
 8006732:	89a3      	ldrh	r3, [r4, #12]
 8006734:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006738:	81a3      	strh	r3, [r4, #12]
 800673a:	2300      	movs	r3, #0
 800673c:	6063      	str	r3, [r4, #4]
 800673e:	6923      	ldr	r3, [r4, #16]
 8006740:	6023      	str	r3, [r4, #0]
 8006742:	89a3      	ldrh	r3, [r4, #12]
 8006744:	f043 0308 	orr.w	r3, r3, #8
 8006748:	81a3      	strh	r3, [r4, #12]
 800674a:	6923      	ldr	r3, [r4, #16]
 800674c:	b94b      	cbnz	r3, 8006762 <__swsetup_r+0x7a>
 800674e:	89a3      	ldrh	r3, [r4, #12]
 8006750:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006754:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006758:	d003      	beq.n	8006762 <__swsetup_r+0x7a>
 800675a:	4621      	mov	r1, r4
 800675c:	4628      	mov	r0, r5
 800675e:	f000 fd37 	bl	80071d0 <__smakebuf_r>
 8006762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006766:	f013 0201 	ands.w	r2, r3, #1
 800676a:	d00a      	beq.n	8006782 <__swsetup_r+0x9a>
 800676c:	2200      	movs	r2, #0
 800676e:	60a2      	str	r2, [r4, #8]
 8006770:	6962      	ldr	r2, [r4, #20]
 8006772:	4252      	negs	r2, r2
 8006774:	61a2      	str	r2, [r4, #24]
 8006776:	6922      	ldr	r2, [r4, #16]
 8006778:	b942      	cbnz	r2, 800678c <__swsetup_r+0xa4>
 800677a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800677e:	d1c5      	bne.n	800670c <__swsetup_r+0x24>
 8006780:	bd38      	pop	{r3, r4, r5, pc}
 8006782:	0799      	lsls	r1, r3, #30
 8006784:	bf58      	it	pl
 8006786:	6962      	ldrpl	r2, [r4, #20]
 8006788:	60a2      	str	r2, [r4, #8]
 800678a:	e7f4      	b.n	8006776 <__swsetup_r+0x8e>
 800678c:	2000      	movs	r0, #0
 800678e:	e7f7      	b.n	8006780 <__swsetup_r+0x98>
 8006790:	200000c4 	.word	0x200000c4

08006794 <memset>:
 8006794:	4402      	add	r2, r0
 8006796:	4603      	mov	r3, r0
 8006798:	4293      	cmp	r3, r2
 800679a:	d100      	bne.n	800679e <memset+0xa>
 800679c:	4770      	bx	lr
 800679e:	f803 1b01 	strb.w	r1, [r3], #1
 80067a2:	e7f9      	b.n	8006798 <memset+0x4>

080067a4 <_close_r>:
 80067a4:	b538      	push	{r3, r4, r5, lr}
 80067a6:	4d06      	ldr	r5, [pc, #24]	@ (80067c0 <_close_r+0x1c>)
 80067a8:	2300      	movs	r3, #0
 80067aa:	4604      	mov	r4, r0
 80067ac:	4608      	mov	r0, r1
 80067ae:	602b      	str	r3, [r5, #0]
 80067b0:	f7fb ff97 	bl	80026e2 <_close>
 80067b4:	1c43      	adds	r3, r0, #1
 80067b6:	d102      	bne.n	80067be <_close_r+0x1a>
 80067b8:	682b      	ldr	r3, [r5, #0]
 80067ba:	b103      	cbz	r3, 80067be <_close_r+0x1a>
 80067bc:	6023      	str	r3, [r4, #0]
 80067be:	bd38      	pop	{r3, r4, r5, pc}
 80067c0:	200004e8 	.word	0x200004e8

080067c4 <_lseek_r>:
 80067c4:	b538      	push	{r3, r4, r5, lr}
 80067c6:	4d07      	ldr	r5, [pc, #28]	@ (80067e4 <_lseek_r+0x20>)
 80067c8:	4604      	mov	r4, r0
 80067ca:	4608      	mov	r0, r1
 80067cc:	4611      	mov	r1, r2
 80067ce:	2200      	movs	r2, #0
 80067d0:	602a      	str	r2, [r5, #0]
 80067d2:	461a      	mov	r2, r3
 80067d4:	f7fb ffac 	bl	8002730 <_lseek>
 80067d8:	1c43      	adds	r3, r0, #1
 80067da:	d102      	bne.n	80067e2 <_lseek_r+0x1e>
 80067dc:	682b      	ldr	r3, [r5, #0]
 80067de:	b103      	cbz	r3, 80067e2 <_lseek_r+0x1e>
 80067e0:	6023      	str	r3, [r4, #0]
 80067e2:	bd38      	pop	{r3, r4, r5, pc}
 80067e4:	200004e8 	.word	0x200004e8

080067e8 <_read_r>:
 80067e8:	b538      	push	{r3, r4, r5, lr}
 80067ea:	4d07      	ldr	r5, [pc, #28]	@ (8006808 <_read_r+0x20>)
 80067ec:	4604      	mov	r4, r0
 80067ee:	4608      	mov	r0, r1
 80067f0:	4611      	mov	r1, r2
 80067f2:	2200      	movs	r2, #0
 80067f4:	602a      	str	r2, [r5, #0]
 80067f6:	461a      	mov	r2, r3
 80067f8:	f7fb ff56 	bl	80026a8 <_read>
 80067fc:	1c43      	adds	r3, r0, #1
 80067fe:	d102      	bne.n	8006806 <_read_r+0x1e>
 8006800:	682b      	ldr	r3, [r5, #0]
 8006802:	b103      	cbz	r3, 8006806 <_read_r+0x1e>
 8006804:	6023      	str	r3, [r4, #0]
 8006806:	bd38      	pop	{r3, r4, r5, pc}
 8006808:	200004e8 	.word	0x200004e8

0800680c <_write_r>:
 800680c:	b538      	push	{r3, r4, r5, lr}
 800680e:	4d07      	ldr	r5, [pc, #28]	@ (800682c <_write_r+0x20>)
 8006810:	4604      	mov	r4, r0
 8006812:	4608      	mov	r0, r1
 8006814:	4611      	mov	r1, r2
 8006816:	2200      	movs	r2, #0
 8006818:	602a      	str	r2, [r5, #0]
 800681a:	461a      	mov	r2, r3
 800681c:	f7fb fa3e 	bl	8001c9c <_write>
 8006820:	1c43      	adds	r3, r0, #1
 8006822:	d102      	bne.n	800682a <_write_r+0x1e>
 8006824:	682b      	ldr	r3, [r5, #0]
 8006826:	b103      	cbz	r3, 800682a <_write_r+0x1e>
 8006828:	6023      	str	r3, [r4, #0]
 800682a:	bd38      	pop	{r3, r4, r5, pc}
 800682c:	200004e8 	.word	0x200004e8

08006830 <__errno>:
 8006830:	4b01      	ldr	r3, [pc, #4]	@ (8006838 <__errno+0x8>)
 8006832:	6818      	ldr	r0, [r3, #0]
 8006834:	4770      	bx	lr
 8006836:	bf00      	nop
 8006838:	200000c4 	.word	0x200000c4

0800683c <__libc_init_array>:
 800683c:	b570      	push	{r4, r5, r6, lr}
 800683e:	4d0d      	ldr	r5, [pc, #52]	@ (8006874 <__libc_init_array+0x38>)
 8006840:	4c0d      	ldr	r4, [pc, #52]	@ (8006878 <__libc_init_array+0x3c>)
 8006842:	1b64      	subs	r4, r4, r5
 8006844:	10a4      	asrs	r4, r4, #2
 8006846:	2600      	movs	r6, #0
 8006848:	42a6      	cmp	r6, r4
 800684a:	d109      	bne.n	8006860 <__libc_init_array+0x24>
 800684c:	4d0b      	ldr	r5, [pc, #44]	@ (800687c <__libc_init_array+0x40>)
 800684e:	4c0c      	ldr	r4, [pc, #48]	@ (8006880 <__libc_init_array+0x44>)
 8006850:	f001 fdb2 	bl	80083b8 <_init>
 8006854:	1b64      	subs	r4, r4, r5
 8006856:	10a4      	asrs	r4, r4, #2
 8006858:	2600      	movs	r6, #0
 800685a:	42a6      	cmp	r6, r4
 800685c:	d105      	bne.n	800686a <__libc_init_array+0x2e>
 800685e:	bd70      	pop	{r4, r5, r6, pc}
 8006860:	f855 3b04 	ldr.w	r3, [r5], #4
 8006864:	4798      	blx	r3
 8006866:	3601      	adds	r6, #1
 8006868:	e7ee      	b.n	8006848 <__libc_init_array+0xc>
 800686a:	f855 3b04 	ldr.w	r3, [r5], #4
 800686e:	4798      	blx	r3
 8006870:	3601      	adds	r6, #1
 8006872:	e7f2      	b.n	800685a <__libc_init_array+0x1e>
 8006874:	08008768 	.word	0x08008768
 8006878:	08008768 	.word	0x08008768
 800687c:	08008768 	.word	0x08008768
 8006880:	0800876c 	.word	0x0800876c

08006884 <__retarget_lock_init_recursive>:
 8006884:	4770      	bx	lr

08006886 <__retarget_lock_acquire_recursive>:
 8006886:	4770      	bx	lr

08006888 <__retarget_lock_release_recursive>:
 8006888:	4770      	bx	lr
	...

0800688c <_free_r>:
 800688c:	b538      	push	{r3, r4, r5, lr}
 800688e:	4605      	mov	r5, r0
 8006890:	2900      	cmp	r1, #0
 8006892:	d041      	beq.n	8006918 <_free_r+0x8c>
 8006894:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006898:	1f0c      	subs	r4, r1, #4
 800689a:	2b00      	cmp	r3, #0
 800689c:	bfb8      	it	lt
 800689e:	18e4      	addlt	r4, r4, r3
 80068a0:	f000 f8e8 	bl	8006a74 <__malloc_lock>
 80068a4:	4a1d      	ldr	r2, [pc, #116]	@ (800691c <_free_r+0x90>)
 80068a6:	6813      	ldr	r3, [r2, #0]
 80068a8:	b933      	cbnz	r3, 80068b8 <_free_r+0x2c>
 80068aa:	6063      	str	r3, [r4, #4]
 80068ac:	6014      	str	r4, [r2, #0]
 80068ae:	4628      	mov	r0, r5
 80068b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068b4:	f000 b8e4 	b.w	8006a80 <__malloc_unlock>
 80068b8:	42a3      	cmp	r3, r4
 80068ba:	d908      	bls.n	80068ce <_free_r+0x42>
 80068bc:	6820      	ldr	r0, [r4, #0]
 80068be:	1821      	adds	r1, r4, r0
 80068c0:	428b      	cmp	r3, r1
 80068c2:	bf01      	itttt	eq
 80068c4:	6819      	ldreq	r1, [r3, #0]
 80068c6:	685b      	ldreq	r3, [r3, #4]
 80068c8:	1809      	addeq	r1, r1, r0
 80068ca:	6021      	streq	r1, [r4, #0]
 80068cc:	e7ed      	b.n	80068aa <_free_r+0x1e>
 80068ce:	461a      	mov	r2, r3
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	b10b      	cbz	r3, 80068d8 <_free_r+0x4c>
 80068d4:	42a3      	cmp	r3, r4
 80068d6:	d9fa      	bls.n	80068ce <_free_r+0x42>
 80068d8:	6811      	ldr	r1, [r2, #0]
 80068da:	1850      	adds	r0, r2, r1
 80068dc:	42a0      	cmp	r0, r4
 80068de:	d10b      	bne.n	80068f8 <_free_r+0x6c>
 80068e0:	6820      	ldr	r0, [r4, #0]
 80068e2:	4401      	add	r1, r0
 80068e4:	1850      	adds	r0, r2, r1
 80068e6:	4283      	cmp	r3, r0
 80068e8:	6011      	str	r1, [r2, #0]
 80068ea:	d1e0      	bne.n	80068ae <_free_r+0x22>
 80068ec:	6818      	ldr	r0, [r3, #0]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	6053      	str	r3, [r2, #4]
 80068f2:	4408      	add	r0, r1
 80068f4:	6010      	str	r0, [r2, #0]
 80068f6:	e7da      	b.n	80068ae <_free_r+0x22>
 80068f8:	d902      	bls.n	8006900 <_free_r+0x74>
 80068fa:	230c      	movs	r3, #12
 80068fc:	602b      	str	r3, [r5, #0]
 80068fe:	e7d6      	b.n	80068ae <_free_r+0x22>
 8006900:	6820      	ldr	r0, [r4, #0]
 8006902:	1821      	adds	r1, r4, r0
 8006904:	428b      	cmp	r3, r1
 8006906:	bf04      	itt	eq
 8006908:	6819      	ldreq	r1, [r3, #0]
 800690a:	685b      	ldreq	r3, [r3, #4]
 800690c:	6063      	str	r3, [r4, #4]
 800690e:	bf04      	itt	eq
 8006910:	1809      	addeq	r1, r1, r0
 8006912:	6021      	streq	r1, [r4, #0]
 8006914:	6054      	str	r4, [r2, #4]
 8006916:	e7ca      	b.n	80068ae <_free_r+0x22>
 8006918:	bd38      	pop	{r3, r4, r5, pc}
 800691a:	bf00      	nop
 800691c:	200004f4 	.word	0x200004f4

08006920 <malloc>:
 8006920:	4b02      	ldr	r3, [pc, #8]	@ (800692c <malloc+0xc>)
 8006922:	4601      	mov	r1, r0
 8006924:	6818      	ldr	r0, [r3, #0]
 8006926:	f000 b825 	b.w	8006974 <_malloc_r>
 800692a:	bf00      	nop
 800692c:	200000c4 	.word	0x200000c4

08006930 <sbrk_aligned>:
 8006930:	b570      	push	{r4, r5, r6, lr}
 8006932:	4e0f      	ldr	r6, [pc, #60]	@ (8006970 <sbrk_aligned+0x40>)
 8006934:	460c      	mov	r4, r1
 8006936:	6831      	ldr	r1, [r6, #0]
 8006938:	4605      	mov	r5, r0
 800693a:	b911      	cbnz	r1, 8006942 <sbrk_aligned+0x12>
 800693c:	f000 fca6 	bl	800728c <_sbrk_r>
 8006940:	6030      	str	r0, [r6, #0]
 8006942:	4621      	mov	r1, r4
 8006944:	4628      	mov	r0, r5
 8006946:	f000 fca1 	bl	800728c <_sbrk_r>
 800694a:	1c43      	adds	r3, r0, #1
 800694c:	d103      	bne.n	8006956 <sbrk_aligned+0x26>
 800694e:	f04f 34ff 	mov.w	r4, #4294967295
 8006952:	4620      	mov	r0, r4
 8006954:	bd70      	pop	{r4, r5, r6, pc}
 8006956:	1cc4      	adds	r4, r0, #3
 8006958:	f024 0403 	bic.w	r4, r4, #3
 800695c:	42a0      	cmp	r0, r4
 800695e:	d0f8      	beq.n	8006952 <sbrk_aligned+0x22>
 8006960:	1a21      	subs	r1, r4, r0
 8006962:	4628      	mov	r0, r5
 8006964:	f000 fc92 	bl	800728c <_sbrk_r>
 8006968:	3001      	adds	r0, #1
 800696a:	d1f2      	bne.n	8006952 <sbrk_aligned+0x22>
 800696c:	e7ef      	b.n	800694e <sbrk_aligned+0x1e>
 800696e:	bf00      	nop
 8006970:	200004f0 	.word	0x200004f0

08006974 <_malloc_r>:
 8006974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006978:	1ccd      	adds	r5, r1, #3
 800697a:	f025 0503 	bic.w	r5, r5, #3
 800697e:	3508      	adds	r5, #8
 8006980:	2d0c      	cmp	r5, #12
 8006982:	bf38      	it	cc
 8006984:	250c      	movcc	r5, #12
 8006986:	2d00      	cmp	r5, #0
 8006988:	4606      	mov	r6, r0
 800698a:	db01      	blt.n	8006990 <_malloc_r+0x1c>
 800698c:	42a9      	cmp	r1, r5
 800698e:	d904      	bls.n	800699a <_malloc_r+0x26>
 8006990:	230c      	movs	r3, #12
 8006992:	6033      	str	r3, [r6, #0]
 8006994:	2000      	movs	r0, #0
 8006996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800699a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006a70 <_malloc_r+0xfc>
 800699e:	f000 f869 	bl	8006a74 <__malloc_lock>
 80069a2:	f8d8 3000 	ldr.w	r3, [r8]
 80069a6:	461c      	mov	r4, r3
 80069a8:	bb44      	cbnz	r4, 80069fc <_malloc_r+0x88>
 80069aa:	4629      	mov	r1, r5
 80069ac:	4630      	mov	r0, r6
 80069ae:	f7ff ffbf 	bl	8006930 <sbrk_aligned>
 80069b2:	1c43      	adds	r3, r0, #1
 80069b4:	4604      	mov	r4, r0
 80069b6:	d158      	bne.n	8006a6a <_malloc_r+0xf6>
 80069b8:	f8d8 4000 	ldr.w	r4, [r8]
 80069bc:	4627      	mov	r7, r4
 80069be:	2f00      	cmp	r7, #0
 80069c0:	d143      	bne.n	8006a4a <_malloc_r+0xd6>
 80069c2:	2c00      	cmp	r4, #0
 80069c4:	d04b      	beq.n	8006a5e <_malloc_r+0xea>
 80069c6:	6823      	ldr	r3, [r4, #0]
 80069c8:	4639      	mov	r1, r7
 80069ca:	4630      	mov	r0, r6
 80069cc:	eb04 0903 	add.w	r9, r4, r3
 80069d0:	f000 fc5c 	bl	800728c <_sbrk_r>
 80069d4:	4581      	cmp	r9, r0
 80069d6:	d142      	bne.n	8006a5e <_malloc_r+0xea>
 80069d8:	6821      	ldr	r1, [r4, #0]
 80069da:	1a6d      	subs	r5, r5, r1
 80069dc:	4629      	mov	r1, r5
 80069de:	4630      	mov	r0, r6
 80069e0:	f7ff ffa6 	bl	8006930 <sbrk_aligned>
 80069e4:	3001      	adds	r0, #1
 80069e6:	d03a      	beq.n	8006a5e <_malloc_r+0xea>
 80069e8:	6823      	ldr	r3, [r4, #0]
 80069ea:	442b      	add	r3, r5
 80069ec:	6023      	str	r3, [r4, #0]
 80069ee:	f8d8 3000 	ldr.w	r3, [r8]
 80069f2:	685a      	ldr	r2, [r3, #4]
 80069f4:	bb62      	cbnz	r2, 8006a50 <_malloc_r+0xdc>
 80069f6:	f8c8 7000 	str.w	r7, [r8]
 80069fa:	e00f      	b.n	8006a1c <_malloc_r+0xa8>
 80069fc:	6822      	ldr	r2, [r4, #0]
 80069fe:	1b52      	subs	r2, r2, r5
 8006a00:	d420      	bmi.n	8006a44 <_malloc_r+0xd0>
 8006a02:	2a0b      	cmp	r2, #11
 8006a04:	d917      	bls.n	8006a36 <_malloc_r+0xc2>
 8006a06:	1961      	adds	r1, r4, r5
 8006a08:	42a3      	cmp	r3, r4
 8006a0a:	6025      	str	r5, [r4, #0]
 8006a0c:	bf18      	it	ne
 8006a0e:	6059      	strne	r1, [r3, #4]
 8006a10:	6863      	ldr	r3, [r4, #4]
 8006a12:	bf08      	it	eq
 8006a14:	f8c8 1000 	streq.w	r1, [r8]
 8006a18:	5162      	str	r2, [r4, r5]
 8006a1a:	604b      	str	r3, [r1, #4]
 8006a1c:	4630      	mov	r0, r6
 8006a1e:	f000 f82f 	bl	8006a80 <__malloc_unlock>
 8006a22:	f104 000b 	add.w	r0, r4, #11
 8006a26:	1d23      	adds	r3, r4, #4
 8006a28:	f020 0007 	bic.w	r0, r0, #7
 8006a2c:	1ac2      	subs	r2, r0, r3
 8006a2e:	bf1c      	itt	ne
 8006a30:	1a1b      	subne	r3, r3, r0
 8006a32:	50a3      	strne	r3, [r4, r2]
 8006a34:	e7af      	b.n	8006996 <_malloc_r+0x22>
 8006a36:	6862      	ldr	r2, [r4, #4]
 8006a38:	42a3      	cmp	r3, r4
 8006a3a:	bf0c      	ite	eq
 8006a3c:	f8c8 2000 	streq.w	r2, [r8]
 8006a40:	605a      	strne	r2, [r3, #4]
 8006a42:	e7eb      	b.n	8006a1c <_malloc_r+0xa8>
 8006a44:	4623      	mov	r3, r4
 8006a46:	6864      	ldr	r4, [r4, #4]
 8006a48:	e7ae      	b.n	80069a8 <_malloc_r+0x34>
 8006a4a:	463c      	mov	r4, r7
 8006a4c:	687f      	ldr	r7, [r7, #4]
 8006a4e:	e7b6      	b.n	80069be <_malloc_r+0x4a>
 8006a50:	461a      	mov	r2, r3
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	42a3      	cmp	r3, r4
 8006a56:	d1fb      	bne.n	8006a50 <_malloc_r+0xdc>
 8006a58:	2300      	movs	r3, #0
 8006a5a:	6053      	str	r3, [r2, #4]
 8006a5c:	e7de      	b.n	8006a1c <_malloc_r+0xa8>
 8006a5e:	230c      	movs	r3, #12
 8006a60:	6033      	str	r3, [r6, #0]
 8006a62:	4630      	mov	r0, r6
 8006a64:	f000 f80c 	bl	8006a80 <__malloc_unlock>
 8006a68:	e794      	b.n	8006994 <_malloc_r+0x20>
 8006a6a:	6005      	str	r5, [r0, #0]
 8006a6c:	e7d6      	b.n	8006a1c <_malloc_r+0xa8>
 8006a6e:	bf00      	nop
 8006a70:	200004f4 	.word	0x200004f4

08006a74 <__malloc_lock>:
 8006a74:	4801      	ldr	r0, [pc, #4]	@ (8006a7c <__malloc_lock+0x8>)
 8006a76:	f7ff bf06 	b.w	8006886 <__retarget_lock_acquire_recursive>
 8006a7a:	bf00      	nop
 8006a7c:	200004ec 	.word	0x200004ec

08006a80 <__malloc_unlock>:
 8006a80:	4801      	ldr	r0, [pc, #4]	@ (8006a88 <__malloc_unlock+0x8>)
 8006a82:	f7ff bf01 	b.w	8006888 <__retarget_lock_release_recursive>
 8006a86:	bf00      	nop
 8006a88:	200004ec 	.word	0x200004ec

08006a8c <__sfputc_r>:
 8006a8c:	6893      	ldr	r3, [r2, #8]
 8006a8e:	3b01      	subs	r3, #1
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	b410      	push	{r4}
 8006a94:	6093      	str	r3, [r2, #8]
 8006a96:	da08      	bge.n	8006aaa <__sfputc_r+0x1e>
 8006a98:	6994      	ldr	r4, [r2, #24]
 8006a9a:	42a3      	cmp	r3, r4
 8006a9c:	db01      	blt.n	8006aa2 <__sfputc_r+0x16>
 8006a9e:	290a      	cmp	r1, #10
 8006aa0:	d103      	bne.n	8006aaa <__sfputc_r+0x1e>
 8006aa2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006aa6:	f7ff bde0 	b.w	800666a <__swbuf_r>
 8006aaa:	6813      	ldr	r3, [r2, #0]
 8006aac:	1c58      	adds	r0, r3, #1
 8006aae:	6010      	str	r0, [r2, #0]
 8006ab0:	7019      	strb	r1, [r3, #0]
 8006ab2:	4608      	mov	r0, r1
 8006ab4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ab8:	4770      	bx	lr

08006aba <__sfputs_r>:
 8006aba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006abc:	4606      	mov	r6, r0
 8006abe:	460f      	mov	r7, r1
 8006ac0:	4614      	mov	r4, r2
 8006ac2:	18d5      	adds	r5, r2, r3
 8006ac4:	42ac      	cmp	r4, r5
 8006ac6:	d101      	bne.n	8006acc <__sfputs_r+0x12>
 8006ac8:	2000      	movs	r0, #0
 8006aca:	e007      	b.n	8006adc <__sfputs_r+0x22>
 8006acc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ad0:	463a      	mov	r2, r7
 8006ad2:	4630      	mov	r0, r6
 8006ad4:	f7ff ffda 	bl	8006a8c <__sfputc_r>
 8006ad8:	1c43      	adds	r3, r0, #1
 8006ada:	d1f3      	bne.n	8006ac4 <__sfputs_r+0xa>
 8006adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006ae0 <_vfiprintf_r>:
 8006ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ae4:	460d      	mov	r5, r1
 8006ae6:	b09d      	sub	sp, #116	@ 0x74
 8006ae8:	4614      	mov	r4, r2
 8006aea:	4698      	mov	r8, r3
 8006aec:	4606      	mov	r6, r0
 8006aee:	b118      	cbz	r0, 8006af8 <_vfiprintf_r+0x18>
 8006af0:	6a03      	ldr	r3, [r0, #32]
 8006af2:	b90b      	cbnz	r3, 8006af8 <_vfiprintf_r+0x18>
 8006af4:	f7ff fc14 	bl	8006320 <__sinit>
 8006af8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006afa:	07d9      	lsls	r1, r3, #31
 8006afc:	d405      	bmi.n	8006b0a <_vfiprintf_r+0x2a>
 8006afe:	89ab      	ldrh	r3, [r5, #12]
 8006b00:	059a      	lsls	r2, r3, #22
 8006b02:	d402      	bmi.n	8006b0a <_vfiprintf_r+0x2a>
 8006b04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006b06:	f7ff febe 	bl	8006886 <__retarget_lock_acquire_recursive>
 8006b0a:	89ab      	ldrh	r3, [r5, #12]
 8006b0c:	071b      	lsls	r3, r3, #28
 8006b0e:	d501      	bpl.n	8006b14 <_vfiprintf_r+0x34>
 8006b10:	692b      	ldr	r3, [r5, #16]
 8006b12:	b99b      	cbnz	r3, 8006b3c <_vfiprintf_r+0x5c>
 8006b14:	4629      	mov	r1, r5
 8006b16:	4630      	mov	r0, r6
 8006b18:	f7ff fde6 	bl	80066e8 <__swsetup_r>
 8006b1c:	b170      	cbz	r0, 8006b3c <_vfiprintf_r+0x5c>
 8006b1e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006b20:	07dc      	lsls	r4, r3, #31
 8006b22:	d504      	bpl.n	8006b2e <_vfiprintf_r+0x4e>
 8006b24:	f04f 30ff 	mov.w	r0, #4294967295
 8006b28:	b01d      	add	sp, #116	@ 0x74
 8006b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b2e:	89ab      	ldrh	r3, [r5, #12]
 8006b30:	0598      	lsls	r0, r3, #22
 8006b32:	d4f7      	bmi.n	8006b24 <_vfiprintf_r+0x44>
 8006b34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006b36:	f7ff fea7 	bl	8006888 <__retarget_lock_release_recursive>
 8006b3a:	e7f3      	b.n	8006b24 <_vfiprintf_r+0x44>
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b40:	2320      	movs	r3, #32
 8006b42:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006b46:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b4a:	2330      	movs	r3, #48	@ 0x30
 8006b4c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006cfc <_vfiprintf_r+0x21c>
 8006b50:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006b54:	f04f 0901 	mov.w	r9, #1
 8006b58:	4623      	mov	r3, r4
 8006b5a:	469a      	mov	sl, r3
 8006b5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b60:	b10a      	cbz	r2, 8006b66 <_vfiprintf_r+0x86>
 8006b62:	2a25      	cmp	r2, #37	@ 0x25
 8006b64:	d1f9      	bne.n	8006b5a <_vfiprintf_r+0x7a>
 8006b66:	ebba 0b04 	subs.w	fp, sl, r4
 8006b6a:	d00b      	beq.n	8006b84 <_vfiprintf_r+0xa4>
 8006b6c:	465b      	mov	r3, fp
 8006b6e:	4622      	mov	r2, r4
 8006b70:	4629      	mov	r1, r5
 8006b72:	4630      	mov	r0, r6
 8006b74:	f7ff ffa1 	bl	8006aba <__sfputs_r>
 8006b78:	3001      	adds	r0, #1
 8006b7a:	f000 80a7 	beq.w	8006ccc <_vfiprintf_r+0x1ec>
 8006b7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b80:	445a      	add	r2, fp
 8006b82:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b84:	f89a 3000 	ldrb.w	r3, [sl]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f000 809f 	beq.w	8006ccc <_vfiprintf_r+0x1ec>
 8006b8e:	2300      	movs	r3, #0
 8006b90:	f04f 32ff 	mov.w	r2, #4294967295
 8006b94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b98:	f10a 0a01 	add.w	sl, sl, #1
 8006b9c:	9304      	str	r3, [sp, #16]
 8006b9e:	9307      	str	r3, [sp, #28]
 8006ba0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006ba4:	931a      	str	r3, [sp, #104]	@ 0x68
 8006ba6:	4654      	mov	r4, sl
 8006ba8:	2205      	movs	r2, #5
 8006baa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bae:	4853      	ldr	r0, [pc, #332]	@ (8006cfc <_vfiprintf_r+0x21c>)
 8006bb0:	f7f9 fb36 	bl	8000220 <memchr>
 8006bb4:	9a04      	ldr	r2, [sp, #16]
 8006bb6:	b9d8      	cbnz	r0, 8006bf0 <_vfiprintf_r+0x110>
 8006bb8:	06d1      	lsls	r1, r2, #27
 8006bba:	bf44      	itt	mi
 8006bbc:	2320      	movmi	r3, #32
 8006bbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006bc2:	0713      	lsls	r3, r2, #28
 8006bc4:	bf44      	itt	mi
 8006bc6:	232b      	movmi	r3, #43	@ 0x2b
 8006bc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006bcc:	f89a 3000 	ldrb.w	r3, [sl]
 8006bd0:	2b2a      	cmp	r3, #42	@ 0x2a
 8006bd2:	d015      	beq.n	8006c00 <_vfiprintf_r+0x120>
 8006bd4:	9a07      	ldr	r2, [sp, #28]
 8006bd6:	4654      	mov	r4, sl
 8006bd8:	2000      	movs	r0, #0
 8006bda:	f04f 0c0a 	mov.w	ip, #10
 8006bde:	4621      	mov	r1, r4
 8006be0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006be4:	3b30      	subs	r3, #48	@ 0x30
 8006be6:	2b09      	cmp	r3, #9
 8006be8:	d94b      	bls.n	8006c82 <_vfiprintf_r+0x1a2>
 8006bea:	b1b0      	cbz	r0, 8006c1a <_vfiprintf_r+0x13a>
 8006bec:	9207      	str	r2, [sp, #28]
 8006bee:	e014      	b.n	8006c1a <_vfiprintf_r+0x13a>
 8006bf0:	eba0 0308 	sub.w	r3, r0, r8
 8006bf4:	fa09 f303 	lsl.w	r3, r9, r3
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	9304      	str	r3, [sp, #16]
 8006bfc:	46a2      	mov	sl, r4
 8006bfe:	e7d2      	b.n	8006ba6 <_vfiprintf_r+0xc6>
 8006c00:	9b03      	ldr	r3, [sp, #12]
 8006c02:	1d19      	adds	r1, r3, #4
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	9103      	str	r1, [sp, #12]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	bfbb      	ittet	lt
 8006c0c:	425b      	neglt	r3, r3
 8006c0e:	f042 0202 	orrlt.w	r2, r2, #2
 8006c12:	9307      	strge	r3, [sp, #28]
 8006c14:	9307      	strlt	r3, [sp, #28]
 8006c16:	bfb8      	it	lt
 8006c18:	9204      	strlt	r2, [sp, #16]
 8006c1a:	7823      	ldrb	r3, [r4, #0]
 8006c1c:	2b2e      	cmp	r3, #46	@ 0x2e
 8006c1e:	d10a      	bne.n	8006c36 <_vfiprintf_r+0x156>
 8006c20:	7863      	ldrb	r3, [r4, #1]
 8006c22:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c24:	d132      	bne.n	8006c8c <_vfiprintf_r+0x1ac>
 8006c26:	9b03      	ldr	r3, [sp, #12]
 8006c28:	1d1a      	adds	r2, r3, #4
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	9203      	str	r2, [sp, #12]
 8006c2e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006c32:	3402      	adds	r4, #2
 8006c34:	9305      	str	r3, [sp, #20]
 8006c36:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006d0c <_vfiprintf_r+0x22c>
 8006c3a:	7821      	ldrb	r1, [r4, #0]
 8006c3c:	2203      	movs	r2, #3
 8006c3e:	4650      	mov	r0, sl
 8006c40:	f7f9 faee 	bl	8000220 <memchr>
 8006c44:	b138      	cbz	r0, 8006c56 <_vfiprintf_r+0x176>
 8006c46:	9b04      	ldr	r3, [sp, #16]
 8006c48:	eba0 000a 	sub.w	r0, r0, sl
 8006c4c:	2240      	movs	r2, #64	@ 0x40
 8006c4e:	4082      	lsls	r2, r0
 8006c50:	4313      	orrs	r3, r2
 8006c52:	3401      	adds	r4, #1
 8006c54:	9304      	str	r3, [sp, #16]
 8006c56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c5a:	4829      	ldr	r0, [pc, #164]	@ (8006d00 <_vfiprintf_r+0x220>)
 8006c5c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006c60:	2206      	movs	r2, #6
 8006c62:	f7f9 fadd 	bl	8000220 <memchr>
 8006c66:	2800      	cmp	r0, #0
 8006c68:	d03f      	beq.n	8006cea <_vfiprintf_r+0x20a>
 8006c6a:	4b26      	ldr	r3, [pc, #152]	@ (8006d04 <_vfiprintf_r+0x224>)
 8006c6c:	bb1b      	cbnz	r3, 8006cb6 <_vfiprintf_r+0x1d6>
 8006c6e:	9b03      	ldr	r3, [sp, #12]
 8006c70:	3307      	adds	r3, #7
 8006c72:	f023 0307 	bic.w	r3, r3, #7
 8006c76:	3308      	adds	r3, #8
 8006c78:	9303      	str	r3, [sp, #12]
 8006c7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c7c:	443b      	add	r3, r7
 8006c7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c80:	e76a      	b.n	8006b58 <_vfiprintf_r+0x78>
 8006c82:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c86:	460c      	mov	r4, r1
 8006c88:	2001      	movs	r0, #1
 8006c8a:	e7a8      	b.n	8006bde <_vfiprintf_r+0xfe>
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	3401      	adds	r4, #1
 8006c90:	9305      	str	r3, [sp, #20]
 8006c92:	4619      	mov	r1, r3
 8006c94:	f04f 0c0a 	mov.w	ip, #10
 8006c98:	4620      	mov	r0, r4
 8006c9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c9e:	3a30      	subs	r2, #48	@ 0x30
 8006ca0:	2a09      	cmp	r2, #9
 8006ca2:	d903      	bls.n	8006cac <_vfiprintf_r+0x1cc>
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d0c6      	beq.n	8006c36 <_vfiprintf_r+0x156>
 8006ca8:	9105      	str	r1, [sp, #20]
 8006caa:	e7c4      	b.n	8006c36 <_vfiprintf_r+0x156>
 8006cac:	fb0c 2101 	mla	r1, ip, r1, r2
 8006cb0:	4604      	mov	r4, r0
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e7f0      	b.n	8006c98 <_vfiprintf_r+0x1b8>
 8006cb6:	ab03      	add	r3, sp, #12
 8006cb8:	9300      	str	r3, [sp, #0]
 8006cba:	462a      	mov	r2, r5
 8006cbc:	4b12      	ldr	r3, [pc, #72]	@ (8006d08 <_vfiprintf_r+0x228>)
 8006cbe:	a904      	add	r1, sp, #16
 8006cc0:	4630      	mov	r0, r6
 8006cc2:	f3af 8000 	nop.w
 8006cc6:	4607      	mov	r7, r0
 8006cc8:	1c78      	adds	r0, r7, #1
 8006cca:	d1d6      	bne.n	8006c7a <_vfiprintf_r+0x19a>
 8006ccc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006cce:	07d9      	lsls	r1, r3, #31
 8006cd0:	d405      	bmi.n	8006cde <_vfiprintf_r+0x1fe>
 8006cd2:	89ab      	ldrh	r3, [r5, #12]
 8006cd4:	059a      	lsls	r2, r3, #22
 8006cd6:	d402      	bmi.n	8006cde <_vfiprintf_r+0x1fe>
 8006cd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006cda:	f7ff fdd5 	bl	8006888 <__retarget_lock_release_recursive>
 8006cde:	89ab      	ldrh	r3, [r5, #12]
 8006ce0:	065b      	lsls	r3, r3, #25
 8006ce2:	f53f af1f 	bmi.w	8006b24 <_vfiprintf_r+0x44>
 8006ce6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006ce8:	e71e      	b.n	8006b28 <_vfiprintf_r+0x48>
 8006cea:	ab03      	add	r3, sp, #12
 8006cec:	9300      	str	r3, [sp, #0]
 8006cee:	462a      	mov	r2, r5
 8006cf0:	4b05      	ldr	r3, [pc, #20]	@ (8006d08 <_vfiprintf_r+0x228>)
 8006cf2:	a904      	add	r1, sp, #16
 8006cf4:	4630      	mov	r0, r6
 8006cf6:	f000 f879 	bl	8006dec <_printf_i>
 8006cfa:	e7e4      	b.n	8006cc6 <_vfiprintf_r+0x1e6>
 8006cfc:	08008550 	.word	0x08008550
 8006d00:	0800855a 	.word	0x0800855a
 8006d04:	00000000 	.word	0x00000000
 8006d08:	08006abb 	.word	0x08006abb
 8006d0c:	08008556 	.word	0x08008556

08006d10 <_printf_common>:
 8006d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d14:	4616      	mov	r6, r2
 8006d16:	4698      	mov	r8, r3
 8006d18:	688a      	ldr	r2, [r1, #8]
 8006d1a:	690b      	ldr	r3, [r1, #16]
 8006d1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006d20:	4293      	cmp	r3, r2
 8006d22:	bfb8      	it	lt
 8006d24:	4613      	movlt	r3, r2
 8006d26:	6033      	str	r3, [r6, #0]
 8006d28:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006d2c:	4607      	mov	r7, r0
 8006d2e:	460c      	mov	r4, r1
 8006d30:	b10a      	cbz	r2, 8006d36 <_printf_common+0x26>
 8006d32:	3301      	adds	r3, #1
 8006d34:	6033      	str	r3, [r6, #0]
 8006d36:	6823      	ldr	r3, [r4, #0]
 8006d38:	0699      	lsls	r1, r3, #26
 8006d3a:	bf42      	ittt	mi
 8006d3c:	6833      	ldrmi	r3, [r6, #0]
 8006d3e:	3302      	addmi	r3, #2
 8006d40:	6033      	strmi	r3, [r6, #0]
 8006d42:	6825      	ldr	r5, [r4, #0]
 8006d44:	f015 0506 	ands.w	r5, r5, #6
 8006d48:	d106      	bne.n	8006d58 <_printf_common+0x48>
 8006d4a:	f104 0a19 	add.w	sl, r4, #25
 8006d4e:	68e3      	ldr	r3, [r4, #12]
 8006d50:	6832      	ldr	r2, [r6, #0]
 8006d52:	1a9b      	subs	r3, r3, r2
 8006d54:	42ab      	cmp	r3, r5
 8006d56:	dc26      	bgt.n	8006da6 <_printf_common+0x96>
 8006d58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006d5c:	6822      	ldr	r2, [r4, #0]
 8006d5e:	3b00      	subs	r3, #0
 8006d60:	bf18      	it	ne
 8006d62:	2301      	movne	r3, #1
 8006d64:	0692      	lsls	r2, r2, #26
 8006d66:	d42b      	bmi.n	8006dc0 <_printf_common+0xb0>
 8006d68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006d6c:	4641      	mov	r1, r8
 8006d6e:	4638      	mov	r0, r7
 8006d70:	47c8      	blx	r9
 8006d72:	3001      	adds	r0, #1
 8006d74:	d01e      	beq.n	8006db4 <_printf_common+0xa4>
 8006d76:	6823      	ldr	r3, [r4, #0]
 8006d78:	6922      	ldr	r2, [r4, #16]
 8006d7a:	f003 0306 	and.w	r3, r3, #6
 8006d7e:	2b04      	cmp	r3, #4
 8006d80:	bf02      	ittt	eq
 8006d82:	68e5      	ldreq	r5, [r4, #12]
 8006d84:	6833      	ldreq	r3, [r6, #0]
 8006d86:	1aed      	subeq	r5, r5, r3
 8006d88:	68a3      	ldr	r3, [r4, #8]
 8006d8a:	bf0c      	ite	eq
 8006d8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d90:	2500      	movne	r5, #0
 8006d92:	4293      	cmp	r3, r2
 8006d94:	bfc4      	itt	gt
 8006d96:	1a9b      	subgt	r3, r3, r2
 8006d98:	18ed      	addgt	r5, r5, r3
 8006d9a:	2600      	movs	r6, #0
 8006d9c:	341a      	adds	r4, #26
 8006d9e:	42b5      	cmp	r5, r6
 8006da0:	d11a      	bne.n	8006dd8 <_printf_common+0xc8>
 8006da2:	2000      	movs	r0, #0
 8006da4:	e008      	b.n	8006db8 <_printf_common+0xa8>
 8006da6:	2301      	movs	r3, #1
 8006da8:	4652      	mov	r2, sl
 8006daa:	4641      	mov	r1, r8
 8006dac:	4638      	mov	r0, r7
 8006dae:	47c8      	blx	r9
 8006db0:	3001      	adds	r0, #1
 8006db2:	d103      	bne.n	8006dbc <_printf_common+0xac>
 8006db4:	f04f 30ff 	mov.w	r0, #4294967295
 8006db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dbc:	3501      	adds	r5, #1
 8006dbe:	e7c6      	b.n	8006d4e <_printf_common+0x3e>
 8006dc0:	18e1      	adds	r1, r4, r3
 8006dc2:	1c5a      	adds	r2, r3, #1
 8006dc4:	2030      	movs	r0, #48	@ 0x30
 8006dc6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006dca:	4422      	add	r2, r4
 8006dcc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006dd0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006dd4:	3302      	adds	r3, #2
 8006dd6:	e7c7      	b.n	8006d68 <_printf_common+0x58>
 8006dd8:	2301      	movs	r3, #1
 8006dda:	4622      	mov	r2, r4
 8006ddc:	4641      	mov	r1, r8
 8006dde:	4638      	mov	r0, r7
 8006de0:	47c8      	blx	r9
 8006de2:	3001      	adds	r0, #1
 8006de4:	d0e6      	beq.n	8006db4 <_printf_common+0xa4>
 8006de6:	3601      	adds	r6, #1
 8006de8:	e7d9      	b.n	8006d9e <_printf_common+0x8e>
	...

08006dec <_printf_i>:
 8006dec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006df0:	7e0f      	ldrb	r7, [r1, #24]
 8006df2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006df4:	2f78      	cmp	r7, #120	@ 0x78
 8006df6:	4691      	mov	r9, r2
 8006df8:	4680      	mov	r8, r0
 8006dfa:	460c      	mov	r4, r1
 8006dfc:	469a      	mov	sl, r3
 8006dfe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006e02:	d807      	bhi.n	8006e14 <_printf_i+0x28>
 8006e04:	2f62      	cmp	r7, #98	@ 0x62
 8006e06:	d80a      	bhi.n	8006e1e <_printf_i+0x32>
 8006e08:	2f00      	cmp	r7, #0
 8006e0a:	f000 80d2 	beq.w	8006fb2 <_printf_i+0x1c6>
 8006e0e:	2f58      	cmp	r7, #88	@ 0x58
 8006e10:	f000 80b9 	beq.w	8006f86 <_printf_i+0x19a>
 8006e14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006e1c:	e03a      	b.n	8006e94 <_printf_i+0xa8>
 8006e1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006e22:	2b15      	cmp	r3, #21
 8006e24:	d8f6      	bhi.n	8006e14 <_printf_i+0x28>
 8006e26:	a101      	add	r1, pc, #4	@ (adr r1, 8006e2c <_printf_i+0x40>)
 8006e28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e2c:	08006e85 	.word	0x08006e85
 8006e30:	08006e99 	.word	0x08006e99
 8006e34:	08006e15 	.word	0x08006e15
 8006e38:	08006e15 	.word	0x08006e15
 8006e3c:	08006e15 	.word	0x08006e15
 8006e40:	08006e15 	.word	0x08006e15
 8006e44:	08006e99 	.word	0x08006e99
 8006e48:	08006e15 	.word	0x08006e15
 8006e4c:	08006e15 	.word	0x08006e15
 8006e50:	08006e15 	.word	0x08006e15
 8006e54:	08006e15 	.word	0x08006e15
 8006e58:	08006f99 	.word	0x08006f99
 8006e5c:	08006ec3 	.word	0x08006ec3
 8006e60:	08006f53 	.word	0x08006f53
 8006e64:	08006e15 	.word	0x08006e15
 8006e68:	08006e15 	.word	0x08006e15
 8006e6c:	08006fbb 	.word	0x08006fbb
 8006e70:	08006e15 	.word	0x08006e15
 8006e74:	08006ec3 	.word	0x08006ec3
 8006e78:	08006e15 	.word	0x08006e15
 8006e7c:	08006e15 	.word	0x08006e15
 8006e80:	08006f5b 	.word	0x08006f5b
 8006e84:	6833      	ldr	r3, [r6, #0]
 8006e86:	1d1a      	adds	r2, r3, #4
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	6032      	str	r2, [r6, #0]
 8006e8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006e94:	2301      	movs	r3, #1
 8006e96:	e09d      	b.n	8006fd4 <_printf_i+0x1e8>
 8006e98:	6833      	ldr	r3, [r6, #0]
 8006e9a:	6820      	ldr	r0, [r4, #0]
 8006e9c:	1d19      	adds	r1, r3, #4
 8006e9e:	6031      	str	r1, [r6, #0]
 8006ea0:	0606      	lsls	r6, r0, #24
 8006ea2:	d501      	bpl.n	8006ea8 <_printf_i+0xbc>
 8006ea4:	681d      	ldr	r5, [r3, #0]
 8006ea6:	e003      	b.n	8006eb0 <_printf_i+0xc4>
 8006ea8:	0645      	lsls	r5, r0, #25
 8006eaa:	d5fb      	bpl.n	8006ea4 <_printf_i+0xb8>
 8006eac:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006eb0:	2d00      	cmp	r5, #0
 8006eb2:	da03      	bge.n	8006ebc <_printf_i+0xd0>
 8006eb4:	232d      	movs	r3, #45	@ 0x2d
 8006eb6:	426d      	negs	r5, r5
 8006eb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ebc:	4859      	ldr	r0, [pc, #356]	@ (8007024 <_printf_i+0x238>)
 8006ebe:	230a      	movs	r3, #10
 8006ec0:	e011      	b.n	8006ee6 <_printf_i+0xfa>
 8006ec2:	6821      	ldr	r1, [r4, #0]
 8006ec4:	6833      	ldr	r3, [r6, #0]
 8006ec6:	0608      	lsls	r0, r1, #24
 8006ec8:	f853 5b04 	ldr.w	r5, [r3], #4
 8006ecc:	d402      	bmi.n	8006ed4 <_printf_i+0xe8>
 8006ece:	0649      	lsls	r1, r1, #25
 8006ed0:	bf48      	it	mi
 8006ed2:	b2ad      	uxthmi	r5, r5
 8006ed4:	2f6f      	cmp	r7, #111	@ 0x6f
 8006ed6:	4853      	ldr	r0, [pc, #332]	@ (8007024 <_printf_i+0x238>)
 8006ed8:	6033      	str	r3, [r6, #0]
 8006eda:	bf14      	ite	ne
 8006edc:	230a      	movne	r3, #10
 8006ede:	2308      	moveq	r3, #8
 8006ee0:	2100      	movs	r1, #0
 8006ee2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006ee6:	6866      	ldr	r6, [r4, #4]
 8006ee8:	60a6      	str	r6, [r4, #8]
 8006eea:	2e00      	cmp	r6, #0
 8006eec:	bfa2      	ittt	ge
 8006eee:	6821      	ldrge	r1, [r4, #0]
 8006ef0:	f021 0104 	bicge.w	r1, r1, #4
 8006ef4:	6021      	strge	r1, [r4, #0]
 8006ef6:	b90d      	cbnz	r5, 8006efc <_printf_i+0x110>
 8006ef8:	2e00      	cmp	r6, #0
 8006efa:	d04b      	beq.n	8006f94 <_printf_i+0x1a8>
 8006efc:	4616      	mov	r6, r2
 8006efe:	fbb5 f1f3 	udiv	r1, r5, r3
 8006f02:	fb03 5711 	mls	r7, r3, r1, r5
 8006f06:	5dc7      	ldrb	r7, [r0, r7]
 8006f08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006f0c:	462f      	mov	r7, r5
 8006f0e:	42bb      	cmp	r3, r7
 8006f10:	460d      	mov	r5, r1
 8006f12:	d9f4      	bls.n	8006efe <_printf_i+0x112>
 8006f14:	2b08      	cmp	r3, #8
 8006f16:	d10b      	bne.n	8006f30 <_printf_i+0x144>
 8006f18:	6823      	ldr	r3, [r4, #0]
 8006f1a:	07df      	lsls	r7, r3, #31
 8006f1c:	d508      	bpl.n	8006f30 <_printf_i+0x144>
 8006f1e:	6923      	ldr	r3, [r4, #16]
 8006f20:	6861      	ldr	r1, [r4, #4]
 8006f22:	4299      	cmp	r1, r3
 8006f24:	bfde      	ittt	le
 8006f26:	2330      	movle	r3, #48	@ 0x30
 8006f28:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006f2c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006f30:	1b92      	subs	r2, r2, r6
 8006f32:	6122      	str	r2, [r4, #16]
 8006f34:	f8cd a000 	str.w	sl, [sp]
 8006f38:	464b      	mov	r3, r9
 8006f3a:	aa03      	add	r2, sp, #12
 8006f3c:	4621      	mov	r1, r4
 8006f3e:	4640      	mov	r0, r8
 8006f40:	f7ff fee6 	bl	8006d10 <_printf_common>
 8006f44:	3001      	adds	r0, #1
 8006f46:	d14a      	bne.n	8006fde <_printf_i+0x1f2>
 8006f48:	f04f 30ff 	mov.w	r0, #4294967295
 8006f4c:	b004      	add	sp, #16
 8006f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f52:	6823      	ldr	r3, [r4, #0]
 8006f54:	f043 0320 	orr.w	r3, r3, #32
 8006f58:	6023      	str	r3, [r4, #0]
 8006f5a:	4833      	ldr	r0, [pc, #204]	@ (8007028 <_printf_i+0x23c>)
 8006f5c:	2778      	movs	r7, #120	@ 0x78
 8006f5e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006f62:	6823      	ldr	r3, [r4, #0]
 8006f64:	6831      	ldr	r1, [r6, #0]
 8006f66:	061f      	lsls	r7, r3, #24
 8006f68:	f851 5b04 	ldr.w	r5, [r1], #4
 8006f6c:	d402      	bmi.n	8006f74 <_printf_i+0x188>
 8006f6e:	065f      	lsls	r7, r3, #25
 8006f70:	bf48      	it	mi
 8006f72:	b2ad      	uxthmi	r5, r5
 8006f74:	6031      	str	r1, [r6, #0]
 8006f76:	07d9      	lsls	r1, r3, #31
 8006f78:	bf44      	itt	mi
 8006f7a:	f043 0320 	orrmi.w	r3, r3, #32
 8006f7e:	6023      	strmi	r3, [r4, #0]
 8006f80:	b11d      	cbz	r5, 8006f8a <_printf_i+0x19e>
 8006f82:	2310      	movs	r3, #16
 8006f84:	e7ac      	b.n	8006ee0 <_printf_i+0xf4>
 8006f86:	4827      	ldr	r0, [pc, #156]	@ (8007024 <_printf_i+0x238>)
 8006f88:	e7e9      	b.n	8006f5e <_printf_i+0x172>
 8006f8a:	6823      	ldr	r3, [r4, #0]
 8006f8c:	f023 0320 	bic.w	r3, r3, #32
 8006f90:	6023      	str	r3, [r4, #0]
 8006f92:	e7f6      	b.n	8006f82 <_printf_i+0x196>
 8006f94:	4616      	mov	r6, r2
 8006f96:	e7bd      	b.n	8006f14 <_printf_i+0x128>
 8006f98:	6833      	ldr	r3, [r6, #0]
 8006f9a:	6825      	ldr	r5, [r4, #0]
 8006f9c:	6961      	ldr	r1, [r4, #20]
 8006f9e:	1d18      	adds	r0, r3, #4
 8006fa0:	6030      	str	r0, [r6, #0]
 8006fa2:	062e      	lsls	r6, r5, #24
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	d501      	bpl.n	8006fac <_printf_i+0x1c0>
 8006fa8:	6019      	str	r1, [r3, #0]
 8006faa:	e002      	b.n	8006fb2 <_printf_i+0x1c6>
 8006fac:	0668      	lsls	r0, r5, #25
 8006fae:	d5fb      	bpl.n	8006fa8 <_printf_i+0x1bc>
 8006fb0:	8019      	strh	r1, [r3, #0]
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	6123      	str	r3, [r4, #16]
 8006fb6:	4616      	mov	r6, r2
 8006fb8:	e7bc      	b.n	8006f34 <_printf_i+0x148>
 8006fba:	6833      	ldr	r3, [r6, #0]
 8006fbc:	1d1a      	adds	r2, r3, #4
 8006fbe:	6032      	str	r2, [r6, #0]
 8006fc0:	681e      	ldr	r6, [r3, #0]
 8006fc2:	6862      	ldr	r2, [r4, #4]
 8006fc4:	2100      	movs	r1, #0
 8006fc6:	4630      	mov	r0, r6
 8006fc8:	f7f9 f92a 	bl	8000220 <memchr>
 8006fcc:	b108      	cbz	r0, 8006fd2 <_printf_i+0x1e6>
 8006fce:	1b80      	subs	r0, r0, r6
 8006fd0:	6060      	str	r0, [r4, #4]
 8006fd2:	6863      	ldr	r3, [r4, #4]
 8006fd4:	6123      	str	r3, [r4, #16]
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006fdc:	e7aa      	b.n	8006f34 <_printf_i+0x148>
 8006fde:	6923      	ldr	r3, [r4, #16]
 8006fe0:	4632      	mov	r2, r6
 8006fe2:	4649      	mov	r1, r9
 8006fe4:	4640      	mov	r0, r8
 8006fe6:	47d0      	blx	sl
 8006fe8:	3001      	adds	r0, #1
 8006fea:	d0ad      	beq.n	8006f48 <_printf_i+0x15c>
 8006fec:	6823      	ldr	r3, [r4, #0]
 8006fee:	079b      	lsls	r3, r3, #30
 8006ff0:	d413      	bmi.n	800701a <_printf_i+0x22e>
 8006ff2:	68e0      	ldr	r0, [r4, #12]
 8006ff4:	9b03      	ldr	r3, [sp, #12]
 8006ff6:	4298      	cmp	r0, r3
 8006ff8:	bfb8      	it	lt
 8006ffa:	4618      	movlt	r0, r3
 8006ffc:	e7a6      	b.n	8006f4c <_printf_i+0x160>
 8006ffe:	2301      	movs	r3, #1
 8007000:	4632      	mov	r2, r6
 8007002:	4649      	mov	r1, r9
 8007004:	4640      	mov	r0, r8
 8007006:	47d0      	blx	sl
 8007008:	3001      	adds	r0, #1
 800700a:	d09d      	beq.n	8006f48 <_printf_i+0x15c>
 800700c:	3501      	adds	r5, #1
 800700e:	68e3      	ldr	r3, [r4, #12]
 8007010:	9903      	ldr	r1, [sp, #12]
 8007012:	1a5b      	subs	r3, r3, r1
 8007014:	42ab      	cmp	r3, r5
 8007016:	dcf2      	bgt.n	8006ffe <_printf_i+0x212>
 8007018:	e7eb      	b.n	8006ff2 <_printf_i+0x206>
 800701a:	2500      	movs	r5, #0
 800701c:	f104 0619 	add.w	r6, r4, #25
 8007020:	e7f5      	b.n	800700e <_printf_i+0x222>
 8007022:	bf00      	nop
 8007024:	08008561 	.word	0x08008561
 8007028:	08008572 	.word	0x08008572

0800702c <__sflush_r>:
 800702c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007034:	0716      	lsls	r6, r2, #28
 8007036:	4605      	mov	r5, r0
 8007038:	460c      	mov	r4, r1
 800703a:	d454      	bmi.n	80070e6 <__sflush_r+0xba>
 800703c:	684b      	ldr	r3, [r1, #4]
 800703e:	2b00      	cmp	r3, #0
 8007040:	dc02      	bgt.n	8007048 <__sflush_r+0x1c>
 8007042:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007044:	2b00      	cmp	r3, #0
 8007046:	dd48      	ble.n	80070da <__sflush_r+0xae>
 8007048:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800704a:	2e00      	cmp	r6, #0
 800704c:	d045      	beq.n	80070da <__sflush_r+0xae>
 800704e:	2300      	movs	r3, #0
 8007050:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007054:	682f      	ldr	r7, [r5, #0]
 8007056:	6a21      	ldr	r1, [r4, #32]
 8007058:	602b      	str	r3, [r5, #0]
 800705a:	d030      	beq.n	80070be <__sflush_r+0x92>
 800705c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800705e:	89a3      	ldrh	r3, [r4, #12]
 8007060:	0759      	lsls	r1, r3, #29
 8007062:	d505      	bpl.n	8007070 <__sflush_r+0x44>
 8007064:	6863      	ldr	r3, [r4, #4]
 8007066:	1ad2      	subs	r2, r2, r3
 8007068:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800706a:	b10b      	cbz	r3, 8007070 <__sflush_r+0x44>
 800706c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800706e:	1ad2      	subs	r2, r2, r3
 8007070:	2300      	movs	r3, #0
 8007072:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007074:	6a21      	ldr	r1, [r4, #32]
 8007076:	4628      	mov	r0, r5
 8007078:	47b0      	blx	r6
 800707a:	1c43      	adds	r3, r0, #1
 800707c:	89a3      	ldrh	r3, [r4, #12]
 800707e:	d106      	bne.n	800708e <__sflush_r+0x62>
 8007080:	6829      	ldr	r1, [r5, #0]
 8007082:	291d      	cmp	r1, #29
 8007084:	d82b      	bhi.n	80070de <__sflush_r+0xb2>
 8007086:	4a2a      	ldr	r2, [pc, #168]	@ (8007130 <__sflush_r+0x104>)
 8007088:	410a      	asrs	r2, r1
 800708a:	07d6      	lsls	r6, r2, #31
 800708c:	d427      	bmi.n	80070de <__sflush_r+0xb2>
 800708e:	2200      	movs	r2, #0
 8007090:	6062      	str	r2, [r4, #4]
 8007092:	04d9      	lsls	r1, r3, #19
 8007094:	6922      	ldr	r2, [r4, #16]
 8007096:	6022      	str	r2, [r4, #0]
 8007098:	d504      	bpl.n	80070a4 <__sflush_r+0x78>
 800709a:	1c42      	adds	r2, r0, #1
 800709c:	d101      	bne.n	80070a2 <__sflush_r+0x76>
 800709e:	682b      	ldr	r3, [r5, #0]
 80070a0:	b903      	cbnz	r3, 80070a4 <__sflush_r+0x78>
 80070a2:	6560      	str	r0, [r4, #84]	@ 0x54
 80070a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80070a6:	602f      	str	r7, [r5, #0]
 80070a8:	b1b9      	cbz	r1, 80070da <__sflush_r+0xae>
 80070aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80070ae:	4299      	cmp	r1, r3
 80070b0:	d002      	beq.n	80070b8 <__sflush_r+0x8c>
 80070b2:	4628      	mov	r0, r5
 80070b4:	f7ff fbea 	bl	800688c <_free_r>
 80070b8:	2300      	movs	r3, #0
 80070ba:	6363      	str	r3, [r4, #52]	@ 0x34
 80070bc:	e00d      	b.n	80070da <__sflush_r+0xae>
 80070be:	2301      	movs	r3, #1
 80070c0:	4628      	mov	r0, r5
 80070c2:	47b0      	blx	r6
 80070c4:	4602      	mov	r2, r0
 80070c6:	1c50      	adds	r0, r2, #1
 80070c8:	d1c9      	bne.n	800705e <__sflush_r+0x32>
 80070ca:	682b      	ldr	r3, [r5, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d0c6      	beq.n	800705e <__sflush_r+0x32>
 80070d0:	2b1d      	cmp	r3, #29
 80070d2:	d001      	beq.n	80070d8 <__sflush_r+0xac>
 80070d4:	2b16      	cmp	r3, #22
 80070d6:	d11e      	bne.n	8007116 <__sflush_r+0xea>
 80070d8:	602f      	str	r7, [r5, #0]
 80070da:	2000      	movs	r0, #0
 80070dc:	e022      	b.n	8007124 <__sflush_r+0xf8>
 80070de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070e2:	b21b      	sxth	r3, r3
 80070e4:	e01b      	b.n	800711e <__sflush_r+0xf2>
 80070e6:	690f      	ldr	r7, [r1, #16]
 80070e8:	2f00      	cmp	r7, #0
 80070ea:	d0f6      	beq.n	80070da <__sflush_r+0xae>
 80070ec:	0793      	lsls	r3, r2, #30
 80070ee:	680e      	ldr	r6, [r1, #0]
 80070f0:	bf08      	it	eq
 80070f2:	694b      	ldreq	r3, [r1, #20]
 80070f4:	600f      	str	r7, [r1, #0]
 80070f6:	bf18      	it	ne
 80070f8:	2300      	movne	r3, #0
 80070fa:	eba6 0807 	sub.w	r8, r6, r7
 80070fe:	608b      	str	r3, [r1, #8]
 8007100:	f1b8 0f00 	cmp.w	r8, #0
 8007104:	dde9      	ble.n	80070da <__sflush_r+0xae>
 8007106:	6a21      	ldr	r1, [r4, #32]
 8007108:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800710a:	4643      	mov	r3, r8
 800710c:	463a      	mov	r2, r7
 800710e:	4628      	mov	r0, r5
 8007110:	47b0      	blx	r6
 8007112:	2800      	cmp	r0, #0
 8007114:	dc08      	bgt.n	8007128 <__sflush_r+0xfc>
 8007116:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800711a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800711e:	81a3      	strh	r3, [r4, #12]
 8007120:	f04f 30ff 	mov.w	r0, #4294967295
 8007124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007128:	4407      	add	r7, r0
 800712a:	eba8 0800 	sub.w	r8, r8, r0
 800712e:	e7e7      	b.n	8007100 <__sflush_r+0xd4>
 8007130:	dfbffffe 	.word	0xdfbffffe

08007134 <_fflush_r>:
 8007134:	b538      	push	{r3, r4, r5, lr}
 8007136:	690b      	ldr	r3, [r1, #16]
 8007138:	4605      	mov	r5, r0
 800713a:	460c      	mov	r4, r1
 800713c:	b913      	cbnz	r3, 8007144 <_fflush_r+0x10>
 800713e:	2500      	movs	r5, #0
 8007140:	4628      	mov	r0, r5
 8007142:	bd38      	pop	{r3, r4, r5, pc}
 8007144:	b118      	cbz	r0, 800714e <_fflush_r+0x1a>
 8007146:	6a03      	ldr	r3, [r0, #32]
 8007148:	b90b      	cbnz	r3, 800714e <_fflush_r+0x1a>
 800714a:	f7ff f8e9 	bl	8006320 <__sinit>
 800714e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d0f3      	beq.n	800713e <_fflush_r+0xa>
 8007156:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007158:	07d0      	lsls	r0, r2, #31
 800715a:	d404      	bmi.n	8007166 <_fflush_r+0x32>
 800715c:	0599      	lsls	r1, r3, #22
 800715e:	d402      	bmi.n	8007166 <_fflush_r+0x32>
 8007160:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007162:	f7ff fb90 	bl	8006886 <__retarget_lock_acquire_recursive>
 8007166:	4628      	mov	r0, r5
 8007168:	4621      	mov	r1, r4
 800716a:	f7ff ff5f 	bl	800702c <__sflush_r>
 800716e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007170:	07da      	lsls	r2, r3, #31
 8007172:	4605      	mov	r5, r0
 8007174:	d4e4      	bmi.n	8007140 <_fflush_r+0xc>
 8007176:	89a3      	ldrh	r3, [r4, #12]
 8007178:	059b      	lsls	r3, r3, #22
 800717a:	d4e1      	bmi.n	8007140 <_fflush_r+0xc>
 800717c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800717e:	f7ff fb83 	bl	8006888 <__retarget_lock_release_recursive>
 8007182:	e7dd      	b.n	8007140 <_fflush_r+0xc>

08007184 <__swhatbuf_r>:
 8007184:	b570      	push	{r4, r5, r6, lr}
 8007186:	460c      	mov	r4, r1
 8007188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800718c:	2900      	cmp	r1, #0
 800718e:	b096      	sub	sp, #88	@ 0x58
 8007190:	4615      	mov	r5, r2
 8007192:	461e      	mov	r6, r3
 8007194:	da0d      	bge.n	80071b2 <__swhatbuf_r+0x2e>
 8007196:	89a3      	ldrh	r3, [r4, #12]
 8007198:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800719c:	f04f 0100 	mov.w	r1, #0
 80071a0:	bf14      	ite	ne
 80071a2:	2340      	movne	r3, #64	@ 0x40
 80071a4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80071a8:	2000      	movs	r0, #0
 80071aa:	6031      	str	r1, [r6, #0]
 80071ac:	602b      	str	r3, [r5, #0]
 80071ae:	b016      	add	sp, #88	@ 0x58
 80071b0:	bd70      	pop	{r4, r5, r6, pc}
 80071b2:	466a      	mov	r2, sp
 80071b4:	f000 f848 	bl	8007248 <_fstat_r>
 80071b8:	2800      	cmp	r0, #0
 80071ba:	dbec      	blt.n	8007196 <__swhatbuf_r+0x12>
 80071bc:	9901      	ldr	r1, [sp, #4]
 80071be:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80071c2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80071c6:	4259      	negs	r1, r3
 80071c8:	4159      	adcs	r1, r3
 80071ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80071ce:	e7eb      	b.n	80071a8 <__swhatbuf_r+0x24>

080071d0 <__smakebuf_r>:
 80071d0:	898b      	ldrh	r3, [r1, #12]
 80071d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071d4:	079d      	lsls	r5, r3, #30
 80071d6:	4606      	mov	r6, r0
 80071d8:	460c      	mov	r4, r1
 80071da:	d507      	bpl.n	80071ec <__smakebuf_r+0x1c>
 80071dc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80071e0:	6023      	str	r3, [r4, #0]
 80071e2:	6123      	str	r3, [r4, #16]
 80071e4:	2301      	movs	r3, #1
 80071e6:	6163      	str	r3, [r4, #20]
 80071e8:	b003      	add	sp, #12
 80071ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071ec:	ab01      	add	r3, sp, #4
 80071ee:	466a      	mov	r2, sp
 80071f0:	f7ff ffc8 	bl	8007184 <__swhatbuf_r>
 80071f4:	9f00      	ldr	r7, [sp, #0]
 80071f6:	4605      	mov	r5, r0
 80071f8:	4639      	mov	r1, r7
 80071fa:	4630      	mov	r0, r6
 80071fc:	f7ff fbba 	bl	8006974 <_malloc_r>
 8007200:	b948      	cbnz	r0, 8007216 <__smakebuf_r+0x46>
 8007202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007206:	059a      	lsls	r2, r3, #22
 8007208:	d4ee      	bmi.n	80071e8 <__smakebuf_r+0x18>
 800720a:	f023 0303 	bic.w	r3, r3, #3
 800720e:	f043 0302 	orr.w	r3, r3, #2
 8007212:	81a3      	strh	r3, [r4, #12]
 8007214:	e7e2      	b.n	80071dc <__smakebuf_r+0xc>
 8007216:	89a3      	ldrh	r3, [r4, #12]
 8007218:	6020      	str	r0, [r4, #0]
 800721a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800721e:	81a3      	strh	r3, [r4, #12]
 8007220:	9b01      	ldr	r3, [sp, #4]
 8007222:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007226:	b15b      	cbz	r3, 8007240 <__smakebuf_r+0x70>
 8007228:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800722c:	4630      	mov	r0, r6
 800722e:	f000 f81d 	bl	800726c <_isatty_r>
 8007232:	b128      	cbz	r0, 8007240 <__smakebuf_r+0x70>
 8007234:	89a3      	ldrh	r3, [r4, #12]
 8007236:	f023 0303 	bic.w	r3, r3, #3
 800723a:	f043 0301 	orr.w	r3, r3, #1
 800723e:	81a3      	strh	r3, [r4, #12]
 8007240:	89a3      	ldrh	r3, [r4, #12]
 8007242:	431d      	orrs	r5, r3
 8007244:	81a5      	strh	r5, [r4, #12]
 8007246:	e7cf      	b.n	80071e8 <__smakebuf_r+0x18>

08007248 <_fstat_r>:
 8007248:	b538      	push	{r3, r4, r5, lr}
 800724a:	4d07      	ldr	r5, [pc, #28]	@ (8007268 <_fstat_r+0x20>)
 800724c:	2300      	movs	r3, #0
 800724e:	4604      	mov	r4, r0
 8007250:	4608      	mov	r0, r1
 8007252:	4611      	mov	r1, r2
 8007254:	602b      	str	r3, [r5, #0]
 8007256:	f7fb fa50 	bl	80026fa <_fstat>
 800725a:	1c43      	adds	r3, r0, #1
 800725c:	d102      	bne.n	8007264 <_fstat_r+0x1c>
 800725e:	682b      	ldr	r3, [r5, #0]
 8007260:	b103      	cbz	r3, 8007264 <_fstat_r+0x1c>
 8007262:	6023      	str	r3, [r4, #0]
 8007264:	bd38      	pop	{r3, r4, r5, pc}
 8007266:	bf00      	nop
 8007268:	200004e8 	.word	0x200004e8

0800726c <_isatty_r>:
 800726c:	b538      	push	{r3, r4, r5, lr}
 800726e:	4d06      	ldr	r5, [pc, #24]	@ (8007288 <_isatty_r+0x1c>)
 8007270:	2300      	movs	r3, #0
 8007272:	4604      	mov	r4, r0
 8007274:	4608      	mov	r0, r1
 8007276:	602b      	str	r3, [r5, #0]
 8007278:	f7fb fa4f 	bl	800271a <_isatty>
 800727c:	1c43      	adds	r3, r0, #1
 800727e:	d102      	bne.n	8007286 <_isatty_r+0x1a>
 8007280:	682b      	ldr	r3, [r5, #0]
 8007282:	b103      	cbz	r3, 8007286 <_isatty_r+0x1a>
 8007284:	6023      	str	r3, [r4, #0]
 8007286:	bd38      	pop	{r3, r4, r5, pc}
 8007288:	200004e8 	.word	0x200004e8

0800728c <_sbrk_r>:
 800728c:	b538      	push	{r3, r4, r5, lr}
 800728e:	4d06      	ldr	r5, [pc, #24]	@ (80072a8 <_sbrk_r+0x1c>)
 8007290:	2300      	movs	r3, #0
 8007292:	4604      	mov	r4, r0
 8007294:	4608      	mov	r0, r1
 8007296:	602b      	str	r3, [r5, #0]
 8007298:	f7fb fa58 	bl	800274c <_sbrk>
 800729c:	1c43      	adds	r3, r0, #1
 800729e:	d102      	bne.n	80072a6 <_sbrk_r+0x1a>
 80072a0:	682b      	ldr	r3, [r5, #0]
 80072a2:	b103      	cbz	r3, 80072a6 <_sbrk_r+0x1a>
 80072a4:	6023      	str	r3, [r4, #0]
 80072a6:	bd38      	pop	{r3, r4, r5, pc}
 80072a8:	200004e8 	.word	0x200004e8
 80072ac:	00000000 	.word	0x00000000

080072b0 <cos>:
 80072b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80072b2:	ec53 2b10 	vmov	r2, r3, d0
 80072b6:	4826      	ldr	r0, [pc, #152]	@ (8007350 <cos+0xa0>)
 80072b8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80072bc:	4281      	cmp	r1, r0
 80072be:	d806      	bhi.n	80072ce <cos+0x1e>
 80072c0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8007348 <cos+0x98>
 80072c4:	b005      	add	sp, #20
 80072c6:	f85d eb04 	ldr.w	lr, [sp], #4
 80072ca:	f000 b899 	b.w	8007400 <__kernel_cos>
 80072ce:	4821      	ldr	r0, [pc, #132]	@ (8007354 <cos+0xa4>)
 80072d0:	4281      	cmp	r1, r0
 80072d2:	d908      	bls.n	80072e6 <cos+0x36>
 80072d4:	4610      	mov	r0, r2
 80072d6:	4619      	mov	r1, r3
 80072d8:	f7f8 fff6 	bl	80002c8 <__aeabi_dsub>
 80072dc:	ec41 0b10 	vmov	d0, r0, r1
 80072e0:	b005      	add	sp, #20
 80072e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80072e6:	4668      	mov	r0, sp
 80072e8:	f000 fa0e 	bl	8007708 <__ieee754_rem_pio2>
 80072ec:	f000 0003 	and.w	r0, r0, #3
 80072f0:	2801      	cmp	r0, #1
 80072f2:	d00b      	beq.n	800730c <cos+0x5c>
 80072f4:	2802      	cmp	r0, #2
 80072f6:	d015      	beq.n	8007324 <cos+0x74>
 80072f8:	b9d8      	cbnz	r0, 8007332 <cos+0x82>
 80072fa:	ed9d 1b02 	vldr	d1, [sp, #8]
 80072fe:	ed9d 0b00 	vldr	d0, [sp]
 8007302:	f000 f87d 	bl	8007400 <__kernel_cos>
 8007306:	ec51 0b10 	vmov	r0, r1, d0
 800730a:	e7e7      	b.n	80072dc <cos+0x2c>
 800730c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007310:	ed9d 0b00 	vldr	d0, [sp]
 8007314:	f000 f93c 	bl	8007590 <__kernel_sin>
 8007318:	ec53 2b10 	vmov	r2, r3, d0
 800731c:	4610      	mov	r0, r2
 800731e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8007322:	e7db      	b.n	80072dc <cos+0x2c>
 8007324:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007328:	ed9d 0b00 	vldr	d0, [sp]
 800732c:	f000 f868 	bl	8007400 <__kernel_cos>
 8007330:	e7f2      	b.n	8007318 <cos+0x68>
 8007332:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007336:	ed9d 0b00 	vldr	d0, [sp]
 800733a:	2001      	movs	r0, #1
 800733c:	f000 f928 	bl	8007590 <__kernel_sin>
 8007340:	e7e1      	b.n	8007306 <cos+0x56>
 8007342:	bf00      	nop
 8007344:	f3af 8000 	nop.w
	...
 8007350:	3fe921fb 	.word	0x3fe921fb
 8007354:	7fefffff 	.word	0x7fefffff

08007358 <sin>:
 8007358:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800735a:	ec53 2b10 	vmov	r2, r3, d0
 800735e:	4826      	ldr	r0, [pc, #152]	@ (80073f8 <sin+0xa0>)
 8007360:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007364:	4281      	cmp	r1, r0
 8007366:	d807      	bhi.n	8007378 <sin+0x20>
 8007368:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80073f0 <sin+0x98>
 800736c:	2000      	movs	r0, #0
 800736e:	b005      	add	sp, #20
 8007370:	f85d eb04 	ldr.w	lr, [sp], #4
 8007374:	f000 b90c 	b.w	8007590 <__kernel_sin>
 8007378:	4820      	ldr	r0, [pc, #128]	@ (80073fc <sin+0xa4>)
 800737a:	4281      	cmp	r1, r0
 800737c:	d908      	bls.n	8007390 <sin+0x38>
 800737e:	4610      	mov	r0, r2
 8007380:	4619      	mov	r1, r3
 8007382:	f7f8 ffa1 	bl	80002c8 <__aeabi_dsub>
 8007386:	ec41 0b10 	vmov	d0, r0, r1
 800738a:	b005      	add	sp, #20
 800738c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007390:	4668      	mov	r0, sp
 8007392:	f000 f9b9 	bl	8007708 <__ieee754_rem_pio2>
 8007396:	f000 0003 	and.w	r0, r0, #3
 800739a:	2801      	cmp	r0, #1
 800739c:	d00c      	beq.n	80073b8 <sin+0x60>
 800739e:	2802      	cmp	r0, #2
 80073a0:	d011      	beq.n	80073c6 <sin+0x6e>
 80073a2:	b9e8      	cbnz	r0, 80073e0 <sin+0x88>
 80073a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80073a8:	ed9d 0b00 	vldr	d0, [sp]
 80073ac:	2001      	movs	r0, #1
 80073ae:	f000 f8ef 	bl	8007590 <__kernel_sin>
 80073b2:	ec51 0b10 	vmov	r0, r1, d0
 80073b6:	e7e6      	b.n	8007386 <sin+0x2e>
 80073b8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80073bc:	ed9d 0b00 	vldr	d0, [sp]
 80073c0:	f000 f81e 	bl	8007400 <__kernel_cos>
 80073c4:	e7f5      	b.n	80073b2 <sin+0x5a>
 80073c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80073ca:	ed9d 0b00 	vldr	d0, [sp]
 80073ce:	2001      	movs	r0, #1
 80073d0:	f000 f8de 	bl	8007590 <__kernel_sin>
 80073d4:	ec53 2b10 	vmov	r2, r3, d0
 80073d8:	4610      	mov	r0, r2
 80073da:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80073de:	e7d2      	b.n	8007386 <sin+0x2e>
 80073e0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80073e4:	ed9d 0b00 	vldr	d0, [sp]
 80073e8:	f000 f80a 	bl	8007400 <__kernel_cos>
 80073ec:	e7f2      	b.n	80073d4 <sin+0x7c>
 80073ee:	bf00      	nop
	...
 80073f8:	3fe921fb 	.word	0x3fe921fb
 80073fc:	7fefffff 	.word	0x7fefffff

08007400 <__kernel_cos>:
 8007400:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007404:	ec57 6b10 	vmov	r6, r7, d0
 8007408:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800740c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8007410:	ed8d 1b00 	vstr	d1, [sp]
 8007414:	d206      	bcs.n	8007424 <__kernel_cos+0x24>
 8007416:	4630      	mov	r0, r6
 8007418:	4639      	mov	r1, r7
 800741a:	f7f9 fba7 	bl	8000b6c <__aeabi_d2iz>
 800741e:	2800      	cmp	r0, #0
 8007420:	f000 8088 	beq.w	8007534 <__kernel_cos+0x134>
 8007424:	4632      	mov	r2, r6
 8007426:	463b      	mov	r3, r7
 8007428:	4630      	mov	r0, r6
 800742a:	4639      	mov	r1, r7
 800742c:	f7f9 f904 	bl	8000638 <__aeabi_dmul>
 8007430:	4b51      	ldr	r3, [pc, #324]	@ (8007578 <__kernel_cos+0x178>)
 8007432:	2200      	movs	r2, #0
 8007434:	4604      	mov	r4, r0
 8007436:	460d      	mov	r5, r1
 8007438:	f7f9 f8fe 	bl	8000638 <__aeabi_dmul>
 800743c:	a340      	add	r3, pc, #256	@ (adr r3, 8007540 <__kernel_cos+0x140>)
 800743e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007442:	4682      	mov	sl, r0
 8007444:	468b      	mov	fp, r1
 8007446:	4620      	mov	r0, r4
 8007448:	4629      	mov	r1, r5
 800744a:	f7f9 f8f5 	bl	8000638 <__aeabi_dmul>
 800744e:	a33e      	add	r3, pc, #248	@ (adr r3, 8007548 <__kernel_cos+0x148>)
 8007450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007454:	f7f8 ff3a 	bl	80002cc <__adddf3>
 8007458:	4622      	mov	r2, r4
 800745a:	462b      	mov	r3, r5
 800745c:	f7f9 f8ec 	bl	8000638 <__aeabi_dmul>
 8007460:	a33b      	add	r3, pc, #236	@ (adr r3, 8007550 <__kernel_cos+0x150>)
 8007462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007466:	f7f8 ff2f 	bl	80002c8 <__aeabi_dsub>
 800746a:	4622      	mov	r2, r4
 800746c:	462b      	mov	r3, r5
 800746e:	f7f9 f8e3 	bl	8000638 <__aeabi_dmul>
 8007472:	a339      	add	r3, pc, #228	@ (adr r3, 8007558 <__kernel_cos+0x158>)
 8007474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007478:	f7f8 ff28 	bl	80002cc <__adddf3>
 800747c:	4622      	mov	r2, r4
 800747e:	462b      	mov	r3, r5
 8007480:	f7f9 f8da 	bl	8000638 <__aeabi_dmul>
 8007484:	a336      	add	r3, pc, #216	@ (adr r3, 8007560 <__kernel_cos+0x160>)
 8007486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800748a:	f7f8 ff1d 	bl	80002c8 <__aeabi_dsub>
 800748e:	4622      	mov	r2, r4
 8007490:	462b      	mov	r3, r5
 8007492:	f7f9 f8d1 	bl	8000638 <__aeabi_dmul>
 8007496:	a334      	add	r3, pc, #208	@ (adr r3, 8007568 <__kernel_cos+0x168>)
 8007498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749c:	f7f8 ff16 	bl	80002cc <__adddf3>
 80074a0:	4622      	mov	r2, r4
 80074a2:	462b      	mov	r3, r5
 80074a4:	f7f9 f8c8 	bl	8000638 <__aeabi_dmul>
 80074a8:	4622      	mov	r2, r4
 80074aa:	462b      	mov	r3, r5
 80074ac:	f7f9 f8c4 	bl	8000638 <__aeabi_dmul>
 80074b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074b4:	4604      	mov	r4, r0
 80074b6:	460d      	mov	r5, r1
 80074b8:	4630      	mov	r0, r6
 80074ba:	4639      	mov	r1, r7
 80074bc:	f7f9 f8bc 	bl	8000638 <__aeabi_dmul>
 80074c0:	460b      	mov	r3, r1
 80074c2:	4602      	mov	r2, r0
 80074c4:	4629      	mov	r1, r5
 80074c6:	4620      	mov	r0, r4
 80074c8:	f7f8 fefe 	bl	80002c8 <__aeabi_dsub>
 80074cc:	4b2b      	ldr	r3, [pc, #172]	@ (800757c <__kernel_cos+0x17c>)
 80074ce:	4598      	cmp	r8, r3
 80074d0:	4606      	mov	r6, r0
 80074d2:	460f      	mov	r7, r1
 80074d4:	d810      	bhi.n	80074f8 <__kernel_cos+0xf8>
 80074d6:	4602      	mov	r2, r0
 80074d8:	460b      	mov	r3, r1
 80074da:	4650      	mov	r0, sl
 80074dc:	4659      	mov	r1, fp
 80074de:	f7f8 fef3 	bl	80002c8 <__aeabi_dsub>
 80074e2:	460b      	mov	r3, r1
 80074e4:	4926      	ldr	r1, [pc, #152]	@ (8007580 <__kernel_cos+0x180>)
 80074e6:	4602      	mov	r2, r0
 80074e8:	2000      	movs	r0, #0
 80074ea:	f7f8 feed 	bl	80002c8 <__aeabi_dsub>
 80074ee:	ec41 0b10 	vmov	d0, r0, r1
 80074f2:	b003      	add	sp, #12
 80074f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074f8:	4b22      	ldr	r3, [pc, #136]	@ (8007584 <__kernel_cos+0x184>)
 80074fa:	4921      	ldr	r1, [pc, #132]	@ (8007580 <__kernel_cos+0x180>)
 80074fc:	4598      	cmp	r8, r3
 80074fe:	bf8c      	ite	hi
 8007500:	4d21      	ldrhi	r5, [pc, #132]	@ (8007588 <__kernel_cos+0x188>)
 8007502:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8007506:	2400      	movs	r4, #0
 8007508:	4622      	mov	r2, r4
 800750a:	462b      	mov	r3, r5
 800750c:	2000      	movs	r0, #0
 800750e:	f7f8 fedb 	bl	80002c8 <__aeabi_dsub>
 8007512:	4622      	mov	r2, r4
 8007514:	4680      	mov	r8, r0
 8007516:	4689      	mov	r9, r1
 8007518:	462b      	mov	r3, r5
 800751a:	4650      	mov	r0, sl
 800751c:	4659      	mov	r1, fp
 800751e:	f7f8 fed3 	bl	80002c8 <__aeabi_dsub>
 8007522:	4632      	mov	r2, r6
 8007524:	463b      	mov	r3, r7
 8007526:	f7f8 fecf 	bl	80002c8 <__aeabi_dsub>
 800752a:	4602      	mov	r2, r0
 800752c:	460b      	mov	r3, r1
 800752e:	4640      	mov	r0, r8
 8007530:	4649      	mov	r1, r9
 8007532:	e7da      	b.n	80074ea <__kernel_cos+0xea>
 8007534:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8007570 <__kernel_cos+0x170>
 8007538:	e7db      	b.n	80074f2 <__kernel_cos+0xf2>
 800753a:	bf00      	nop
 800753c:	f3af 8000 	nop.w
 8007540:	be8838d4 	.word	0xbe8838d4
 8007544:	bda8fae9 	.word	0xbda8fae9
 8007548:	bdb4b1c4 	.word	0xbdb4b1c4
 800754c:	3e21ee9e 	.word	0x3e21ee9e
 8007550:	809c52ad 	.word	0x809c52ad
 8007554:	3e927e4f 	.word	0x3e927e4f
 8007558:	19cb1590 	.word	0x19cb1590
 800755c:	3efa01a0 	.word	0x3efa01a0
 8007560:	16c15177 	.word	0x16c15177
 8007564:	3f56c16c 	.word	0x3f56c16c
 8007568:	5555554c 	.word	0x5555554c
 800756c:	3fa55555 	.word	0x3fa55555
 8007570:	00000000 	.word	0x00000000
 8007574:	3ff00000 	.word	0x3ff00000
 8007578:	3fe00000 	.word	0x3fe00000
 800757c:	3fd33332 	.word	0x3fd33332
 8007580:	3ff00000 	.word	0x3ff00000
 8007584:	3fe90000 	.word	0x3fe90000
 8007588:	3fd20000 	.word	0x3fd20000
 800758c:	00000000 	.word	0x00000000

08007590 <__kernel_sin>:
 8007590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007594:	ec55 4b10 	vmov	r4, r5, d0
 8007598:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800759c:	b085      	sub	sp, #20
 800759e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80075a2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80075a6:	4680      	mov	r8, r0
 80075a8:	d205      	bcs.n	80075b6 <__kernel_sin+0x26>
 80075aa:	4620      	mov	r0, r4
 80075ac:	4629      	mov	r1, r5
 80075ae:	f7f9 fadd 	bl	8000b6c <__aeabi_d2iz>
 80075b2:	2800      	cmp	r0, #0
 80075b4:	d052      	beq.n	800765c <__kernel_sin+0xcc>
 80075b6:	4622      	mov	r2, r4
 80075b8:	462b      	mov	r3, r5
 80075ba:	4620      	mov	r0, r4
 80075bc:	4629      	mov	r1, r5
 80075be:	f7f9 f83b 	bl	8000638 <__aeabi_dmul>
 80075c2:	4682      	mov	sl, r0
 80075c4:	468b      	mov	fp, r1
 80075c6:	4602      	mov	r2, r0
 80075c8:	460b      	mov	r3, r1
 80075ca:	4620      	mov	r0, r4
 80075cc:	4629      	mov	r1, r5
 80075ce:	f7f9 f833 	bl	8000638 <__aeabi_dmul>
 80075d2:	a342      	add	r3, pc, #264	@ (adr r3, 80076dc <__kernel_sin+0x14c>)
 80075d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d8:	e9cd 0100 	strd	r0, r1, [sp]
 80075dc:	4650      	mov	r0, sl
 80075de:	4659      	mov	r1, fp
 80075e0:	f7f9 f82a 	bl	8000638 <__aeabi_dmul>
 80075e4:	a33f      	add	r3, pc, #252	@ (adr r3, 80076e4 <__kernel_sin+0x154>)
 80075e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ea:	f7f8 fe6d 	bl	80002c8 <__aeabi_dsub>
 80075ee:	4652      	mov	r2, sl
 80075f0:	465b      	mov	r3, fp
 80075f2:	f7f9 f821 	bl	8000638 <__aeabi_dmul>
 80075f6:	a33d      	add	r3, pc, #244	@ (adr r3, 80076ec <__kernel_sin+0x15c>)
 80075f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fc:	f7f8 fe66 	bl	80002cc <__adddf3>
 8007600:	4652      	mov	r2, sl
 8007602:	465b      	mov	r3, fp
 8007604:	f7f9 f818 	bl	8000638 <__aeabi_dmul>
 8007608:	a33a      	add	r3, pc, #232	@ (adr r3, 80076f4 <__kernel_sin+0x164>)
 800760a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800760e:	f7f8 fe5b 	bl	80002c8 <__aeabi_dsub>
 8007612:	4652      	mov	r2, sl
 8007614:	465b      	mov	r3, fp
 8007616:	f7f9 f80f 	bl	8000638 <__aeabi_dmul>
 800761a:	a338      	add	r3, pc, #224	@ (adr r3, 80076fc <__kernel_sin+0x16c>)
 800761c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007620:	f7f8 fe54 	bl	80002cc <__adddf3>
 8007624:	4606      	mov	r6, r0
 8007626:	460f      	mov	r7, r1
 8007628:	f1b8 0f00 	cmp.w	r8, #0
 800762c:	d11b      	bne.n	8007666 <__kernel_sin+0xd6>
 800762e:	4602      	mov	r2, r0
 8007630:	460b      	mov	r3, r1
 8007632:	4650      	mov	r0, sl
 8007634:	4659      	mov	r1, fp
 8007636:	f7f8 ffff 	bl	8000638 <__aeabi_dmul>
 800763a:	a325      	add	r3, pc, #148	@ (adr r3, 80076d0 <__kernel_sin+0x140>)
 800763c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007640:	f7f8 fe42 	bl	80002c8 <__aeabi_dsub>
 8007644:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007648:	f7f8 fff6 	bl	8000638 <__aeabi_dmul>
 800764c:	4602      	mov	r2, r0
 800764e:	460b      	mov	r3, r1
 8007650:	4620      	mov	r0, r4
 8007652:	4629      	mov	r1, r5
 8007654:	f7f8 fe3a 	bl	80002cc <__adddf3>
 8007658:	4604      	mov	r4, r0
 800765a:	460d      	mov	r5, r1
 800765c:	ec45 4b10 	vmov	d0, r4, r5
 8007660:	b005      	add	sp, #20
 8007662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007666:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800766a:	4b1b      	ldr	r3, [pc, #108]	@ (80076d8 <__kernel_sin+0x148>)
 800766c:	2200      	movs	r2, #0
 800766e:	f7f8 ffe3 	bl	8000638 <__aeabi_dmul>
 8007672:	4632      	mov	r2, r6
 8007674:	4680      	mov	r8, r0
 8007676:	4689      	mov	r9, r1
 8007678:	463b      	mov	r3, r7
 800767a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800767e:	f7f8 ffdb 	bl	8000638 <__aeabi_dmul>
 8007682:	4602      	mov	r2, r0
 8007684:	460b      	mov	r3, r1
 8007686:	4640      	mov	r0, r8
 8007688:	4649      	mov	r1, r9
 800768a:	f7f8 fe1d 	bl	80002c8 <__aeabi_dsub>
 800768e:	4652      	mov	r2, sl
 8007690:	465b      	mov	r3, fp
 8007692:	f7f8 ffd1 	bl	8000638 <__aeabi_dmul>
 8007696:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800769a:	f7f8 fe15 	bl	80002c8 <__aeabi_dsub>
 800769e:	a30c      	add	r3, pc, #48	@ (adr r3, 80076d0 <__kernel_sin+0x140>)
 80076a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a4:	4606      	mov	r6, r0
 80076a6:	460f      	mov	r7, r1
 80076a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80076ac:	f7f8 ffc4 	bl	8000638 <__aeabi_dmul>
 80076b0:	4602      	mov	r2, r0
 80076b2:	460b      	mov	r3, r1
 80076b4:	4630      	mov	r0, r6
 80076b6:	4639      	mov	r1, r7
 80076b8:	f7f8 fe08 	bl	80002cc <__adddf3>
 80076bc:	4602      	mov	r2, r0
 80076be:	460b      	mov	r3, r1
 80076c0:	4620      	mov	r0, r4
 80076c2:	4629      	mov	r1, r5
 80076c4:	f7f8 fe00 	bl	80002c8 <__aeabi_dsub>
 80076c8:	e7c6      	b.n	8007658 <__kernel_sin+0xc8>
 80076ca:	bf00      	nop
 80076cc:	f3af 8000 	nop.w
 80076d0:	55555549 	.word	0x55555549
 80076d4:	3fc55555 	.word	0x3fc55555
 80076d8:	3fe00000 	.word	0x3fe00000
 80076dc:	5acfd57c 	.word	0x5acfd57c
 80076e0:	3de5d93a 	.word	0x3de5d93a
 80076e4:	8a2b9ceb 	.word	0x8a2b9ceb
 80076e8:	3e5ae5e6 	.word	0x3e5ae5e6
 80076ec:	57b1fe7d 	.word	0x57b1fe7d
 80076f0:	3ec71de3 	.word	0x3ec71de3
 80076f4:	19c161d5 	.word	0x19c161d5
 80076f8:	3f2a01a0 	.word	0x3f2a01a0
 80076fc:	1110f8a6 	.word	0x1110f8a6
 8007700:	3f811111 	.word	0x3f811111
 8007704:	00000000 	.word	0x00000000

08007708 <__ieee754_rem_pio2>:
 8007708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800770c:	ec57 6b10 	vmov	r6, r7, d0
 8007710:	4bc5      	ldr	r3, [pc, #788]	@ (8007a28 <__ieee754_rem_pio2+0x320>)
 8007712:	b08d      	sub	sp, #52	@ 0x34
 8007714:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8007718:	4598      	cmp	r8, r3
 800771a:	4604      	mov	r4, r0
 800771c:	9704      	str	r7, [sp, #16]
 800771e:	d807      	bhi.n	8007730 <__ieee754_rem_pio2+0x28>
 8007720:	2200      	movs	r2, #0
 8007722:	2300      	movs	r3, #0
 8007724:	ed80 0b00 	vstr	d0, [r0]
 8007728:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800772c:	2500      	movs	r5, #0
 800772e:	e028      	b.n	8007782 <__ieee754_rem_pio2+0x7a>
 8007730:	4bbe      	ldr	r3, [pc, #760]	@ (8007a2c <__ieee754_rem_pio2+0x324>)
 8007732:	4598      	cmp	r8, r3
 8007734:	d878      	bhi.n	8007828 <__ieee754_rem_pio2+0x120>
 8007736:	9b04      	ldr	r3, [sp, #16]
 8007738:	4dbd      	ldr	r5, [pc, #756]	@ (8007a30 <__ieee754_rem_pio2+0x328>)
 800773a:	2b00      	cmp	r3, #0
 800773c:	4630      	mov	r0, r6
 800773e:	a3ac      	add	r3, pc, #688	@ (adr r3, 80079f0 <__ieee754_rem_pio2+0x2e8>)
 8007740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007744:	4639      	mov	r1, r7
 8007746:	dd38      	ble.n	80077ba <__ieee754_rem_pio2+0xb2>
 8007748:	f7f8 fdbe 	bl	80002c8 <__aeabi_dsub>
 800774c:	45a8      	cmp	r8, r5
 800774e:	4606      	mov	r6, r0
 8007750:	460f      	mov	r7, r1
 8007752:	d01a      	beq.n	800778a <__ieee754_rem_pio2+0x82>
 8007754:	a3a8      	add	r3, pc, #672	@ (adr r3, 80079f8 <__ieee754_rem_pio2+0x2f0>)
 8007756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800775a:	f7f8 fdb5 	bl	80002c8 <__aeabi_dsub>
 800775e:	4602      	mov	r2, r0
 8007760:	460b      	mov	r3, r1
 8007762:	4680      	mov	r8, r0
 8007764:	4689      	mov	r9, r1
 8007766:	4630      	mov	r0, r6
 8007768:	4639      	mov	r1, r7
 800776a:	f7f8 fdad 	bl	80002c8 <__aeabi_dsub>
 800776e:	a3a2      	add	r3, pc, #648	@ (adr r3, 80079f8 <__ieee754_rem_pio2+0x2f0>)
 8007770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007774:	f7f8 fda8 	bl	80002c8 <__aeabi_dsub>
 8007778:	e9c4 8900 	strd	r8, r9, [r4]
 800777c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007780:	2501      	movs	r5, #1
 8007782:	4628      	mov	r0, r5
 8007784:	b00d      	add	sp, #52	@ 0x34
 8007786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800778a:	a39d      	add	r3, pc, #628	@ (adr r3, 8007a00 <__ieee754_rem_pio2+0x2f8>)
 800778c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007790:	f7f8 fd9a 	bl	80002c8 <__aeabi_dsub>
 8007794:	a39c      	add	r3, pc, #624	@ (adr r3, 8007a08 <__ieee754_rem_pio2+0x300>)
 8007796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800779a:	4606      	mov	r6, r0
 800779c:	460f      	mov	r7, r1
 800779e:	f7f8 fd93 	bl	80002c8 <__aeabi_dsub>
 80077a2:	4602      	mov	r2, r0
 80077a4:	460b      	mov	r3, r1
 80077a6:	4680      	mov	r8, r0
 80077a8:	4689      	mov	r9, r1
 80077aa:	4630      	mov	r0, r6
 80077ac:	4639      	mov	r1, r7
 80077ae:	f7f8 fd8b 	bl	80002c8 <__aeabi_dsub>
 80077b2:	a395      	add	r3, pc, #596	@ (adr r3, 8007a08 <__ieee754_rem_pio2+0x300>)
 80077b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b8:	e7dc      	b.n	8007774 <__ieee754_rem_pio2+0x6c>
 80077ba:	f7f8 fd87 	bl	80002cc <__adddf3>
 80077be:	45a8      	cmp	r8, r5
 80077c0:	4606      	mov	r6, r0
 80077c2:	460f      	mov	r7, r1
 80077c4:	d018      	beq.n	80077f8 <__ieee754_rem_pio2+0xf0>
 80077c6:	a38c      	add	r3, pc, #560	@ (adr r3, 80079f8 <__ieee754_rem_pio2+0x2f0>)
 80077c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077cc:	f7f8 fd7e 	bl	80002cc <__adddf3>
 80077d0:	4602      	mov	r2, r0
 80077d2:	460b      	mov	r3, r1
 80077d4:	4680      	mov	r8, r0
 80077d6:	4689      	mov	r9, r1
 80077d8:	4630      	mov	r0, r6
 80077da:	4639      	mov	r1, r7
 80077dc:	f7f8 fd74 	bl	80002c8 <__aeabi_dsub>
 80077e0:	a385      	add	r3, pc, #532	@ (adr r3, 80079f8 <__ieee754_rem_pio2+0x2f0>)
 80077e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e6:	f7f8 fd71 	bl	80002cc <__adddf3>
 80077ea:	f04f 35ff 	mov.w	r5, #4294967295
 80077ee:	e9c4 8900 	strd	r8, r9, [r4]
 80077f2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80077f6:	e7c4      	b.n	8007782 <__ieee754_rem_pio2+0x7a>
 80077f8:	a381      	add	r3, pc, #516	@ (adr r3, 8007a00 <__ieee754_rem_pio2+0x2f8>)
 80077fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077fe:	f7f8 fd65 	bl	80002cc <__adddf3>
 8007802:	a381      	add	r3, pc, #516	@ (adr r3, 8007a08 <__ieee754_rem_pio2+0x300>)
 8007804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007808:	4606      	mov	r6, r0
 800780a:	460f      	mov	r7, r1
 800780c:	f7f8 fd5e 	bl	80002cc <__adddf3>
 8007810:	4602      	mov	r2, r0
 8007812:	460b      	mov	r3, r1
 8007814:	4680      	mov	r8, r0
 8007816:	4689      	mov	r9, r1
 8007818:	4630      	mov	r0, r6
 800781a:	4639      	mov	r1, r7
 800781c:	f7f8 fd54 	bl	80002c8 <__aeabi_dsub>
 8007820:	a379      	add	r3, pc, #484	@ (adr r3, 8007a08 <__ieee754_rem_pio2+0x300>)
 8007822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007826:	e7de      	b.n	80077e6 <__ieee754_rem_pio2+0xde>
 8007828:	4b82      	ldr	r3, [pc, #520]	@ (8007a34 <__ieee754_rem_pio2+0x32c>)
 800782a:	4598      	cmp	r8, r3
 800782c:	f200 80d1 	bhi.w	80079d2 <__ieee754_rem_pio2+0x2ca>
 8007830:	f000 f966 	bl	8007b00 <fabs>
 8007834:	ec57 6b10 	vmov	r6, r7, d0
 8007838:	a375      	add	r3, pc, #468	@ (adr r3, 8007a10 <__ieee754_rem_pio2+0x308>)
 800783a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783e:	4630      	mov	r0, r6
 8007840:	4639      	mov	r1, r7
 8007842:	f7f8 fef9 	bl	8000638 <__aeabi_dmul>
 8007846:	4b7c      	ldr	r3, [pc, #496]	@ (8007a38 <__ieee754_rem_pio2+0x330>)
 8007848:	2200      	movs	r2, #0
 800784a:	f7f8 fd3f 	bl	80002cc <__adddf3>
 800784e:	f7f9 f98d 	bl	8000b6c <__aeabi_d2iz>
 8007852:	4605      	mov	r5, r0
 8007854:	f7f8 fe86 	bl	8000564 <__aeabi_i2d>
 8007858:	4602      	mov	r2, r0
 800785a:	460b      	mov	r3, r1
 800785c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007860:	a363      	add	r3, pc, #396	@ (adr r3, 80079f0 <__ieee754_rem_pio2+0x2e8>)
 8007862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007866:	f7f8 fee7 	bl	8000638 <__aeabi_dmul>
 800786a:	4602      	mov	r2, r0
 800786c:	460b      	mov	r3, r1
 800786e:	4630      	mov	r0, r6
 8007870:	4639      	mov	r1, r7
 8007872:	f7f8 fd29 	bl	80002c8 <__aeabi_dsub>
 8007876:	a360      	add	r3, pc, #384	@ (adr r3, 80079f8 <__ieee754_rem_pio2+0x2f0>)
 8007878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800787c:	4682      	mov	sl, r0
 800787e:	468b      	mov	fp, r1
 8007880:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007884:	f7f8 fed8 	bl	8000638 <__aeabi_dmul>
 8007888:	2d1f      	cmp	r5, #31
 800788a:	4606      	mov	r6, r0
 800788c:	460f      	mov	r7, r1
 800788e:	dc0c      	bgt.n	80078aa <__ieee754_rem_pio2+0x1a2>
 8007890:	4b6a      	ldr	r3, [pc, #424]	@ (8007a3c <__ieee754_rem_pio2+0x334>)
 8007892:	1e6a      	subs	r2, r5, #1
 8007894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007898:	4543      	cmp	r3, r8
 800789a:	d006      	beq.n	80078aa <__ieee754_rem_pio2+0x1a2>
 800789c:	4632      	mov	r2, r6
 800789e:	463b      	mov	r3, r7
 80078a0:	4650      	mov	r0, sl
 80078a2:	4659      	mov	r1, fp
 80078a4:	f7f8 fd10 	bl	80002c8 <__aeabi_dsub>
 80078a8:	e00e      	b.n	80078c8 <__ieee754_rem_pio2+0x1c0>
 80078aa:	463b      	mov	r3, r7
 80078ac:	4632      	mov	r2, r6
 80078ae:	4650      	mov	r0, sl
 80078b0:	4659      	mov	r1, fp
 80078b2:	f7f8 fd09 	bl	80002c8 <__aeabi_dsub>
 80078b6:	ea4f 5328 	mov.w	r3, r8, asr #20
 80078ba:	9305      	str	r3, [sp, #20]
 80078bc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80078c0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80078c4:	2b10      	cmp	r3, #16
 80078c6:	dc02      	bgt.n	80078ce <__ieee754_rem_pio2+0x1c6>
 80078c8:	e9c4 0100 	strd	r0, r1, [r4]
 80078cc:	e039      	b.n	8007942 <__ieee754_rem_pio2+0x23a>
 80078ce:	a34c      	add	r3, pc, #304	@ (adr r3, 8007a00 <__ieee754_rem_pio2+0x2f8>)
 80078d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078d8:	f7f8 feae 	bl	8000638 <__aeabi_dmul>
 80078dc:	4606      	mov	r6, r0
 80078de:	460f      	mov	r7, r1
 80078e0:	4602      	mov	r2, r0
 80078e2:	460b      	mov	r3, r1
 80078e4:	4650      	mov	r0, sl
 80078e6:	4659      	mov	r1, fp
 80078e8:	f7f8 fcee 	bl	80002c8 <__aeabi_dsub>
 80078ec:	4602      	mov	r2, r0
 80078ee:	460b      	mov	r3, r1
 80078f0:	4680      	mov	r8, r0
 80078f2:	4689      	mov	r9, r1
 80078f4:	4650      	mov	r0, sl
 80078f6:	4659      	mov	r1, fp
 80078f8:	f7f8 fce6 	bl	80002c8 <__aeabi_dsub>
 80078fc:	4632      	mov	r2, r6
 80078fe:	463b      	mov	r3, r7
 8007900:	f7f8 fce2 	bl	80002c8 <__aeabi_dsub>
 8007904:	a340      	add	r3, pc, #256	@ (adr r3, 8007a08 <__ieee754_rem_pio2+0x300>)
 8007906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800790a:	4606      	mov	r6, r0
 800790c:	460f      	mov	r7, r1
 800790e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007912:	f7f8 fe91 	bl	8000638 <__aeabi_dmul>
 8007916:	4632      	mov	r2, r6
 8007918:	463b      	mov	r3, r7
 800791a:	f7f8 fcd5 	bl	80002c8 <__aeabi_dsub>
 800791e:	4602      	mov	r2, r0
 8007920:	460b      	mov	r3, r1
 8007922:	4606      	mov	r6, r0
 8007924:	460f      	mov	r7, r1
 8007926:	4640      	mov	r0, r8
 8007928:	4649      	mov	r1, r9
 800792a:	f7f8 fccd 	bl	80002c8 <__aeabi_dsub>
 800792e:	9a05      	ldr	r2, [sp, #20]
 8007930:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007934:	1ad3      	subs	r3, r2, r3
 8007936:	2b31      	cmp	r3, #49	@ 0x31
 8007938:	dc20      	bgt.n	800797c <__ieee754_rem_pio2+0x274>
 800793a:	e9c4 0100 	strd	r0, r1, [r4]
 800793e:	46c2      	mov	sl, r8
 8007940:	46cb      	mov	fp, r9
 8007942:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007946:	4650      	mov	r0, sl
 8007948:	4642      	mov	r2, r8
 800794a:	464b      	mov	r3, r9
 800794c:	4659      	mov	r1, fp
 800794e:	f7f8 fcbb 	bl	80002c8 <__aeabi_dsub>
 8007952:	463b      	mov	r3, r7
 8007954:	4632      	mov	r2, r6
 8007956:	f7f8 fcb7 	bl	80002c8 <__aeabi_dsub>
 800795a:	9b04      	ldr	r3, [sp, #16]
 800795c:	2b00      	cmp	r3, #0
 800795e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007962:	f6bf af0e 	bge.w	8007782 <__ieee754_rem_pio2+0x7a>
 8007966:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800796a:	6063      	str	r3, [r4, #4]
 800796c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007970:	f8c4 8000 	str.w	r8, [r4]
 8007974:	60a0      	str	r0, [r4, #8]
 8007976:	60e3      	str	r3, [r4, #12]
 8007978:	426d      	negs	r5, r5
 800797a:	e702      	b.n	8007782 <__ieee754_rem_pio2+0x7a>
 800797c:	a326      	add	r3, pc, #152	@ (adr r3, 8007a18 <__ieee754_rem_pio2+0x310>)
 800797e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007982:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007986:	f7f8 fe57 	bl	8000638 <__aeabi_dmul>
 800798a:	4606      	mov	r6, r0
 800798c:	460f      	mov	r7, r1
 800798e:	4602      	mov	r2, r0
 8007990:	460b      	mov	r3, r1
 8007992:	4640      	mov	r0, r8
 8007994:	4649      	mov	r1, r9
 8007996:	f7f8 fc97 	bl	80002c8 <__aeabi_dsub>
 800799a:	4602      	mov	r2, r0
 800799c:	460b      	mov	r3, r1
 800799e:	4682      	mov	sl, r0
 80079a0:	468b      	mov	fp, r1
 80079a2:	4640      	mov	r0, r8
 80079a4:	4649      	mov	r1, r9
 80079a6:	f7f8 fc8f 	bl	80002c8 <__aeabi_dsub>
 80079aa:	4632      	mov	r2, r6
 80079ac:	463b      	mov	r3, r7
 80079ae:	f7f8 fc8b 	bl	80002c8 <__aeabi_dsub>
 80079b2:	a31b      	add	r3, pc, #108	@ (adr r3, 8007a20 <__ieee754_rem_pio2+0x318>)
 80079b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b8:	4606      	mov	r6, r0
 80079ba:	460f      	mov	r7, r1
 80079bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079c0:	f7f8 fe3a 	bl	8000638 <__aeabi_dmul>
 80079c4:	4632      	mov	r2, r6
 80079c6:	463b      	mov	r3, r7
 80079c8:	f7f8 fc7e 	bl	80002c8 <__aeabi_dsub>
 80079cc:	4606      	mov	r6, r0
 80079ce:	460f      	mov	r7, r1
 80079d0:	e764      	b.n	800789c <__ieee754_rem_pio2+0x194>
 80079d2:	4b1b      	ldr	r3, [pc, #108]	@ (8007a40 <__ieee754_rem_pio2+0x338>)
 80079d4:	4598      	cmp	r8, r3
 80079d6:	d935      	bls.n	8007a44 <__ieee754_rem_pio2+0x33c>
 80079d8:	4632      	mov	r2, r6
 80079da:	463b      	mov	r3, r7
 80079dc:	4630      	mov	r0, r6
 80079de:	4639      	mov	r1, r7
 80079e0:	f7f8 fc72 	bl	80002c8 <__aeabi_dsub>
 80079e4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80079e8:	e9c4 0100 	strd	r0, r1, [r4]
 80079ec:	e69e      	b.n	800772c <__ieee754_rem_pio2+0x24>
 80079ee:	bf00      	nop
 80079f0:	54400000 	.word	0x54400000
 80079f4:	3ff921fb 	.word	0x3ff921fb
 80079f8:	1a626331 	.word	0x1a626331
 80079fc:	3dd0b461 	.word	0x3dd0b461
 8007a00:	1a600000 	.word	0x1a600000
 8007a04:	3dd0b461 	.word	0x3dd0b461
 8007a08:	2e037073 	.word	0x2e037073
 8007a0c:	3ba3198a 	.word	0x3ba3198a
 8007a10:	6dc9c883 	.word	0x6dc9c883
 8007a14:	3fe45f30 	.word	0x3fe45f30
 8007a18:	2e000000 	.word	0x2e000000
 8007a1c:	3ba3198a 	.word	0x3ba3198a
 8007a20:	252049c1 	.word	0x252049c1
 8007a24:	397b839a 	.word	0x397b839a
 8007a28:	3fe921fb 	.word	0x3fe921fb
 8007a2c:	4002d97b 	.word	0x4002d97b
 8007a30:	3ff921fb 	.word	0x3ff921fb
 8007a34:	413921fb 	.word	0x413921fb
 8007a38:	3fe00000 	.word	0x3fe00000
 8007a3c:	08008584 	.word	0x08008584
 8007a40:	7fefffff 	.word	0x7fefffff
 8007a44:	ea4f 5528 	mov.w	r5, r8, asr #20
 8007a48:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8007a4c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8007a50:	4630      	mov	r0, r6
 8007a52:	460f      	mov	r7, r1
 8007a54:	f7f9 f88a 	bl	8000b6c <__aeabi_d2iz>
 8007a58:	f7f8 fd84 	bl	8000564 <__aeabi_i2d>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	460b      	mov	r3, r1
 8007a60:	4630      	mov	r0, r6
 8007a62:	4639      	mov	r1, r7
 8007a64:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007a68:	f7f8 fc2e 	bl	80002c8 <__aeabi_dsub>
 8007a6c:	4b22      	ldr	r3, [pc, #136]	@ (8007af8 <__ieee754_rem_pio2+0x3f0>)
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f7f8 fde2 	bl	8000638 <__aeabi_dmul>
 8007a74:	460f      	mov	r7, r1
 8007a76:	4606      	mov	r6, r0
 8007a78:	f7f9 f878 	bl	8000b6c <__aeabi_d2iz>
 8007a7c:	f7f8 fd72 	bl	8000564 <__aeabi_i2d>
 8007a80:	4602      	mov	r2, r0
 8007a82:	460b      	mov	r3, r1
 8007a84:	4630      	mov	r0, r6
 8007a86:	4639      	mov	r1, r7
 8007a88:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007a8c:	f7f8 fc1c 	bl	80002c8 <__aeabi_dsub>
 8007a90:	4b19      	ldr	r3, [pc, #100]	@ (8007af8 <__ieee754_rem_pio2+0x3f0>)
 8007a92:	2200      	movs	r2, #0
 8007a94:	f7f8 fdd0 	bl	8000638 <__aeabi_dmul>
 8007a98:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8007a9c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8007aa0:	f04f 0803 	mov.w	r8, #3
 8007aa4:	2600      	movs	r6, #0
 8007aa6:	2700      	movs	r7, #0
 8007aa8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8007aac:	4632      	mov	r2, r6
 8007aae:	463b      	mov	r3, r7
 8007ab0:	46c2      	mov	sl, r8
 8007ab2:	f108 38ff 	add.w	r8, r8, #4294967295
 8007ab6:	f7f9 f827 	bl	8000b08 <__aeabi_dcmpeq>
 8007aba:	2800      	cmp	r0, #0
 8007abc:	d1f4      	bne.n	8007aa8 <__ieee754_rem_pio2+0x3a0>
 8007abe:	4b0f      	ldr	r3, [pc, #60]	@ (8007afc <__ieee754_rem_pio2+0x3f4>)
 8007ac0:	9301      	str	r3, [sp, #4]
 8007ac2:	2302      	movs	r3, #2
 8007ac4:	9300      	str	r3, [sp, #0]
 8007ac6:	462a      	mov	r2, r5
 8007ac8:	4653      	mov	r3, sl
 8007aca:	4621      	mov	r1, r4
 8007acc:	a806      	add	r0, sp, #24
 8007ace:	f000 f81f 	bl	8007b10 <__kernel_rem_pio2>
 8007ad2:	9b04      	ldr	r3, [sp, #16]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	4605      	mov	r5, r0
 8007ad8:	f6bf ae53 	bge.w	8007782 <__ieee754_rem_pio2+0x7a>
 8007adc:	e9d4 2100 	ldrd	r2, r1, [r4]
 8007ae0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007ae4:	e9c4 2300 	strd	r2, r3, [r4]
 8007ae8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8007aec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007af0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8007af4:	e740      	b.n	8007978 <__ieee754_rem_pio2+0x270>
 8007af6:	bf00      	nop
 8007af8:	41700000 	.word	0x41700000
 8007afc:	08008604 	.word	0x08008604

08007b00 <fabs>:
 8007b00:	ec51 0b10 	vmov	r0, r1, d0
 8007b04:	4602      	mov	r2, r0
 8007b06:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007b0a:	ec43 2b10 	vmov	d0, r2, r3
 8007b0e:	4770      	bx	lr

08007b10 <__kernel_rem_pio2>:
 8007b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b14:	ed2d 8b02 	vpush	{d8}
 8007b18:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8007b1c:	f112 0f14 	cmn.w	r2, #20
 8007b20:	9306      	str	r3, [sp, #24]
 8007b22:	9104      	str	r1, [sp, #16]
 8007b24:	4bbe      	ldr	r3, [pc, #760]	@ (8007e20 <__kernel_rem_pio2+0x310>)
 8007b26:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8007b28:	9008      	str	r0, [sp, #32]
 8007b2a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007b2e:	9300      	str	r3, [sp, #0]
 8007b30:	9b06      	ldr	r3, [sp, #24]
 8007b32:	f103 33ff 	add.w	r3, r3, #4294967295
 8007b36:	bfa8      	it	ge
 8007b38:	1ed4      	subge	r4, r2, #3
 8007b3a:	9305      	str	r3, [sp, #20]
 8007b3c:	bfb2      	itee	lt
 8007b3e:	2400      	movlt	r4, #0
 8007b40:	2318      	movge	r3, #24
 8007b42:	fb94 f4f3 	sdivge	r4, r4, r3
 8007b46:	f06f 0317 	mvn.w	r3, #23
 8007b4a:	fb04 3303 	mla	r3, r4, r3, r3
 8007b4e:	eb03 0b02 	add.w	fp, r3, r2
 8007b52:	9b00      	ldr	r3, [sp, #0]
 8007b54:	9a05      	ldr	r2, [sp, #20]
 8007b56:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8007e10 <__kernel_rem_pio2+0x300>
 8007b5a:	eb03 0802 	add.w	r8, r3, r2
 8007b5e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8007b60:	1aa7      	subs	r7, r4, r2
 8007b62:	ae20      	add	r6, sp, #128	@ 0x80
 8007b64:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007b68:	2500      	movs	r5, #0
 8007b6a:	4545      	cmp	r5, r8
 8007b6c:	dd13      	ble.n	8007b96 <__kernel_rem_pio2+0x86>
 8007b6e:	9b06      	ldr	r3, [sp, #24]
 8007b70:	aa20      	add	r2, sp, #128	@ 0x80
 8007b72:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8007b76:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8007b7a:	f04f 0800 	mov.w	r8, #0
 8007b7e:	9b00      	ldr	r3, [sp, #0]
 8007b80:	4598      	cmp	r8, r3
 8007b82:	dc31      	bgt.n	8007be8 <__kernel_rem_pio2+0xd8>
 8007b84:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8007e10 <__kernel_rem_pio2+0x300>
 8007b88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007b8c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007b90:	462f      	mov	r7, r5
 8007b92:	2600      	movs	r6, #0
 8007b94:	e01b      	b.n	8007bce <__kernel_rem_pio2+0xbe>
 8007b96:	42ef      	cmn	r7, r5
 8007b98:	d407      	bmi.n	8007baa <__kernel_rem_pio2+0x9a>
 8007b9a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007b9e:	f7f8 fce1 	bl	8000564 <__aeabi_i2d>
 8007ba2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007ba6:	3501      	adds	r5, #1
 8007ba8:	e7df      	b.n	8007b6a <__kernel_rem_pio2+0x5a>
 8007baa:	ec51 0b18 	vmov	r0, r1, d8
 8007bae:	e7f8      	b.n	8007ba2 <__kernel_rem_pio2+0x92>
 8007bb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bb4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007bb8:	f7f8 fd3e 	bl	8000638 <__aeabi_dmul>
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	460b      	mov	r3, r1
 8007bc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bc4:	f7f8 fb82 	bl	80002cc <__adddf3>
 8007bc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bcc:	3601      	adds	r6, #1
 8007bce:	9b05      	ldr	r3, [sp, #20]
 8007bd0:	429e      	cmp	r6, r3
 8007bd2:	f1a7 0708 	sub.w	r7, r7, #8
 8007bd6:	ddeb      	ble.n	8007bb0 <__kernel_rem_pio2+0xa0>
 8007bd8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007bdc:	f108 0801 	add.w	r8, r8, #1
 8007be0:	ecaa 7b02 	vstmia	sl!, {d7}
 8007be4:	3508      	adds	r5, #8
 8007be6:	e7ca      	b.n	8007b7e <__kernel_rem_pio2+0x6e>
 8007be8:	9b00      	ldr	r3, [sp, #0]
 8007bea:	f8dd 8000 	ldr.w	r8, [sp]
 8007bee:	aa0c      	add	r2, sp, #48	@ 0x30
 8007bf0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007bf4:	930a      	str	r3, [sp, #40]	@ 0x28
 8007bf6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8007bf8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007bfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bfe:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8007c02:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c04:	ab98      	add	r3, sp, #608	@ 0x260
 8007c06:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007c0a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8007c0e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007c12:	ac0c      	add	r4, sp, #48	@ 0x30
 8007c14:	ab70      	add	r3, sp, #448	@ 0x1c0
 8007c16:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8007c1a:	46a1      	mov	r9, r4
 8007c1c:	46c2      	mov	sl, r8
 8007c1e:	f1ba 0f00 	cmp.w	sl, #0
 8007c22:	f1a5 0508 	sub.w	r5, r5, #8
 8007c26:	dc77      	bgt.n	8007d18 <__kernel_rem_pio2+0x208>
 8007c28:	4658      	mov	r0, fp
 8007c2a:	ed9d 0b02 	vldr	d0, [sp, #8]
 8007c2e:	f000 fac7 	bl	80081c0 <scalbn>
 8007c32:	ec57 6b10 	vmov	r6, r7, d0
 8007c36:	2200      	movs	r2, #0
 8007c38:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8007c3c:	4630      	mov	r0, r6
 8007c3e:	4639      	mov	r1, r7
 8007c40:	f7f8 fcfa 	bl	8000638 <__aeabi_dmul>
 8007c44:	ec41 0b10 	vmov	d0, r0, r1
 8007c48:	f000 fb3a 	bl	80082c0 <floor>
 8007c4c:	4b75      	ldr	r3, [pc, #468]	@ (8007e24 <__kernel_rem_pio2+0x314>)
 8007c4e:	ec51 0b10 	vmov	r0, r1, d0
 8007c52:	2200      	movs	r2, #0
 8007c54:	f7f8 fcf0 	bl	8000638 <__aeabi_dmul>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	460b      	mov	r3, r1
 8007c5c:	4630      	mov	r0, r6
 8007c5e:	4639      	mov	r1, r7
 8007c60:	f7f8 fb32 	bl	80002c8 <__aeabi_dsub>
 8007c64:	460f      	mov	r7, r1
 8007c66:	4606      	mov	r6, r0
 8007c68:	f7f8 ff80 	bl	8000b6c <__aeabi_d2iz>
 8007c6c:	9002      	str	r0, [sp, #8]
 8007c6e:	f7f8 fc79 	bl	8000564 <__aeabi_i2d>
 8007c72:	4602      	mov	r2, r0
 8007c74:	460b      	mov	r3, r1
 8007c76:	4630      	mov	r0, r6
 8007c78:	4639      	mov	r1, r7
 8007c7a:	f7f8 fb25 	bl	80002c8 <__aeabi_dsub>
 8007c7e:	f1bb 0f00 	cmp.w	fp, #0
 8007c82:	4606      	mov	r6, r0
 8007c84:	460f      	mov	r7, r1
 8007c86:	dd6c      	ble.n	8007d62 <__kernel_rem_pio2+0x252>
 8007c88:	f108 31ff 	add.w	r1, r8, #4294967295
 8007c8c:	ab0c      	add	r3, sp, #48	@ 0x30
 8007c8e:	9d02      	ldr	r5, [sp, #8]
 8007c90:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007c94:	f1cb 0018 	rsb	r0, fp, #24
 8007c98:	fa43 f200 	asr.w	r2, r3, r0
 8007c9c:	4415      	add	r5, r2
 8007c9e:	4082      	lsls	r2, r0
 8007ca0:	1a9b      	subs	r3, r3, r2
 8007ca2:	aa0c      	add	r2, sp, #48	@ 0x30
 8007ca4:	9502      	str	r5, [sp, #8]
 8007ca6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8007caa:	f1cb 0217 	rsb	r2, fp, #23
 8007cae:	fa43 f902 	asr.w	r9, r3, r2
 8007cb2:	f1b9 0f00 	cmp.w	r9, #0
 8007cb6:	dd64      	ble.n	8007d82 <__kernel_rem_pio2+0x272>
 8007cb8:	9b02      	ldr	r3, [sp, #8]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	9302      	str	r3, [sp, #8]
 8007cc0:	4615      	mov	r5, r2
 8007cc2:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8007cc6:	4590      	cmp	r8, r2
 8007cc8:	f300 80b8 	bgt.w	8007e3c <__kernel_rem_pio2+0x32c>
 8007ccc:	f1bb 0f00 	cmp.w	fp, #0
 8007cd0:	dd07      	ble.n	8007ce2 <__kernel_rem_pio2+0x1d2>
 8007cd2:	f1bb 0f01 	cmp.w	fp, #1
 8007cd6:	f000 80bf 	beq.w	8007e58 <__kernel_rem_pio2+0x348>
 8007cda:	f1bb 0f02 	cmp.w	fp, #2
 8007cde:	f000 80c6 	beq.w	8007e6e <__kernel_rem_pio2+0x35e>
 8007ce2:	f1b9 0f02 	cmp.w	r9, #2
 8007ce6:	d14c      	bne.n	8007d82 <__kernel_rem_pio2+0x272>
 8007ce8:	4632      	mov	r2, r6
 8007cea:	463b      	mov	r3, r7
 8007cec:	494e      	ldr	r1, [pc, #312]	@ (8007e28 <__kernel_rem_pio2+0x318>)
 8007cee:	2000      	movs	r0, #0
 8007cf0:	f7f8 faea 	bl	80002c8 <__aeabi_dsub>
 8007cf4:	4606      	mov	r6, r0
 8007cf6:	460f      	mov	r7, r1
 8007cf8:	2d00      	cmp	r5, #0
 8007cfa:	d042      	beq.n	8007d82 <__kernel_rem_pio2+0x272>
 8007cfc:	4658      	mov	r0, fp
 8007cfe:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8007e18 <__kernel_rem_pio2+0x308>
 8007d02:	f000 fa5d 	bl	80081c0 <scalbn>
 8007d06:	4630      	mov	r0, r6
 8007d08:	4639      	mov	r1, r7
 8007d0a:	ec53 2b10 	vmov	r2, r3, d0
 8007d0e:	f7f8 fadb 	bl	80002c8 <__aeabi_dsub>
 8007d12:	4606      	mov	r6, r0
 8007d14:	460f      	mov	r7, r1
 8007d16:	e034      	b.n	8007d82 <__kernel_rem_pio2+0x272>
 8007d18:	4b44      	ldr	r3, [pc, #272]	@ (8007e2c <__kernel_rem_pio2+0x31c>)
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d20:	f7f8 fc8a 	bl	8000638 <__aeabi_dmul>
 8007d24:	f7f8 ff22 	bl	8000b6c <__aeabi_d2iz>
 8007d28:	f7f8 fc1c 	bl	8000564 <__aeabi_i2d>
 8007d2c:	4b40      	ldr	r3, [pc, #256]	@ (8007e30 <__kernel_rem_pio2+0x320>)
 8007d2e:	2200      	movs	r2, #0
 8007d30:	4606      	mov	r6, r0
 8007d32:	460f      	mov	r7, r1
 8007d34:	f7f8 fc80 	bl	8000638 <__aeabi_dmul>
 8007d38:	4602      	mov	r2, r0
 8007d3a:	460b      	mov	r3, r1
 8007d3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d40:	f7f8 fac2 	bl	80002c8 <__aeabi_dsub>
 8007d44:	f7f8 ff12 	bl	8000b6c <__aeabi_d2iz>
 8007d48:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007d4c:	f849 0b04 	str.w	r0, [r9], #4
 8007d50:	4639      	mov	r1, r7
 8007d52:	4630      	mov	r0, r6
 8007d54:	f7f8 faba 	bl	80002cc <__adddf3>
 8007d58:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d60:	e75d      	b.n	8007c1e <__kernel_rem_pio2+0x10e>
 8007d62:	d107      	bne.n	8007d74 <__kernel_rem_pio2+0x264>
 8007d64:	f108 33ff 	add.w	r3, r8, #4294967295
 8007d68:	aa0c      	add	r2, sp, #48	@ 0x30
 8007d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d6e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8007d72:	e79e      	b.n	8007cb2 <__kernel_rem_pio2+0x1a2>
 8007d74:	4b2f      	ldr	r3, [pc, #188]	@ (8007e34 <__kernel_rem_pio2+0x324>)
 8007d76:	2200      	movs	r2, #0
 8007d78:	f7f8 fee4 	bl	8000b44 <__aeabi_dcmpge>
 8007d7c:	2800      	cmp	r0, #0
 8007d7e:	d143      	bne.n	8007e08 <__kernel_rem_pio2+0x2f8>
 8007d80:	4681      	mov	r9, r0
 8007d82:	2200      	movs	r2, #0
 8007d84:	2300      	movs	r3, #0
 8007d86:	4630      	mov	r0, r6
 8007d88:	4639      	mov	r1, r7
 8007d8a:	f7f8 febd 	bl	8000b08 <__aeabi_dcmpeq>
 8007d8e:	2800      	cmp	r0, #0
 8007d90:	f000 80bf 	beq.w	8007f12 <__kernel_rem_pio2+0x402>
 8007d94:	f108 33ff 	add.w	r3, r8, #4294967295
 8007d98:	2200      	movs	r2, #0
 8007d9a:	9900      	ldr	r1, [sp, #0]
 8007d9c:	428b      	cmp	r3, r1
 8007d9e:	da6e      	bge.n	8007e7e <__kernel_rem_pio2+0x36e>
 8007da0:	2a00      	cmp	r2, #0
 8007da2:	f000 8089 	beq.w	8007eb8 <__kernel_rem_pio2+0x3a8>
 8007da6:	f108 38ff 	add.w	r8, r8, #4294967295
 8007daa:	ab0c      	add	r3, sp, #48	@ 0x30
 8007dac:	f1ab 0b18 	sub.w	fp, fp, #24
 8007db0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d0f6      	beq.n	8007da6 <__kernel_rem_pio2+0x296>
 8007db8:	4658      	mov	r0, fp
 8007dba:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8007e18 <__kernel_rem_pio2+0x308>
 8007dbe:	f000 f9ff 	bl	80081c0 <scalbn>
 8007dc2:	f108 0301 	add.w	r3, r8, #1
 8007dc6:	00da      	lsls	r2, r3, #3
 8007dc8:	9205      	str	r2, [sp, #20]
 8007dca:	ec55 4b10 	vmov	r4, r5, d0
 8007dce:	aa70      	add	r2, sp, #448	@ 0x1c0
 8007dd0:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8007e2c <__kernel_rem_pio2+0x31c>
 8007dd4:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8007dd8:	4646      	mov	r6, r8
 8007dda:	f04f 0a00 	mov.w	sl, #0
 8007dde:	2e00      	cmp	r6, #0
 8007de0:	f280 80cf 	bge.w	8007f82 <__kernel_rem_pio2+0x472>
 8007de4:	4644      	mov	r4, r8
 8007de6:	2c00      	cmp	r4, #0
 8007de8:	f2c0 80fd 	blt.w	8007fe6 <__kernel_rem_pio2+0x4d6>
 8007dec:	4b12      	ldr	r3, [pc, #72]	@ (8007e38 <__kernel_rem_pio2+0x328>)
 8007dee:	461f      	mov	r7, r3
 8007df0:	ab70      	add	r3, sp, #448	@ 0x1c0
 8007df2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007df6:	9306      	str	r3, [sp, #24]
 8007df8:	f04f 0a00 	mov.w	sl, #0
 8007dfc:	f04f 0b00 	mov.w	fp, #0
 8007e00:	2600      	movs	r6, #0
 8007e02:	eba8 0504 	sub.w	r5, r8, r4
 8007e06:	e0e2      	b.n	8007fce <__kernel_rem_pio2+0x4be>
 8007e08:	f04f 0902 	mov.w	r9, #2
 8007e0c:	e754      	b.n	8007cb8 <__kernel_rem_pio2+0x1a8>
 8007e0e:	bf00      	nop
	...
 8007e1c:	3ff00000 	.word	0x3ff00000
 8007e20:	08008750 	.word	0x08008750
 8007e24:	40200000 	.word	0x40200000
 8007e28:	3ff00000 	.word	0x3ff00000
 8007e2c:	3e700000 	.word	0x3e700000
 8007e30:	41700000 	.word	0x41700000
 8007e34:	3fe00000 	.word	0x3fe00000
 8007e38:	08008710 	.word	0x08008710
 8007e3c:	f854 3b04 	ldr.w	r3, [r4], #4
 8007e40:	b945      	cbnz	r5, 8007e54 <__kernel_rem_pio2+0x344>
 8007e42:	b123      	cbz	r3, 8007e4e <__kernel_rem_pio2+0x33e>
 8007e44:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8007e48:	f844 3c04 	str.w	r3, [r4, #-4]
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	3201      	adds	r2, #1
 8007e50:	461d      	mov	r5, r3
 8007e52:	e738      	b.n	8007cc6 <__kernel_rem_pio2+0x1b6>
 8007e54:	1acb      	subs	r3, r1, r3
 8007e56:	e7f7      	b.n	8007e48 <__kernel_rem_pio2+0x338>
 8007e58:	f108 32ff 	add.w	r2, r8, #4294967295
 8007e5c:	ab0c      	add	r3, sp, #48	@ 0x30
 8007e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e62:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007e66:	a90c      	add	r1, sp, #48	@ 0x30
 8007e68:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007e6c:	e739      	b.n	8007ce2 <__kernel_rem_pio2+0x1d2>
 8007e6e:	f108 32ff 	add.w	r2, r8, #4294967295
 8007e72:	ab0c      	add	r3, sp, #48	@ 0x30
 8007e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e78:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007e7c:	e7f3      	b.n	8007e66 <__kernel_rem_pio2+0x356>
 8007e7e:	a90c      	add	r1, sp, #48	@ 0x30
 8007e80:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007e84:	3b01      	subs	r3, #1
 8007e86:	430a      	orrs	r2, r1
 8007e88:	e787      	b.n	8007d9a <__kernel_rem_pio2+0x28a>
 8007e8a:	3401      	adds	r4, #1
 8007e8c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007e90:	2a00      	cmp	r2, #0
 8007e92:	d0fa      	beq.n	8007e8a <__kernel_rem_pio2+0x37a>
 8007e94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e96:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007e9a:	eb0d 0503 	add.w	r5, sp, r3
 8007e9e:	9b06      	ldr	r3, [sp, #24]
 8007ea0:	aa20      	add	r2, sp, #128	@ 0x80
 8007ea2:	4443      	add	r3, r8
 8007ea4:	f108 0701 	add.w	r7, r8, #1
 8007ea8:	3d98      	subs	r5, #152	@ 0x98
 8007eaa:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8007eae:	4444      	add	r4, r8
 8007eb0:	42bc      	cmp	r4, r7
 8007eb2:	da04      	bge.n	8007ebe <__kernel_rem_pio2+0x3ae>
 8007eb4:	46a0      	mov	r8, r4
 8007eb6:	e6a2      	b.n	8007bfe <__kernel_rem_pio2+0xee>
 8007eb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007eba:	2401      	movs	r4, #1
 8007ebc:	e7e6      	b.n	8007e8c <__kernel_rem_pio2+0x37c>
 8007ebe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ec0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8007ec4:	f7f8 fb4e 	bl	8000564 <__aeabi_i2d>
 8007ec8:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8008190 <__kernel_rem_pio2+0x680>
 8007ecc:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007ed0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007ed4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007ed8:	46b2      	mov	sl, r6
 8007eda:	f04f 0800 	mov.w	r8, #0
 8007ede:	9b05      	ldr	r3, [sp, #20]
 8007ee0:	4598      	cmp	r8, r3
 8007ee2:	dd05      	ble.n	8007ef0 <__kernel_rem_pio2+0x3e0>
 8007ee4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007ee8:	3701      	adds	r7, #1
 8007eea:	eca5 7b02 	vstmia	r5!, {d7}
 8007eee:	e7df      	b.n	8007eb0 <__kernel_rem_pio2+0x3a0>
 8007ef0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8007ef4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007ef8:	f7f8 fb9e 	bl	8000638 <__aeabi_dmul>
 8007efc:	4602      	mov	r2, r0
 8007efe:	460b      	mov	r3, r1
 8007f00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f04:	f7f8 f9e2 	bl	80002cc <__adddf3>
 8007f08:	f108 0801 	add.w	r8, r8, #1
 8007f0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f10:	e7e5      	b.n	8007ede <__kernel_rem_pio2+0x3ce>
 8007f12:	f1cb 0000 	rsb	r0, fp, #0
 8007f16:	ec47 6b10 	vmov	d0, r6, r7
 8007f1a:	f000 f951 	bl	80081c0 <scalbn>
 8007f1e:	ec55 4b10 	vmov	r4, r5, d0
 8007f22:	4b9d      	ldr	r3, [pc, #628]	@ (8008198 <__kernel_rem_pio2+0x688>)
 8007f24:	2200      	movs	r2, #0
 8007f26:	4620      	mov	r0, r4
 8007f28:	4629      	mov	r1, r5
 8007f2a:	f7f8 fe0b 	bl	8000b44 <__aeabi_dcmpge>
 8007f2e:	b300      	cbz	r0, 8007f72 <__kernel_rem_pio2+0x462>
 8007f30:	4b9a      	ldr	r3, [pc, #616]	@ (800819c <__kernel_rem_pio2+0x68c>)
 8007f32:	2200      	movs	r2, #0
 8007f34:	4620      	mov	r0, r4
 8007f36:	4629      	mov	r1, r5
 8007f38:	f7f8 fb7e 	bl	8000638 <__aeabi_dmul>
 8007f3c:	f7f8 fe16 	bl	8000b6c <__aeabi_d2iz>
 8007f40:	4606      	mov	r6, r0
 8007f42:	f7f8 fb0f 	bl	8000564 <__aeabi_i2d>
 8007f46:	4b94      	ldr	r3, [pc, #592]	@ (8008198 <__kernel_rem_pio2+0x688>)
 8007f48:	2200      	movs	r2, #0
 8007f4a:	f7f8 fb75 	bl	8000638 <__aeabi_dmul>
 8007f4e:	460b      	mov	r3, r1
 8007f50:	4602      	mov	r2, r0
 8007f52:	4629      	mov	r1, r5
 8007f54:	4620      	mov	r0, r4
 8007f56:	f7f8 f9b7 	bl	80002c8 <__aeabi_dsub>
 8007f5a:	f7f8 fe07 	bl	8000b6c <__aeabi_d2iz>
 8007f5e:	ab0c      	add	r3, sp, #48	@ 0x30
 8007f60:	f10b 0b18 	add.w	fp, fp, #24
 8007f64:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8007f68:	f108 0801 	add.w	r8, r8, #1
 8007f6c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8007f70:	e722      	b.n	8007db8 <__kernel_rem_pio2+0x2a8>
 8007f72:	4620      	mov	r0, r4
 8007f74:	4629      	mov	r1, r5
 8007f76:	f7f8 fdf9 	bl	8000b6c <__aeabi_d2iz>
 8007f7a:	ab0c      	add	r3, sp, #48	@ 0x30
 8007f7c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8007f80:	e71a      	b.n	8007db8 <__kernel_rem_pio2+0x2a8>
 8007f82:	ab0c      	add	r3, sp, #48	@ 0x30
 8007f84:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007f88:	f7f8 faec 	bl	8000564 <__aeabi_i2d>
 8007f8c:	4622      	mov	r2, r4
 8007f8e:	462b      	mov	r3, r5
 8007f90:	f7f8 fb52 	bl	8000638 <__aeabi_dmul>
 8007f94:	4652      	mov	r2, sl
 8007f96:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8007f9a:	465b      	mov	r3, fp
 8007f9c:	4620      	mov	r0, r4
 8007f9e:	4629      	mov	r1, r5
 8007fa0:	f7f8 fb4a 	bl	8000638 <__aeabi_dmul>
 8007fa4:	3e01      	subs	r6, #1
 8007fa6:	4604      	mov	r4, r0
 8007fa8:	460d      	mov	r5, r1
 8007faa:	e718      	b.n	8007dde <__kernel_rem_pio2+0x2ce>
 8007fac:	9906      	ldr	r1, [sp, #24]
 8007fae:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8007fb2:	9106      	str	r1, [sp, #24]
 8007fb4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8007fb8:	f7f8 fb3e 	bl	8000638 <__aeabi_dmul>
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	460b      	mov	r3, r1
 8007fc0:	4650      	mov	r0, sl
 8007fc2:	4659      	mov	r1, fp
 8007fc4:	f7f8 f982 	bl	80002cc <__adddf3>
 8007fc8:	3601      	adds	r6, #1
 8007fca:	4682      	mov	sl, r0
 8007fcc:	468b      	mov	fp, r1
 8007fce:	9b00      	ldr	r3, [sp, #0]
 8007fd0:	429e      	cmp	r6, r3
 8007fd2:	dc01      	bgt.n	8007fd8 <__kernel_rem_pio2+0x4c8>
 8007fd4:	42b5      	cmp	r5, r6
 8007fd6:	dae9      	bge.n	8007fac <__kernel_rem_pio2+0x49c>
 8007fd8:	ab48      	add	r3, sp, #288	@ 0x120
 8007fda:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007fde:	e9c5 ab00 	strd	sl, fp, [r5]
 8007fe2:	3c01      	subs	r4, #1
 8007fe4:	e6ff      	b.n	8007de6 <__kernel_rem_pio2+0x2d6>
 8007fe6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8007fe8:	2b02      	cmp	r3, #2
 8007fea:	dc0b      	bgt.n	8008004 <__kernel_rem_pio2+0x4f4>
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	dc39      	bgt.n	8008064 <__kernel_rem_pio2+0x554>
 8007ff0:	d05d      	beq.n	80080ae <__kernel_rem_pio2+0x59e>
 8007ff2:	9b02      	ldr	r3, [sp, #8]
 8007ff4:	f003 0007 	and.w	r0, r3, #7
 8007ff8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8007ffc:	ecbd 8b02 	vpop	{d8}
 8008000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008004:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8008006:	2b03      	cmp	r3, #3
 8008008:	d1f3      	bne.n	8007ff2 <__kernel_rem_pio2+0x4e2>
 800800a:	9b05      	ldr	r3, [sp, #20]
 800800c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008010:	eb0d 0403 	add.w	r4, sp, r3
 8008014:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8008018:	4625      	mov	r5, r4
 800801a:	46c2      	mov	sl, r8
 800801c:	f1ba 0f00 	cmp.w	sl, #0
 8008020:	f1a5 0508 	sub.w	r5, r5, #8
 8008024:	dc6b      	bgt.n	80080fe <__kernel_rem_pio2+0x5ee>
 8008026:	4645      	mov	r5, r8
 8008028:	2d01      	cmp	r5, #1
 800802a:	f1a4 0408 	sub.w	r4, r4, #8
 800802e:	f300 8087 	bgt.w	8008140 <__kernel_rem_pio2+0x630>
 8008032:	9c05      	ldr	r4, [sp, #20]
 8008034:	ab48      	add	r3, sp, #288	@ 0x120
 8008036:	441c      	add	r4, r3
 8008038:	2000      	movs	r0, #0
 800803a:	2100      	movs	r1, #0
 800803c:	f1b8 0f01 	cmp.w	r8, #1
 8008040:	f300 809c 	bgt.w	800817c <__kernel_rem_pio2+0x66c>
 8008044:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8008048:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800804c:	f1b9 0f00 	cmp.w	r9, #0
 8008050:	f040 80a6 	bne.w	80081a0 <__kernel_rem_pio2+0x690>
 8008054:	9b04      	ldr	r3, [sp, #16]
 8008056:	e9c3 7800 	strd	r7, r8, [r3]
 800805a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800805e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8008062:	e7c6      	b.n	8007ff2 <__kernel_rem_pio2+0x4e2>
 8008064:	9d05      	ldr	r5, [sp, #20]
 8008066:	ab48      	add	r3, sp, #288	@ 0x120
 8008068:	441d      	add	r5, r3
 800806a:	4644      	mov	r4, r8
 800806c:	2000      	movs	r0, #0
 800806e:	2100      	movs	r1, #0
 8008070:	2c00      	cmp	r4, #0
 8008072:	da35      	bge.n	80080e0 <__kernel_rem_pio2+0x5d0>
 8008074:	f1b9 0f00 	cmp.w	r9, #0
 8008078:	d038      	beq.n	80080ec <__kernel_rem_pio2+0x5dc>
 800807a:	4602      	mov	r2, r0
 800807c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008080:	9c04      	ldr	r4, [sp, #16]
 8008082:	e9c4 2300 	strd	r2, r3, [r4]
 8008086:	4602      	mov	r2, r0
 8008088:	460b      	mov	r3, r1
 800808a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800808e:	f7f8 f91b 	bl	80002c8 <__aeabi_dsub>
 8008092:	ad4a      	add	r5, sp, #296	@ 0x128
 8008094:	2401      	movs	r4, #1
 8008096:	45a0      	cmp	r8, r4
 8008098:	da2b      	bge.n	80080f2 <__kernel_rem_pio2+0x5e2>
 800809a:	f1b9 0f00 	cmp.w	r9, #0
 800809e:	d002      	beq.n	80080a6 <__kernel_rem_pio2+0x596>
 80080a0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80080a4:	4619      	mov	r1, r3
 80080a6:	9b04      	ldr	r3, [sp, #16]
 80080a8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80080ac:	e7a1      	b.n	8007ff2 <__kernel_rem_pio2+0x4e2>
 80080ae:	9c05      	ldr	r4, [sp, #20]
 80080b0:	ab48      	add	r3, sp, #288	@ 0x120
 80080b2:	441c      	add	r4, r3
 80080b4:	2000      	movs	r0, #0
 80080b6:	2100      	movs	r1, #0
 80080b8:	f1b8 0f00 	cmp.w	r8, #0
 80080bc:	da09      	bge.n	80080d2 <__kernel_rem_pio2+0x5c2>
 80080be:	f1b9 0f00 	cmp.w	r9, #0
 80080c2:	d002      	beq.n	80080ca <__kernel_rem_pio2+0x5ba>
 80080c4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80080c8:	4619      	mov	r1, r3
 80080ca:	9b04      	ldr	r3, [sp, #16]
 80080cc:	e9c3 0100 	strd	r0, r1, [r3]
 80080d0:	e78f      	b.n	8007ff2 <__kernel_rem_pio2+0x4e2>
 80080d2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80080d6:	f7f8 f8f9 	bl	80002cc <__adddf3>
 80080da:	f108 38ff 	add.w	r8, r8, #4294967295
 80080de:	e7eb      	b.n	80080b8 <__kernel_rem_pio2+0x5a8>
 80080e0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80080e4:	f7f8 f8f2 	bl	80002cc <__adddf3>
 80080e8:	3c01      	subs	r4, #1
 80080ea:	e7c1      	b.n	8008070 <__kernel_rem_pio2+0x560>
 80080ec:	4602      	mov	r2, r0
 80080ee:	460b      	mov	r3, r1
 80080f0:	e7c6      	b.n	8008080 <__kernel_rem_pio2+0x570>
 80080f2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80080f6:	f7f8 f8e9 	bl	80002cc <__adddf3>
 80080fa:	3401      	adds	r4, #1
 80080fc:	e7cb      	b.n	8008096 <__kernel_rem_pio2+0x586>
 80080fe:	ed95 7b00 	vldr	d7, [r5]
 8008102:	ed8d 7b00 	vstr	d7, [sp]
 8008106:	ed95 7b02 	vldr	d7, [r5, #8]
 800810a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800810e:	ec53 2b17 	vmov	r2, r3, d7
 8008112:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008116:	f7f8 f8d9 	bl	80002cc <__adddf3>
 800811a:	4602      	mov	r2, r0
 800811c:	460b      	mov	r3, r1
 800811e:	4606      	mov	r6, r0
 8008120:	460f      	mov	r7, r1
 8008122:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008126:	f7f8 f8cf 	bl	80002c8 <__aeabi_dsub>
 800812a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800812e:	f7f8 f8cd 	bl	80002cc <__adddf3>
 8008132:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008136:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800813a:	e9c5 6700 	strd	r6, r7, [r5]
 800813e:	e76d      	b.n	800801c <__kernel_rem_pio2+0x50c>
 8008140:	ed94 7b00 	vldr	d7, [r4]
 8008144:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8008148:	ec51 0b17 	vmov	r0, r1, d7
 800814c:	4652      	mov	r2, sl
 800814e:	465b      	mov	r3, fp
 8008150:	ed8d 7b00 	vstr	d7, [sp]
 8008154:	f7f8 f8ba 	bl	80002cc <__adddf3>
 8008158:	4602      	mov	r2, r0
 800815a:	460b      	mov	r3, r1
 800815c:	4606      	mov	r6, r0
 800815e:	460f      	mov	r7, r1
 8008160:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008164:	f7f8 f8b0 	bl	80002c8 <__aeabi_dsub>
 8008168:	4652      	mov	r2, sl
 800816a:	465b      	mov	r3, fp
 800816c:	f7f8 f8ae 	bl	80002cc <__adddf3>
 8008170:	3d01      	subs	r5, #1
 8008172:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008176:	e9c4 6700 	strd	r6, r7, [r4]
 800817a:	e755      	b.n	8008028 <__kernel_rem_pio2+0x518>
 800817c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008180:	f7f8 f8a4 	bl	80002cc <__adddf3>
 8008184:	f108 38ff 	add.w	r8, r8, #4294967295
 8008188:	e758      	b.n	800803c <__kernel_rem_pio2+0x52c>
 800818a:	bf00      	nop
 800818c:	f3af 8000 	nop.w
	...
 8008198:	41700000 	.word	0x41700000
 800819c:	3e700000 	.word	0x3e700000
 80081a0:	9b04      	ldr	r3, [sp, #16]
 80081a2:	9a04      	ldr	r2, [sp, #16]
 80081a4:	601f      	str	r7, [r3, #0]
 80081a6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 80081aa:	605c      	str	r4, [r3, #4]
 80081ac:	609d      	str	r5, [r3, #8]
 80081ae:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80081b2:	60d3      	str	r3, [r2, #12]
 80081b4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80081b8:	6110      	str	r0, [r2, #16]
 80081ba:	6153      	str	r3, [r2, #20]
 80081bc:	e719      	b.n	8007ff2 <__kernel_rem_pio2+0x4e2>
 80081be:	bf00      	nop

080081c0 <scalbn>:
 80081c0:	b570      	push	{r4, r5, r6, lr}
 80081c2:	ec55 4b10 	vmov	r4, r5, d0
 80081c6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80081ca:	4606      	mov	r6, r0
 80081cc:	462b      	mov	r3, r5
 80081ce:	b991      	cbnz	r1, 80081f6 <scalbn+0x36>
 80081d0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80081d4:	4323      	orrs	r3, r4
 80081d6:	d03d      	beq.n	8008254 <scalbn+0x94>
 80081d8:	4b35      	ldr	r3, [pc, #212]	@ (80082b0 <scalbn+0xf0>)
 80081da:	4620      	mov	r0, r4
 80081dc:	4629      	mov	r1, r5
 80081de:	2200      	movs	r2, #0
 80081e0:	f7f8 fa2a 	bl	8000638 <__aeabi_dmul>
 80081e4:	4b33      	ldr	r3, [pc, #204]	@ (80082b4 <scalbn+0xf4>)
 80081e6:	429e      	cmp	r6, r3
 80081e8:	4604      	mov	r4, r0
 80081ea:	460d      	mov	r5, r1
 80081ec:	da0f      	bge.n	800820e <scalbn+0x4e>
 80081ee:	a328      	add	r3, pc, #160	@ (adr r3, 8008290 <scalbn+0xd0>)
 80081f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f4:	e01e      	b.n	8008234 <scalbn+0x74>
 80081f6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80081fa:	4291      	cmp	r1, r2
 80081fc:	d10b      	bne.n	8008216 <scalbn+0x56>
 80081fe:	4622      	mov	r2, r4
 8008200:	4620      	mov	r0, r4
 8008202:	4629      	mov	r1, r5
 8008204:	f7f8 f862 	bl	80002cc <__adddf3>
 8008208:	4604      	mov	r4, r0
 800820a:	460d      	mov	r5, r1
 800820c:	e022      	b.n	8008254 <scalbn+0x94>
 800820e:	460b      	mov	r3, r1
 8008210:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008214:	3936      	subs	r1, #54	@ 0x36
 8008216:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800821a:	4296      	cmp	r6, r2
 800821c:	dd0d      	ble.n	800823a <scalbn+0x7a>
 800821e:	2d00      	cmp	r5, #0
 8008220:	a11d      	add	r1, pc, #116	@ (adr r1, 8008298 <scalbn+0xd8>)
 8008222:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008226:	da02      	bge.n	800822e <scalbn+0x6e>
 8008228:	a11d      	add	r1, pc, #116	@ (adr r1, 80082a0 <scalbn+0xe0>)
 800822a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800822e:	a31a      	add	r3, pc, #104	@ (adr r3, 8008298 <scalbn+0xd8>)
 8008230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008234:	f7f8 fa00 	bl	8000638 <__aeabi_dmul>
 8008238:	e7e6      	b.n	8008208 <scalbn+0x48>
 800823a:	1872      	adds	r2, r6, r1
 800823c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8008240:	428a      	cmp	r2, r1
 8008242:	dcec      	bgt.n	800821e <scalbn+0x5e>
 8008244:	2a00      	cmp	r2, #0
 8008246:	dd08      	ble.n	800825a <scalbn+0x9a>
 8008248:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800824c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008250:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008254:	ec45 4b10 	vmov	d0, r4, r5
 8008258:	bd70      	pop	{r4, r5, r6, pc}
 800825a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800825e:	da08      	bge.n	8008272 <scalbn+0xb2>
 8008260:	2d00      	cmp	r5, #0
 8008262:	a10b      	add	r1, pc, #44	@ (adr r1, 8008290 <scalbn+0xd0>)
 8008264:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008268:	dac1      	bge.n	80081ee <scalbn+0x2e>
 800826a:	a10f      	add	r1, pc, #60	@ (adr r1, 80082a8 <scalbn+0xe8>)
 800826c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008270:	e7bd      	b.n	80081ee <scalbn+0x2e>
 8008272:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008276:	3236      	adds	r2, #54	@ 0x36
 8008278:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800827c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008280:	4620      	mov	r0, r4
 8008282:	4b0d      	ldr	r3, [pc, #52]	@ (80082b8 <scalbn+0xf8>)
 8008284:	4629      	mov	r1, r5
 8008286:	2200      	movs	r2, #0
 8008288:	e7d4      	b.n	8008234 <scalbn+0x74>
 800828a:	bf00      	nop
 800828c:	f3af 8000 	nop.w
 8008290:	c2f8f359 	.word	0xc2f8f359
 8008294:	01a56e1f 	.word	0x01a56e1f
 8008298:	8800759c 	.word	0x8800759c
 800829c:	7e37e43c 	.word	0x7e37e43c
 80082a0:	8800759c 	.word	0x8800759c
 80082a4:	fe37e43c 	.word	0xfe37e43c
 80082a8:	c2f8f359 	.word	0xc2f8f359
 80082ac:	81a56e1f 	.word	0x81a56e1f
 80082b0:	43500000 	.word	0x43500000
 80082b4:	ffff3cb0 	.word	0xffff3cb0
 80082b8:	3c900000 	.word	0x3c900000
 80082bc:	00000000 	.word	0x00000000

080082c0 <floor>:
 80082c0:	ec51 0b10 	vmov	r0, r1, d0
 80082c4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80082c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082cc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80082d0:	2e13      	cmp	r6, #19
 80082d2:	460c      	mov	r4, r1
 80082d4:	4605      	mov	r5, r0
 80082d6:	4680      	mov	r8, r0
 80082d8:	dc34      	bgt.n	8008344 <floor+0x84>
 80082da:	2e00      	cmp	r6, #0
 80082dc:	da17      	bge.n	800830e <floor+0x4e>
 80082de:	a332      	add	r3, pc, #200	@ (adr r3, 80083a8 <floor+0xe8>)
 80082e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e4:	f7f7 fff2 	bl	80002cc <__adddf3>
 80082e8:	2200      	movs	r2, #0
 80082ea:	2300      	movs	r3, #0
 80082ec:	f7f8 fc34 	bl	8000b58 <__aeabi_dcmpgt>
 80082f0:	b150      	cbz	r0, 8008308 <floor+0x48>
 80082f2:	2c00      	cmp	r4, #0
 80082f4:	da55      	bge.n	80083a2 <floor+0xe2>
 80082f6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80082fa:	432c      	orrs	r4, r5
 80082fc:	2500      	movs	r5, #0
 80082fe:	42ac      	cmp	r4, r5
 8008300:	4c2b      	ldr	r4, [pc, #172]	@ (80083b0 <floor+0xf0>)
 8008302:	bf08      	it	eq
 8008304:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8008308:	4621      	mov	r1, r4
 800830a:	4628      	mov	r0, r5
 800830c:	e023      	b.n	8008356 <floor+0x96>
 800830e:	4f29      	ldr	r7, [pc, #164]	@ (80083b4 <floor+0xf4>)
 8008310:	4137      	asrs	r7, r6
 8008312:	ea01 0307 	and.w	r3, r1, r7
 8008316:	4303      	orrs	r3, r0
 8008318:	d01d      	beq.n	8008356 <floor+0x96>
 800831a:	a323      	add	r3, pc, #140	@ (adr r3, 80083a8 <floor+0xe8>)
 800831c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008320:	f7f7 ffd4 	bl	80002cc <__adddf3>
 8008324:	2200      	movs	r2, #0
 8008326:	2300      	movs	r3, #0
 8008328:	f7f8 fc16 	bl	8000b58 <__aeabi_dcmpgt>
 800832c:	2800      	cmp	r0, #0
 800832e:	d0eb      	beq.n	8008308 <floor+0x48>
 8008330:	2c00      	cmp	r4, #0
 8008332:	bfbe      	ittt	lt
 8008334:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8008338:	4133      	asrlt	r3, r6
 800833a:	18e4      	addlt	r4, r4, r3
 800833c:	ea24 0407 	bic.w	r4, r4, r7
 8008340:	2500      	movs	r5, #0
 8008342:	e7e1      	b.n	8008308 <floor+0x48>
 8008344:	2e33      	cmp	r6, #51	@ 0x33
 8008346:	dd0a      	ble.n	800835e <floor+0x9e>
 8008348:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800834c:	d103      	bne.n	8008356 <floor+0x96>
 800834e:	4602      	mov	r2, r0
 8008350:	460b      	mov	r3, r1
 8008352:	f7f7 ffbb 	bl	80002cc <__adddf3>
 8008356:	ec41 0b10 	vmov	d0, r0, r1
 800835a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800835e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8008362:	f04f 37ff 	mov.w	r7, #4294967295
 8008366:	40df      	lsrs	r7, r3
 8008368:	4207      	tst	r7, r0
 800836a:	d0f4      	beq.n	8008356 <floor+0x96>
 800836c:	a30e      	add	r3, pc, #56	@ (adr r3, 80083a8 <floor+0xe8>)
 800836e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008372:	f7f7 ffab 	bl	80002cc <__adddf3>
 8008376:	2200      	movs	r2, #0
 8008378:	2300      	movs	r3, #0
 800837a:	f7f8 fbed 	bl	8000b58 <__aeabi_dcmpgt>
 800837e:	2800      	cmp	r0, #0
 8008380:	d0c2      	beq.n	8008308 <floor+0x48>
 8008382:	2c00      	cmp	r4, #0
 8008384:	da0a      	bge.n	800839c <floor+0xdc>
 8008386:	2e14      	cmp	r6, #20
 8008388:	d101      	bne.n	800838e <floor+0xce>
 800838a:	3401      	adds	r4, #1
 800838c:	e006      	b.n	800839c <floor+0xdc>
 800838e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8008392:	2301      	movs	r3, #1
 8008394:	40b3      	lsls	r3, r6
 8008396:	441d      	add	r5, r3
 8008398:	4545      	cmp	r5, r8
 800839a:	d3f6      	bcc.n	800838a <floor+0xca>
 800839c:	ea25 0507 	bic.w	r5, r5, r7
 80083a0:	e7b2      	b.n	8008308 <floor+0x48>
 80083a2:	2500      	movs	r5, #0
 80083a4:	462c      	mov	r4, r5
 80083a6:	e7af      	b.n	8008308 <floor+0x48>
 80083a8:	8800759c 	.word	0x8800759c
 80083ac:	7e37e43c 	.word	0x7e37e43c
 80083b0:	bff00000 	.word	0xbff00000
 80083b4:	000fffff 	.word	0x000fffff

080083b8 <_init>:
 80083b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ba:	bf00      	nop
 80083bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083be:	bc08      	pop	{r3}
 80083c0:	469e      	mov	lr, r3
 80083c2:	4770      	bx	lr

080083c4 <_fini>:
 80083c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083c6:	bf00      	nop
 80083c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083ca:	bc08      	pop	{r3}
 80083cc:	469e      	mov	lr, r3
 80083ce:	4770      	bx	lr
